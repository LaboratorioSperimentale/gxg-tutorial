{"version":3,"file":"7226.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { map } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IOutputAreaModel.\n */\nexport class OutputAreaModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        /**\n         * A flag that is set when we want to clear the output area\n         * *after* the next addition to it.\n         */\n        this.clearNext = false;\n        this._lastStream = '';\n        this._trusted = false;\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._trusted = !!options.trusted;\n        this.contentFactory =\n            options.contentFactory || OutputAreaModel.defaultContentFactory;\n        this.list = new ObservableList();\n        if (options.values) {\n            for (const value of options.values) {\n                const index = this._add(value) - 1;\n                const item = this.list.get(index);\n                item.changed.connect(this._onGenericChange, this);\n            }\n        }\n        this.list.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * A signal emitted when an item changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the list of items changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this.list ? this.list.length : 0;\n    }\n    /**\n     * Get whether the model is trusted.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    /**\n     * Set whether the model is trusted.\n     *\n     * #### Notes\n     * Changing the value will cause all of the models to re-set.\n     */\n    set trusted(value) {\n        if (value === this._trusted) {\n            return;\n        }\n        const trusted = (this._trusted = value);\n        for (let i = 0; i < this.list.length; i++) {\n            const oldItem = this.list.get(i);\n            const value = oldItem.toJSON();\n            const item = this._createItem({ value, trusted });\n            this.list.set(i, item);\n            oldItem.dispose();\n        }\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.list.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return this.list.get(index);\n    }\n    /**\n     * Set the value at the specified index.\n     */\n    set(index, value) {\n        value = JSONExt.deepCopy(value);\n        // Normalize stream data.\n        Private.normalize(value);\n        const item = this._createItem({ value, trusted: this._trusted });\n        this.list.set(index, item);\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied.\n     * Contiguous stream outputs of the same `name` are combined.\n     */\n    add(output) {\n        // If we received a delayed clear message, then clear now.\n        if (this.clearNext) {\n            this.clear();\n            this.clearNext = false;\n        }\n        return this._add(output);\n    }\n    /**\n     * Clear all of the output.\n     *\n     * @param wait Delay clearing the output until the next message is added.\n     */\n    clear(wait = false) {\n        this._lastStream = '';\n        if (wait) {\n            this.clearNext = true;\n            return;\n        }\n        for (const item of this.list) {\n            item.dispose();\n        }\n        this.list.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        for (const value of values) {\n            this._add(value);\n        }\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return Array.from(map(this.list, (output) => output.toJSON()));\n    }\n    /**\n     * Add a copy of the item to the list.\n     *\n     * @returns The list length\n     */\n    _add(value) {\n        const trusted = this._trusted;\n        value = JSONExt.deepCopy(value);\n        // Normalize the value.\n        Private.normalize(value);\n        // Consolidate outputs if they are stream outputs of the same kind.\n        if (nbformat.isStream(value) &&\n            this._lastStream &&\n            value.name === this._lastName &&\n            this.shouldCombine({\n                value,\n                lastModel: this.list.get(this.length - 1)\n            })) {\n            // In order to get a list change event, we add the previous\n            // text to the current item and replace the previous item.\n            // This also replaces the metadata of the last item.\n            this._lastStream += value.text;\n            this._lastStream = Private.removeOverwrittenChars(this._lastStream);\n            value.text = this._lastStream;\n            const item = this._createItem({ value, trusted });\n            const index = this.length - 1;\n            const prev = this.list.get(index);\n            this.list.set(index, item);\n            prev.dispose();\n            return this.length;\n        }\n        if (nbformat.isStream(value)) {\n            value.text = Private.removeOverwrittenChars(value.text);\n        }\n        // Create the new item.\n        const item = this._createItem({ value, trusted });\n        // Update the stream information.\n        if (nbformat.isStream(value)) {\n            this._lastStream = value.text;\n            this._lastName = value.name;\n        }\n        else {\n            this._lastStream = '';\n        }\n        // Add the item to our list and return the new length.\n        return this.list.push(item);\n    }\n    /**\n     * Whether a new value should be consolidated with the previous output.\n     *\n     * This will only be called if the minimal criteria of both being stream\n     * messages of the same type.\n     */\n    shouldCombine(options) {\n        return true;\n    }\n    /**\n     * Create an output item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createOutputModel(options);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onListChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                args.newValues.forEach(item => {\n                    item.changed.connect(this._onGenericChange, this);\n                });\n                break;\n            case 'remove':\n                args.oldValues.forEach(item => {\n                    item.changed.disconnect(this._onGenericChange, this);\n                });\n                break;\n            case 'set':\n                args.newValues.forEach(item => {\n                    item.changed.connect(this._onGenericChange, this);\n                });\n                args.oldValues.forEach(item => {\n                    item.changed.disconnect(this._onGenericChange, this);\n                });\n                break;\n        }\n        this._changed.emit(args);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange(itemModel) {\n        let idx;\n        for (idx = 0; idx < this.list.length; idx++) {\n            const item = this.list.get(idx);\n            if (item === itemModel) {\n                break;\n            }\n        }\n        this._stateChanged.emit(idx);\n    }\n}\n/**\n * The namespace for OutputAreaModel class statics.\n */\n(function (OutputAreaModel) {\n    /**\n     * The default implementation of a `IModelOutputFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output model.\n         */\n        createOutputModel(options) {\n            return new OutputModel(options);\n        }\n    }\n    OutputAreaModel.ContentFactory = ContentFactory;\n    /**\n     * The default output model factory.\n     */\n    OutputAreaModel.defaultContentFactory = new ContentFactory();\n})(OutputAreaModel || (OutputAreaModel = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize an output.\n     */\n    function normalize(value) {\n        if (nbformat.isStream(value)) {\n            if (Array.isArray(value.text)) {\n                value.text = value.text.join('\\n');\n            }\n        }\n    }\n    Private.normalize = normalize;\n    /**\n     * Remove characters that are overridden by backspace characters.\n     */\n    function fixBackspace(txt) {\n        let tmp = txt;\n        do {\n            txt = tmp;\n            // Cancel out anything-but-newline followed by backspace\n            tmp = txt.replace(/[^\\n]\\x08/gm, ''); // eslint-disable-line no-control-regex\n        } while (tmp.length < txt.length);\n        return txt;\n    }\n    /**\n     * Remove chunks that should be overridden by the effect of\n     * carriage return characters.\n     */\n    function fixCarriageReturn(txt) {\n        txt = txt.replace(/\\r+\\n/gm, '\\n'); // \\r followed by \\n --> newline\n        while (txt.search(/\\r[^$]/g) > -1) {\n            const base = txt.match(/^(.*)\\r+/m)[1];\n            let insert = txt.match(/\\r+(.*)$/m)[1];\n            insert = insert + base.slice(insert.length, base.length);\n            txt = txt.replace(/\\r+.*$/m, '\\r').replace(/^.*\\r/m, insert);\n        }\n        return txt;\n    }\n    /*\n     * Remove characters overridden by backspaces and carriage returns\n     */\n    function removeOverwrittenChars(text) {\n        return fixCarriageReturn(fixBackspace(text));\n    }\n    Private.removeOverwrittenChars = removeOverwrittenChars;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\n/**\n * The class name added to an output area widget.\n */\nconst OUTPUT_AREA_CLASS = 'jp-OutputArea';\n/**\n * The class name added to the direction children of OutputArea\n */\nconst OUTPUT_AREA_ITEM_CLASS = 'jp-OutputArea-child';\n/**\n * The class name added to actual outputs\n */\nconst OUTPUT_AREA_OUTPUT_CLASS = 'jp-OutputArea-output';\n/**\n * The class name added to prompt children of OutputArea.\n */\nconst OUTPUT_AREA_PROMPT_CLASS = 'jp-OutputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-OutputPrompt';\n/**\n * The class name added to an execution result.\n */\nconst EXECUTE_CLASS = 'jp-OutputArea-executeResult';\n/**\n * The class name added stdin items of OutputArea\n */\nconst OUTPUT_AREA_STDIN_ITEM_CLASS = 'jp-OutputArea-stdin-item';\n/**\n * The class name added to stdin widgets.\n */\nconst STDIN_CLASS = 'jp-Stdin';\n/**\n * The class name added to stdin data prompt nodes.\n */\nconst STDIN_PROMPT_CLASS = 'jp-Stdin-prompt';\n/**\n * The class name added to stdin data input nodes.\n */\nconst STDIN_INPUT_CLASS = 'jp-Stdin-input';\n/**\n * The overlay that can be clicked to switch between output scrolling modes.\n */\nconst OUTPUT_PROMPT_OVERLAY = 'jp-OutputArea-promptOverlay';\n/** ****************************************************************************\n * OutputArea\n ******************************************************************************/\n/**\n * An output area widget.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class OutputArea extends Widget {\n    /**\n     * Construct an output area widget.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        /**\n         * A public signal used to indicate the number of displayed outputs has changed.\n         *\n         * #### Notes\n         * This is useful for parents who want to apply styling based on the number\n         * of outputs. Emits the current number of outputs.\n         */\n        this.outputLengthChanged = new Signal(this);\n        /**\n         * Handle an iopub message.\n         */\n        this._onIOPub = (msg) => {\n            const model = this.model;\n            const msgType = msg.header.msg_type;\n            let output;\n            const transient = (msg.content.transient || {});\n            const displayId = transient['display_id'];\n            let targets;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = { ...msg.content, output_type: msgType };\n                    model.add(output);\n                    break;\n                case 'clear_output': {\n                    const wait = msg.content.wait;\n                    model.clear(wait);\n                    break;\n                }\n                case 'update_display_data':\n                    output = { ...msg.content, output_type: 'display_data' };\n                    targets = this._displayIdMap.get(displayId);\n                    if (targets) {\n                        for (const index of targets) {\n                            model.set(index, output);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n            if (displayId && msgType === 'display_data') {\n                targets = this._displayIdMap.get(displayId) || [];\n                targets.push(model.length - 1);\n                this._displayIdMap.set(displayId, targets);\n            }\n        };\n        /**\n         * Handle an execute reply message.\n         */\n        this._onExecuteReply = (msg) => {\n            // API responses that contain a pager are special cased and their type\n            // is overridden from 'execute_reply' to 'display_data' in order to\n            // render output.\n            const model = this.model;\n            const content = msg.content;\n            if (content.status !== 'ok') {\n                return;\n            }\n            const payload = content && content.payload;\n            if (!payload || !payload.length) {\n                return;\n            }\n            const pages = payload.filter((i) => i.source === 'page');\n            if (!pages.length) {\n                return;\n            }\n            const page = JSON.parse(JSON.stringify(pages[0]));\n            const output = {\n                output_type: 'display_data',\n                data: page.data,\n                metadata: {}\n            };\n            model.add(output);\n        };\n        this._displayIdMap = new Map();\n        this._minHeightTimeout = null;\n        this._inputRequested = new Signal(this);\n        this._toggleScrolling = new Signal(this);\n        this._outputTracker = new WidgetTracker({\n            namespace: UUID.uuid4()\n        });\n        this._inputHistoryScope = 'global';\n        super.layout = new PanelLayout();\n        this.addClass(OUTPUT_AREA_CLASS);\n        this.contentFactory =\n            (_a = options.contentFactory) !== null && _a !== void 0 ? _a : OutputArea.defaultContentFactory;\n        this.rendermime = options.rendermime;\n        this._maxNumberOutputs = (_b = options.maxNumberOutputs) !== null && _b !== void 0 ? _b : Infinity;\n        this._translator = (_c = options.translator) !== null && _c !== void 0 ? _c : nullTranslator;\n        this._inputHistoryScope = (_d = options.inputHistoryScope) !== null && _d !== void 0 ? _d : 'global';\n        const model = (this.model = options.model);\n        for (let i = 0; i < Math.min(model.length, this._maxNumberOutputs + 1); i++) {\n            const output = model.get(i);\n            this._insertOutput(i, output);\n        }\n        model.changed.connect(this.onModelChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n        if (options.promptOverlay) {\n            this._addPromptOverlay();\n        }\n    }\n    /**\n     * Narrow the type of OutputArea's layout prop\n     */\n    get layout() {\n        return super.layout;\n    }\n    /**\n     * A read-only sequence of the children widgets in the output area.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * The kernel future associated with the output area.\n     */\n    get future() {\n        return this._future;\n    }\n    set future(value) {\n        // Bail if the model is disposed.\n        if (this.model.isDisposed) {\n            throw Error('Model is disposed');\n        }\n        if (this._future === value) {\n            return;\n        }\n        if (this._future) {\n            this._future.dispose();\n        }\n        this._future = value;\n        this.model.clear();\n        // Make sure there were no input widgets.\n        if (this.widgets.length) {\n            this._clear();\n            this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n        }\n        // Handle published messages.\n        value.onIOPub = this._onIOPub;\n        // Handle the execute reply.\n        value.onReply = this._onExecuteReply;\n        // Handle stdin.\n        value.onStdin = msg => {\n            if (KernelMessage.isInputRequestMsg(msg)) {\n                this.onInputRequest(msg, value);\n            }\n        };\n    }\n    /**\n     * Signal emitted when an output area is requesting an input.\n     */\n    get inputRequested() {\n        return this._inputRequested;\n    }\n    /**\n     * The maximum number of output items to display on top and bottom of cell output.\n     *\n     * ### Notes\n     * It is set to Infinity if no trim is applied.\n     */\n    get maxNumberOutputs() {\n        return this._maxNumberOutputs;\n    }\n    set maxNumberOutputs(limit) {\n        if (limit <= 0) {\n            console.warn(`OutputArea.maxNumberOutputs must be strictly positive.`);\n            return;\n        }\n        const lastShown = this._maxNumberOutputs;\n        this._maxNumberOutputs = limit;\n        if (lastShown < limit) {\n            this._showTrimmedOutputs(lastShown);\n        }\n    }\n    /**\n     * Dispose of the resources used by the output area.\n     */\n    dispose() {\n        if (this._future) {\n            this._future.dispose();\n            this._future = null;\n        }\n        this._displayIdMap.clear();\n        this._outputTracker.dispose();\n        super.dispose();\n    }\n    /**\n     * Follow changes on the model state.\n     */\n    onModelChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                this._insertOutput(args.newIndex, args.newValues[0]);\n                break;\n            case 'remove':\n                if (this.widgets.length) {\n                    // all items removed from model\n                    if (this.model.length === 0) {\n                        this._clear();\n                    }\n                    else {\n                        // range of items removed from model\n                        // remove widgets corresponding to removed model items\n                        const startIndex = args.oldIndex;\n                        for (let i = 0; i < args.oldValues.length && startIndex < this.widgets.length; ++i) {\n                            const widget = this.widgets[startIndex];\n                            widget.parent = null;\n                            widget.dispose();\n                        }\n                        // apply item offset to target model item indices in _displayIdMap\n                        this._moveDisplayIdIndices(startIndex, args.oldValues.length);\n                        // prevent jitter caused by immediate height change\n                        this._preventHeightChangeJitter();\n                    }\n                }\n                break;\n            case 'set':\n                this._setOutput(args.newIndex, args.newValues[0]);\n                break;\n            default:\n                break;\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Emitted when user requests toggling of the output scrolling mode.\n     */\n    get toggleScrolling() {\n        return this._toggleScrolling;\n    }\n    /**\n     * Add overlay allowing to toggle scrolling.\n     */\n    _addPromptOverlay() {\n        const overlay = document.createElement('div');\n        overlay.className = OUTPUT_PROMPT_OVERLAY;\n        const trans = this._translator.load('jupyterlab');\n        overlay.title = trans.__('Toggle output scrolling');\n        overlay.addEventListener('click', () => {\n            this._toggleScrolling.emit();\n        });\n        this.node.appendChild(overlay);\n    }\n    /**\n     * Update indices in _displayIdMap in response to element remove from model items\n     *\n     * @param startIndex - The index of first element removed\n     *\n     * @param count - The number of elements removed from model items\n     *\n     */\n    _moveDisplayIdIndices(startIndex, count) {\n        this._displayIdMap.forEach((indices) => {\n            const rangeEnd = startIndex + count;\n            const numIndices = indices.length;\n            // reverse loop in order to prevent removing element affecting the index\n            for (let i = numIndices - 1; i >= 0; --i) {\n                const index = indices[i];\n                // remove model item indices in removed range\n                if (index >= startIndex && index < rangeEnd) {\n                    indices.splice(i, 1);\n                }\n                else if (index >= rangeEnd) {\n                    // move model item indices that were larger than range end\n                    indices[i] -= count;\n                }\n            }\n        });\n    }\n    /**\n     * Follow changes on the output model state.\n     */\n    onStateChanged(sender, change) {\n        const outputLength = Math.min(this.model.length, this._maxNumberOutputs);\n        if (change) {\n            if (change >= this._maxNumberOutputs) {\n                // Bail early\n                return;\n            }\n            this._setOutput(change, this.model.get(change));\n        }\n        else {\n            for (let i = 0; i < outputLength; i++) {\n                this._setOutput(i, this.model.get(i));\n            }\n        }\n        this.outputLengthChanged.emit(outputLength);\n    }\n    /**\n     * Clear the widget outputs.\n     */\n    _clear() {\n        // Bail if there is no work to do.\n        if (!this.widgets.length) {\n            return;\n        }\n        // Remove all of our widgets.\n        const length = this.widgets.length;\n        for (let i = 0; i < length; i++) {\n            const widget = this.widgets[0];\n            widget.parent = null;\n            widget.dispose();\n        }\n        // Clear the display id map.\n        this._displayIdMap.clear();\n        // prevent jitter caused by immediate height change\n        this._preventHeightChangeJitter();\n    }\n    _preventHeightChangeJitter() {\n        // When an output area is cleared and then quickly replaced with new\n        // content (as happens with @interact in widgets, for example), the\n        // quickly changing height can make the page jitter.\n        // We introduce a small delay in the minimum height\n        // to prevent this jitter.\n        const rect = this.node.getBoundingClientRect();\n        this.node.style.minHeight = `${rect.height}px`;\n        if (this._minHeightTimeout) {\n            window.clearTimeout(this._minHeightTimeout);\n        }\n        this._minHeightTimeout = window.setTimeout(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.node.style.minHeight = '';\n        }, 50);\n    }\n    /**\n     * Handle an input request from a kernel.\n     */\n    onInputRequest(msg, future) {\n        // Add an output widget to the end.\n        const factory = this.contentFactory;\n        const stdinPrompt = msg.content.prompt;\n        const password = msg.content.password;\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        panel.addClass(OUTPUT_AREA_STDIN_ITEM_CLASS);\n        const prompt = factory.createOutputPrompt();\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        const input = factory.createStdin({\n            parent_header: msg.header,\n            prompt: stdinPrompt,\n            password,\n            future,\n            translator: this._translator,\n            inputHistoryScope: this._inputHistoryScope\n        });\n        input.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(input);\n        // Increase number of outputs to display the result up to the input request.\n        if (this.model.length >= this.maxNumberOutputs) {\n            this.maxNumberOutputs = this.model.length;\n        }\n        this.layout.addWidget(panel);\n        this._inputRequested.emit();\n        /**\n         * Wait for the stdin to complete, add it to the model (so it persists)\n         * and remove the stdin widget.\n         */\n        void input.value.then(value => {\n            // Increase number of outputs to display the result of stdin if needed.\n            if (this.model.length >= this.maxNumberOutputs) {\n                this.maxNumberOutputs = this.model.length + 1;\n            }\n            // Use stdin as the stream so it does not get combined with stdout.\n            this.model.add({\n                output_type: 'stream',\n                name: 'stdin',\n                text: value + '\\n'\n            });\n            panel.dispose();\n        });\n    }\n    /**\n     * Update an output in the layout in place.\n     */\n    _setOutput(index, model) {\n        if (index >= this._maxNumberOutputs) {\n            return;\n        }\n        const panel = this.layout.widgets[index];\n        const renderer = (panel.widgets ? panel.widgets[1] : panel);\n        // Check whether it is safe to reuse renderer:\n        // - Preferred mime type has not changed\n        // - Isolation has not changed\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (Private.currentPreferredMimetype.get(renderer) === mimeType &&\n            OutputArea.isIsolated(mimeType, model.metadata) ===\n                renderer instanceof Private.IsolatedRenderer) {\n            void renderer.renderModel(model);\n        }\n        else {\n            this.layout.widgets[index].dispose();\n            this._insertOutput(index, model);\n        }\n    }\n    /**\n     * Render and insert a single output into the layout.\n     *\n     * @param index - The index of the output to be inserted.\n     * @param model - The model of the output to be inserted.\n     */\n    _insertOutput(index, model) {\n        if (index > this._maxNumberOutputs) {\n            return;\n        }\n        const layout = this.layout;\n        if (index === this._maxNumberOutputs) {\n            const warning = new Private.TrimmedOutputs(this._maxNumberOutputs, () => {\n                const lastShown = this._maxNumberOutputs;\n                this._maxNumberOutputs = Infinity;\n                this._showTrimmedOutputs(lastShown);\n            });\n            layout.insertWidget(index, this._wrappedOutput(warning));\n        }\n        else {\n            let output = this.createOutputItem(model);\n            if (output) {\n                output.toggleClass(EXECUTE_CLASS, model.executionCount !== null);\n            }\n            else {\n                output = new Widget();\n            }\n            if (!this._outputTracker.has(output)) {\n                void this._outputTracker.add(output);\n            }\n            layout.insertWidget(index, output);\n        }\n    }\n    /**\n     * A widget tracker for individual output widgets in the output area.\n     */\n    get outputTracker() {\n        return this._outputTracker;\n    }\n    /**\n     * Dispose information message and show output models from the given\n     * index to maxNumberOutputs\n     *\n     * @param lastShown Starting model index to insert.\n     */\n    _showTrimmedOutputs(lastShown) {\n        // Dispose information widget\n        this.widgets[lastShown].dispose();\n        for (let idx = lastShown; idx < this.model.length; idx++) {\n            this._insertOutput(idx, this.model.get(idx));\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Create an output item with a prompt and actual output\n     *\n     * @returns a rendered widget, or null if we cannot render\n     * #### Notes\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        return this._wrappedOutput(output, model.executionCount);\n    }\n    /**\n     * Render a mimetype\n     */\n    createRenderedMimetype(model) {\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (!mimeType) {\n            return null;\n        }\n        let output = this.rendermime.createRenderer(mimeType);\n        const isolated = OutputArea.isIsolated(mimeType, model.metadata);\n        if (isolated === true) {\n            output = new Private.IsolatedRenderer(output);\n        }\n        Private.currentPreferredMimetype.set(output, mimeType);\n        output.renderModel(model).catch(error => {\n            // Manually append error message to output\n            const pre = document.createElement('pre');\n            const trans = this._translator.load('jupyterlab');\n            pre.textContent = trans.__('Javascript Error: %1', error.message);\n            output.node.appendChild(pre);\n            // Remove mime-type-specific CSS classes\n            output.node.className = 'lm-Widget jp-RenderedText';\n            output.node.setAttribute('data-mime-type', 'application/vnd.jupyter.stderr');\n        });\n        return output;\n    }\n    /**\n     * Wrap a output widget within a output panel\n     *\n     * @param output Output widget to wrap\n     * @param executionCount Execution count\n     * @returns The output panel\n     */\n    _wrappedOutput(output, executionCount = null) {\n        const panel = new Private.OutputPanel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        const prompt = this.contentFactory.createOutputPrompt();\n        prompt.executionCount = executionCount;\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n}\nexport class SimplifiedOutputArea extends OutputArea {\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n    /**\n     * Create an output item without a prompt, just the output widgets\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (output) {\n            output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        }\n        return output;\n    }\n}\n/**\n * A namespace for OutputArea statics.\n */\n(function (OutputArea) {\n    /**\n     * Execute code on an output area.\n     */\n    async function execute(code, output, sessionContext, metadata) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        return future.done;\n    }\n    OutputArea.execute = execute;\n    function isIsolated(mimeType, metadata) {\n        const mimeMd = metadata[mimeType];\n        // mime-specific higher priority\n        if (mimeMd && mimeMd['isolated'] !== undefined) {\n            return !!mimeMd['isolated'];\n        }\n        else {\n            // fallback on global\n            return !!metadata['isolated'];\n        }\n    }\n    OutputArea.isIsolated = isIsolated;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    OutputArea.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    OutputArea.defaultContentFactory = new ContentFactory();\n})(OutputArea || (OutputArea = {}));\n/**\n * The default output prompt implementation\n */\nexport class OutputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(OUTPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = '';\n        }\n        else {\n            this.node.textContent = `[${value}]:`;\n        }\n    }\n}\n/**\n * The default stdin widget.\n */\nclass Stdin extends Widget {\n    static _historyIx(key, ix) {\n        const history = Stdin._history.get(key);\n        if (!history) {\n            return undefined;\n        }\n        const len = history.length;\n        // wrap nonpositive ix to nonnegative ix\n        if (ix <= 0) {\n            return len + ix;\n        }\n    }\n    static _historyAt(key, ix) {\n        const history = Stdin._history.get(key);\n        if (!history) {\n            return undefined;\n        }\n        const len = history.length;\n        const ixpos = Stdin._historyIx(key, ix);\n        if (ixpos !== undefined && ixpos < len) {\n            return history[ixpos];\n        }\n        // return undefined if ix is out of bounds\n    }\n    static _historyPush(key, line) {\n        const history = Stdin._history.get(key);\n        history.push(line);\n        if (history.length > 1000) {\n            // truncate line history if it's too long\n            history.shift();\n        }\n    }\n    static _historySearch(key, pat, ix, reverse = true) {\n        const history = Stdin._history.get(key);\n        const len = history.length;\n        const ixpos = Stdin._historyIx(key, ix);\n        const substrFound = (x) => x.search(pat) !== -1;\n        if (ixpos === undefined) {\n            return;\n        }\n        if (reverse) {\n            if (ixpos === 0) {\n                // reverse search fails if already at start of history\n                return;\n            }\n            const ixFound = history.slice(0, ixpos).findLastIndex(substrFound);\n            if (ixFound !== -1) {\n                // wrap ix to negative\n                return ixFound - len;\n            }\n        }\n        else {\n            if (ixpos >= len - 1) {\n                // forward search fails if already at end of history\n                return;\n            }\n            const ixFound = history.slice(ixpos + 1).findIndex(substrFound);\n            if (ixFound !== -1) {\n                // wrap ix to negative and adjust for slice\n                return ixFound - len + ixpos + 1;\n            }\n        }\n    }\n    /**\n     * Construct a new input widget.\n     */\n    constructor(options) {\n        var _a;\n        super({\n            node: Private.createInputWidgetNode(options.prompt, options.password)\n        });\n        this._promise = new PromiseDelegate();\n        this.addClass(STDIN_CLASS);\n        this._future = options.future;\n        this._historyIndex = 0;\n        this._historyKey =\n            options.inputHistoryScope === 'session'\n                ? options.parent_header.session\n                : '';\n        this._historyPat = '';\n        this._parentHeader = options.parent_header;\n        this._password = options.password;\n        this._trans = ((_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator).load('jupyterlab');\n        this._value = options.prompt + ' ';\n        this._input = this.node.getElementsByTagName('input')[0];\n        // make users aware of the line history feature\n        this._input.placeholder = this._trans.__('↑↓ for history. Search history with c-↑/c-↓');\n        // initialize line history\n        if (!Stdin._history.has(this._historyKey)) {\n            Stdin._history.set(this._historyKey, []);\n        }\n    }\n    /**\n     * The value of the widget.\n     */\n    get value() {\n        return this._promise.promise.then(() => this._value);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        const input = this._input;\n        if (event.type === 'keydown') {\n            if (event.key === 'Enter') {\n                this.resetSearch();\n                this._future.sendInputReply({\n                    status: 'ok',\n                    value: input.value\n                }, this._parentHeader);\n                if (this._password) {\n                    this._value += '········';\n                }\n                else {\n                    this._value += input.value;\n                    Stdin._historyPush(this._historyKey, input.value);\n                }\n                this._promise.resolve(void 0);\n            }\n            else if (event.key === 'Escape') {\n                // currently this gets clobbered by the documentsearch:end command at the notebook level\n                this.resetSearch();\n                input.blur();\n            }\n            else if (event.ctrlKey &&\n                (event.key === 'ArrowUp' || event.key === 'ArrowDown')) {\n                // if _historyPat is blank, use input as search pattern. Otherwise, reuse the current search pattern\n                if (this._historyPat === '') {\n                    this._historyPat = input.value;\n                }\n                const reverse = event.key === 'ArrowUp';\n                const searchHistoryIx = Stdin._historySearch(this._historyKey, this._historyPat, this._historyIndex, reverse);\n                if (searchHistoryIx !== undefined) {\n                    const historyLine = Stdin._historyAt(this._historyKey, searchHistoryIx);\n                    if (historyLine !== undefined) {\n                        if (this._historyIndex === 0) {\n                            this._valueCache = input.value;\n                        }\n                        this._setInputValue(historyLine);\n                        this._historyIndex = searchHistoryIx;\n                        // The default action for ArrowUp is moving to first character\n                        // but we want to keep the cursor at the end.\n                        event.preventDefault();\n                    }\n                }\n            }\n            else if (event.key === 'ArrowUp') {\n                this.resetSearch();\n                const historyLine = Stdin._historyAt(this._historyKey, this._historyIndex - 1);\n                if (historyLine) {\n                    if (this._historyIndex === 0) {\n                        this._valueCache = input.value;\n                    }\n                    this._setInputValue(historyLine);\n                    --this._historyIndex;\n                    // The default action for ArrowUp is moving to first character\n                    // but we want to keep the cursor at the end.\n                    event.preventDefault();\n                }\n            }\n            else if (event.key === 'ArrowDown') {\n                this.resetSearch();\n                if (this._historyIndex === 0) {\n                    // do nothing\n                }\n                else if (this._historyIndex === -1) {\n                    this._setInputValue(this._valueCache);\n                    ++this._historyIndex;\n                }\n                else {\n                    const historyLine = Stdin._historyAt(this._historyKey, this._historyIndex + 1);\n                    if (historyLine) {\n                        this._setInputValue(historyLine);\n                        ++this._historyIndex;\n                    }\n                }\n            }\n        }\n    }\n    resetSearch() {\n        this._historyPat = '';\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        this._input.addEventListener('keydown', this);\n        this._input.focus();\n    }\n    /**\n     * Handle `before-detach` messages sent to the widget.\n     */\n    onBeforeDetach(msg) {\n        this._input.removeEventListener('keydown', this);\n    }\n    _setInputValue(value) {\n        this._input.value = value;\n        // Set cursor at the end; this is usually not necessary when input is\n        // focused but having the explicit placement ensures consistency.\n        this._input.setSelectionRange(value.length, value.length);\n    }\n}\nStdin._history = new Map();\nexport { Stdin };\n/** ****************************************************************************\n * Private namespace\n ******************************************************************************/\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for an InputWidget.\n     */\n    function createInputWidgetNode(prompt, password) {\n        const node = document.createElement('div');\n        const promptNode = document.createElement('pre');\n        promptNode.className = STDIN_PROMPT_CLASS;\n        promptNode.textContent = prompt;\n        const input = document.createElement('input');\n        input.className = STDIN_INPUT_CLASS;\n        if (password) {\n            input.type = 'password';\n        }\n        node.appendChild(promptNode);\n        promptNode.appendChild(input);\n        return node;\n    }\n    Private.createInputWidgetNode = createInputWidgetNode;\n    /**\n     * A renderer for IFrame data.\n     */\n    class IsolatedRenderer extends Widget {\n        /**\n         * Create an isolated renderer.\n         */\n        constructor(wrapped) {\n            super({ node: document.createElement('iframe') });\n            this.addClass('jp-mod-isolated');\n            this._wrapped = wrapped;\n            // Once the iframe is loaded, the subarea is dynamically inserted\n            const iframe = this.node;\n            iframe.frameBorder = '0';\n            iframe.scrolling = 'auto';\n            iframe.addEventListener('load', () => {\n                // Workaround needed by Firefox, to properly render svg inside\n                // iframes, see https://stackoverflow.com/questions/10177190/\n                // svg-dynamically-added-to-iframe-does-not-render-correctly\n                iframe.contentDocument.open();\n                // Insert the subarea into the iframe\n                // We must directly write the html. At this point, subarea doesn't\n                // contain any user content.\n                iframe.contentDocument.write(this._wrapped.node.innerHTML);\n                iframe.contentDocument.close();\n                const body = iframe.contentDocument.body;\n                // Adjust the iframe height automatically\n                iframe.style.height = `${body.scrollHeight}px`;\n                iframe.heightChangeObserver = new ResizeObserver(() => {\n                    iframe.style.height = `${body.scrollHeight}px`;\n                });\n                iframe.heightChangeObserver.observe(body);\n            });\n        }\n        /**\n         * Render a mime model.\n         *\n         * @param model - The mime model to render.\n         *\n         * @returns A promise which resolves when rendering is complete.\n         *\n         * #### Notes\n         * This method may be called multiple times during the lifetime\n         * of the widget to update it if and when new data is available.\n         */\n        renderModel(model) {\n            return this._wrapped.renderModel(model);\n        }\n    }\n    Private.IsolatedRenderer = IsolatedRenderer;\n    Private.currentPreferredMimetype = new AttachedProperty({\n        name: 'preferredMimetype',\n        create: owner => ''\n    });\n    /**\n     * A `Panel` that's focused by a `contextmenu` event.\n     */\n    class OutputPanel extends Panel {\n        /**\n         * Construct a new `OutputPanel` widget.\n         */\n        constructor(options) {\n            super(options);\n        }\n        /**\n         * A callback that focuses on the widget.\n         */\n        _onContext(_) {\n            this.node.focus();\n        }\n        /**\n         * Handle `after-attach` messages sent to the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('contextmenu', this._onContext.bind(this));\n        }\n        /**\n         * Handle `before-detach` messages sent to the widget.\n         */\n        onBeforeDetach(msg) {\n            super.onAfterDetach(msg);\n            this.node.removeEventListener('contextmenu', this._onContext.bind(this));\n        }\n    }\n    Private.OutputPanel = OutputPanel;\n    /**\n     * Trimmed outputs information widget.\n     */\n    class TrimmedOutputs extends Widget {\n        /**\n         * Widget constructor\n         *\n         * ### Notes\n         * The widget will be disposed on click after calling the callback.\n         *\n         * @param maxNumberOutputs Maximal number of outputs to display\n         * @param _onClick Callback on click event on the widget\n         */\n        constructor(maxNumberOutputs, onClick) {\n            const node = document.createElement('div');\n            const title = `The first ${maxNumberOutputs} are displayed`;\n            const msg = 'Show more outputs';\n            node.insertAdjacentHTML('afterbegin', `<a title=${title}>\n          <pre>${msg}</pre>\n        </a>`);\n            super({\n                node\n            });\n            this._onClick = onClick;\n            this.addClass('jp-TrimmedOutputs');\n            this.addClass('jp-RenderedHTMLCommon');\n        }\n        /**\n         * Handle the DOM events for widget.\n         *\n         * @param event - The DOM event sent to the widget.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the widget's DOM node. It should\n         * not be called directly by user code.\n         */\n        handleEvent(event) {\n            if (event.type === 'click') {\n                this._onClick(event);\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('click', this);\n        }\n        /**\n         * A message handler invoked on a `'before-detach'`\n         * message\n         */\n        onBeforeDetach(msg) {\n            super.onBeforeDetach(msg);\n            this.node.removeEventListener('click', this);\n        }\n    }\n    Private.TrimmedOutputs = TrimmedOutputs;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"names":["Private","OutputAreaModel","constructor","options","this","clearNext","_lastStream","_trusted","_isDisposed","_stateChanged","Signal","_changed","trusted","contentFactory","defaultContentFactory","list","ObservableList","values","value","index","_add","get","changed","connect","_onGenericChange","_onListChanged","stateChanged","length","i","oldItem","toJSON","item","_createItem","set","dispose","isDisposed","clearData","JSONExt","deepCopy","normalize","add","output","clear","wait","fromJSON","Array","from","map","name","_lastName","shouldCombine","lastModel","text","removeOverwrittenChars","prev","push","createOutputModel","sender","args","type","newValues","forEach","oldValues","disconnect","emit","itemModel","idx","ContentFactory","OutputModel","isArray","join","txt","replace","search","base","match","insert","slice","fixCarriageReturn","tmp","fixBackspace","OUTPUT_AREA_ITEM_CLASS","OUTPUT_AREA_OUTPUT_CLASS","OUTPUT_AREA_PROMPT_CLASS","OutputArea","Widget","_a","_b","_c","_d","super","outputLengthChanged","_onIOPub","msg","model","msgType","header","msg_type","displayId","content","transient","targets","output_type","_displayIdMap","_onExecuteReply","status","payload","pages","filter","source","data","JSON","parse","stringify","metadata","Map","_minHeightTimeout","_inputRequested","_toggleScrolling","_outputTracker","WidgetTracker","namespace","UUID","uuid4","_inputHistoryScope","layout","PanelLayout","addClass","rendermime","_maxNumberOutputs","maxNumberOutputs","Infinity","_translator","translator","nullTranslator","inputHistoryScope","Math","min","_insertOutput","onModelChanged","onStateChanged","promptOverlay","_addPromptOverlay","widgets","future","_future","Error","_clear","onIOPub","onReply","onStdin","KernelMessage","isInputRequestMsg","onInputRequest","inputRequested","limit","console","warn","lastShown","_showTrimmedOutputs","newIndex","startIndex","oldIndex","widget","parent","_moveDisplayIdIndices","_preventHeightChangeJitter","_setOutput","toggleScrolling","overlay","document","createElement","className","trans","load","title","__","addEventListener","node","appendChild","count","indices","rangeEnd","splice","change","outputLength","rect","getBoundingClientRect","style","minHeight","height","window","clearTimeout","setTimeout","factory","stdinPrompt","prompt","password","panel","Panel","createOutputPrompt","addWidget","input","createStdin","parent_header","then","renderer","mimeType","preferredMimeType","currentPreferredMimetype","isIsolated","IsolatedRenderer","renderModel","warning","TrimmedOutputs","insertWidget","_wrappedOutput","createOutputItem","toggleClass","executionCount","has","outputTracker","createRenderedMimetype","createRenderer","catch","error","pre","textContent","message","setAttribute","OutputPanel","SimplifiedOutputArea","execute","async","code","sessionContext","stopOnError","tags","indexOf","stop_on_error","kernel","session","requestExecute","done","mimeMd","undefined","OutputPrompt","Stdin","_executionCount","_historyIx","key","ix","history","_history","len","_historyAt","ixpos","_historyPush","line","shift","_historySearch","pat","reverse","substrFound","x","ixFound","findLastIndex","findIndex","createInputWidgetNode","_promise","PromiseDelegate","_historyIndex","_historyKey","_historyPat","_parentHeader","_password","_trans","_value","_input","getElementsByTagName","placeholder","promise","handleEvent","event","resetSearch","sendInputReply","resolve","blur","ctrlKey","historyLine","_valueCache","_setInputValue","preventDefault","searchHistoryIx","onAfterAttach","focus","onBeforeDetach","removeEventListener","setSelectionRange","promptNode","wrapped","_wrapped","iframe","frameBorder","scrolling","contentDocument","open","write","innerHTML","close","body","scrollHeight","heightChangeObserver","ResizeObserver","observe","AttachedProperty","create","owner","_onContext","_","bind","onAfterDetach","onClick","insertAdjacentHTML","_onClick"],"sourceRoot":""}