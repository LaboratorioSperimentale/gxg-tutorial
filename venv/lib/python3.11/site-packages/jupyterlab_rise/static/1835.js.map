{"version":3,"file":"1835.bundle.js","mappings":"wRAsBIA,E,+IACJ,SAAWA,GACPA,EAAWC,MAAQ,mBACnBD,EAAWE,WAAa,yBACxBF,EAAWG,YAAc,0BACzBH,EAAWI,KAAO,kBAClBJ,EAAWK,eAAiB,8BAC5BL,EAAWM,OAAS,oBACpBN,EAAWO,OAAS,oBACpBP,EAAWQ,IAAM,oBACjBR,EAAWS,UAAY,uBACvBT,EAAWU,kBAAoB,gCAC/BV,EAAWW,KAAO,kBAClBX,EAAWY,QAAU,sBACrBZ,EAAWa,OAAS,qBACpBb,EAAWc,SAAW,sBACtBd,EAAWe,eAAiB,6BAC5Bf,EAAWgB,kBAAoB,iCAClC,CAjBD,CAiBGhB,IAAeA,EAAa,CAAC,IAIhC,MAAMiB,EAAqB,0CAKrBC,EAAe,CACjBC,GAAI,0CACJC,YAAa,8BACbC,WAAW,EACXC,SAAU,EAAAC,sBACVC,SAAWC,IACP,MAAM,MAAEC,GAAUD,EAClB,OAAO,IAAI,MACP,WAAAE,GACIC,KAAKC,QAAU,IAAI,EAAAC,OAAOF,KAC9B,CACA,IAAAxB,CAAK2B,EAAQC,GACJD,EAAOZ,KACRY,EAAOZ,GAAK,uBAAsBc,EAAQd,IAE9CY,EAAOG,MAAMC,QAAU,CACnBC,KAAM,oBACHL,EAAOG,MAAMC,SAEfJ,EAAOM,YACRX,EAAMY,IAAIP,EAAQ,OAAQC,GAAW,CAAC,GAE1CN,EAAMa,aAAaR,EAAOZ,IAC1BS,KAAKC,QAAQW,KAAKT,EACtB,CACA,UAAIU,GACA,OAAOb,KAAKC,OAChB,EACA,GAMNa,EAAiB,CACnBvB,GAAI,4CACJC,YAAa,qDACbC,WAAW,EACXsB,SAAU,CAAC,EAAAC,iBAAkB,EAAArB,uBAC7BsB,SAAU,CAAC,EAAAC,YACXtB,SAAU,CAACC,EAAKsB,EAAYC,EAAcC,KACtC,MAAMC,EAAW,IAAIC,QACrBH,EAAaP,OAAOW,SAAQ,CAACC,EAAGtB,KAE5B,MAAMuB,EAAUP,EAAWQ,iBAAiBxB,GACxCuB,IAAYJ,EAASM,IAAIF,KACrBL,GA+xBpB,SAAuBA,EAAQK,GAC3B,IAAIG,EAAa,KACjB,MAAMC,EAAiB,CAACC,EAAQC,KACV,UAAdA,EAAKC,QACiB,IAAlBD,EAAKE,SACAL,IACDA,EAAaR,EAAOc,YAGnBN,IACLA,EAAWO,UACXP,EAAa,MAErB,EAECH,EAAQW,MAAMC,MAAK,KACpBZ,EAAQa,MAAMC,aAAahB,QAAQM,GAC/BJ,EAAQa,MAAME,QACdZ,EAAaR,EAAOc,WACxB,IAEJT,EAAQgB,SAASlB,SAAQ,KACjBK,GACAA,EAAWO,SACf,GAER,CAxzBoBO,CAActB,EAAQK,GAE1BJ,EAASZ,IAAIgB,GACjB,GACF,GAMJkB,EAAU,CACZrD,GAAI,2CACJC,YAAa,iCACbE,SAAU,EAAAsB,iBACVD,SAAU,CAAC,EAAApB,uBACXsB,SAAU,CAAC,EAAA4B,YAAa,EAAA3B,WAAY,EAAA4B,uBAAwB,EAAAC,WAAWC,OACvEpD,SAAU,CAACC,EAAKuB,EAAc6B,EAAa5B,EAAQ6B,EAAiBC,KAChE,IAAIC,EACJ,MAAQC,eAAgBT,EAASU,YAAaC,GAAa1D,EACrD2D,EAAaP,QAAiDA,EAAc,EAAAQ,eAC5EC,EAAiBR,QAAyDA,EAAkB,IAAI,EAAAS,sBAAsB,CAAEH,eACxHI,EAAO/D,EAAIgE,SAASvB,MAAK,KAAY,IAgB3C,OAfmB,IAAI,EAAAwB,gBAAgB,CACnCP,WACAX,UACAmB,OAAQ3C,EACRwC,OACAI,QAAyD,QAA/CZ,EAAM/B,GAAU,KAAOA,EAAO2C,kBAAgC,IAAPZ,EAAgBA,OAAKa,EACtFP,iBACAF,WAAYA,QAA+CA,EAAa,EAAAC,eACxES,oBAAqB,KACbf,GACOA,EAAKgB,aAKP,GAMnBC,EAAmB,CACrB7E,GAAIF,EACJG,YAAa,sDACbC,WAAW,EACXsB,SAAU,CAAC,EAAAC,iBAAkB,EAAArB,sBAAuB,EAAA0E,kBACpDpD,SAAU,CAAC,EAAA4B,YAAa,EAAAyB,gBAAiB,EAAAC,WACzC3E,SAAU,CAACC,EAAKsB,EAAYC,EAAcoD,EAAiBhB,EAAYiB,EAASC,KAE5E,MAAMC,GADNnB,EAAaA,QAA+CA,EAAa,EAAAC,gBAChDmB,KAAK,cACxBrB,EAAW1D,EAAIyD,aAiT7B,SAAqBzD,EAAKsB,EAAYC,EAAcoD,EAAiBhB,EAAYkB,EAAUD,GACvF,MAAME,EAAQnB,EAAWoB,KAAK,eACxB,SAAEC,EAAQ,MAAE/E,GAAUD,EACtBiF,EAAWH,EAAMI,GAAG,mBACpBC,EAAY,KACd,MAAM,cAAEC,GAAkBnF,EAC1B,SAAUmF,IAAiB9D,EAAWQ,iBAAiBsD,GAAe,EAYtEP,GAwTR,SAAwB7E,EAAKsB,EAAYuD,EAAUtD,EAAcoC,GAC7D,MAAMmB,EAAQnB,EAAWoB,KAAK,eACxB,SAAEC,GAAahF,EAEfqF,EAAoB,KACtB,IAAI9B,EACJ,MAAM+B,EAAS,qBAETC,EAAOvF,EAAIwF,oBADHD,IAAW,IAAIhC,EAAI,SAAmC,QAAxBA,EAAKgC,EAAY,aAAsB,IAAPhC,OAAgB,EAASA,EAAGkC,MAAMH,GAAQ,IAEhHI,EAAYH,aAAmC,EAASA,EAAY,MAAEE,MAAMH,GAClF,OAA4E,QAAnE/B,EAAMmC,GAAapE,EAAWqE,WAAWD,EAAU,GAAI,aAA2B,IAAPnC,EAAgBA,EAEpGsB,EAASO,aAAc,EAGrBD,EAAY,KACd,MAAM,cAAEC,GAAkBP,EAC1B,SAAUO,IAAiB9D,EAAWQ,iBAAiBsD,GAAe,EAE1EJ,EAASY,WAAWrH,EAAWC,MAAO,CAClCqH,MAAO,IAAMf,EAAMI,GAAG,kBAAmBY,EAAST,IAAqB/D,IACvE6D,YACAY,QAAS5D,IACL,MAAM7B,EAAS+E,IACT9E,EAAU4B,EAAc,SAAK,CAC/B6D,KAAM,eAEV,IAAK1F,EACD,OAGJ,MAAM2F,EAAQ3E,EAAW4E,YAAY5F,GACjC2F,GACA1E,EAAa5C,KAAKsH,EAAO1F,EAC7B,IAGRyE,EAASY,WAAWrH,EAAWO,OAAQ,CACnC+G,MAAO,KACH,IAAIM,EAAIL,EAAST,IAAqB/D,GAItC,OAHI6E,IACAA,EAAI,IAAMA,GAEPrB,EAAMI,GAAG,YAAaiB,EAAE,EAEnChB,YACAY,QAAS,KAEL,GAAIZ,IAAa,CACb,MAAMtD,EAAUP,EAAWQ,iBAAiBuD,KAC5C,OAAO,IAAAe,cAAa9E,EAAYO,EACpC,KAGRmD,EAASY,WAAWrH,EAAWS,UAAW,CACtC6G,MAAO,IAAMf,EAAMI,GAAG,eAAgBY,EAAST,IAAqB/D,IACpE6D,YACAY,QAAS,KACL,GAAIZ,IAAa,CACb,MAAMtD,EAAUP,EAAWQ,iBAAiBuD,KAC5C,IAAKxD,EACD,OAEJ,OAAOP,EAAWtC,UAAU6C,EAAQwE,KACxC,KAGRrB,EAASY,WAAWrH,EAAWQ,IAAK,CAChC8G,MAAO,IAAMf,EAAMI,GAAG,YAAaY,EAAST,IAAqB/D,IACjE6D,YACAY,QAASO,UAEL,GAAInB,IAAa,CACb,MAAMtD,EAAUP,EAAWQ,iBAAiBuD,KAC5C,IAAKxD,EACD,cAEiB,IAAA0E,YAAW,CAC5B9F,MAAOqE,EAAMI,GAAG,UAChBsB,KAAM1B,EAAMI,GAAG,qCAAsCrD,EAAQwE,MAC7DI,QAAS,CACL,EAAAC,OAAOC,eACP,EAAAD,OAAOE,WAAW,CAAEf,MAAOf,EAAMI,GAAG,gBAGjC2B,OAAOC,cACR9G,EAAIgF,SAASe,QAAQ,yBAA0B,CACjDM,KAAMxE,EAAQwE,MAG1B,KAGRrB,EAASY,WAAWrH,EAAWgB,kBAAmB,CAC9CsG,MAAO,IAAMf,EAAMI,GAAG,wBACtBC,YACAY,QAASO,UACL,MAAMhG,EAAS+E,IACTxD,EAAUvB,GAAUgB,EAAWQ,iBAAiBxB,GACjDuB,UAICmD,EAASe,QAAQ,uBAAwB,CAAEM,KAAMxE,EAAQwE,aACzDrB,EAASe,QAAQ,yBAA0B,CAAEM,KAAMxE,EAAQwE,OAAO,GAGpF,CAlaQU,CAAe/G,EAAKsB,EAAYuD,EAAUtD,EAAcoC,GAE5DqB,EAASY,WAAWrH,EAAWE,WAAY,CACvCoH,MAAO,IAAM,UAAUC,EAAS7F,EAAMmF,cAAe9D,KACrDyE,QAAS5D,IACL,MAAMkE,OAA+B,IAAjBlE,EAAW,KAAoB,GAAKA,EAAW,KACnE,IAAKkE,EAAM,CACP,MAAMW,EAAUzI,EAAWE,WAC3B,MAAM,IAAIwI,MAAM,oCAAoCD,KACxD,CACA,OAAO1F,EAAW7C,WAAW4H,EAAK,IAG1CrB,EAASY,WAAWrH,EAAWG,YAAa,CACxCqH,QAAS5D,IACL,MAAM+E,EAAa/E,EAAY,OAAK2C,EAAMI,GAAG,SACvCmB,OAA+B,IAAjBlE,EAAW,KAAoB,GAAKA,EAAW,KAC7D5B,EAAU,CACZI,KAAMwB,EAAW,KACjBkE,QAKJ,MAHqB,SAAjBlE,EAAW,OACX5B,EAAQ4G,IAAMhF,EAAU,KAAK,QAE1Bb,EAAW8F,SAASC,SACtB3I,YAAY6B,GACZ+G,OAAMC,IAAS,IAAAC,kBAAiBN,EAAYK,IAAO,EAE5D1B,MAAO1D,GAAQA,EAAY,OAAK,OAAOA,EAAW,SAEtD6C,EAASY,WAAWrH,EAAWI,KAAM,CACjCoH,QAAS5D,IACL,MAAMkE,OAA+B,IAAjBlE,EAAW,KAAoB,GAAKA,EAAW,KAC7DsF,EAAUtF,EAAc,cAAK,EAC7BuF,EAASvF,aAAmC,EAASA,EAAKuF,OAC1DnH,EAAU4B,EAAc,cAAK,EACnC,OAAOb,EAAW8F,SAASC,SACtBM,IAAItB,EAAM,CAAEuB,SAAS,IACrBnF,MAAK,IAAMnB,EAAWuG,aAAaxB,EAAMoB,EAASC,EAAQnH,IAAS,EAE5EuH,UAAW3F,GAAQA,EAAW,MAAK,GACnC0D,MAAO1D,IACH,IAAIoB,EACJ,OAAsD,QAA7CA,EAAMpB,EAAY,OAAKA,EAAc,eAAuB,IAAPoB,EAAgBA,EAAKuB,EAAMI,GAAG,4BAA6B,EAE7H6C,SAAU5F,GAAQA,EAAe,WAAM,IAE3C6C,EAASY,WAAWrH,EAAWM,OAAQ,CACnCgH,MAAO,IAAMf,EAAMI,GAAG,sBAAuBY,EAAS7F,EAAMmF,cAAe9D,IAC3E0G,QAASlD,EAAMI,GAAG,6BAClBC,YACAY,QAAS,KAEL,IAAKZ,IACD,OAEJ,MAAMtD,EAAUP,EAAWQ,iBAAiB7B,EAAMmF,eAC5CzE,EAAOmF,EAAS7F,EAAMmF,cAAe9D,GAC3C,OAAKO,EAODA,EAAQa,MAAME,OACP,IAAA2D,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,sBAAuBvE,GACvC6F,KAAM1B,EAAMI,GAAG,wDAAyDvE,GACxE8F,QAAS,CACL,EAAAC,OAAOC,eACP,EAAAD,OAAOE,WAAW,CAAEf,MAAOf,EAAMI,GAAG,eAEzCzC,MAAKwF,IACJ,GAAIA,EAAOpB,OAAOC,SAAWjF,EAAQqG,WACjC,OAAOrG,EAAQsG,QACnB,IAICtG,EAAQqG,gBAAb,EACWrG,EAAQsG,UAtBZ,IAAA5B,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,iBAChBsB,KAAM1B,EAAMI,GAAG,wCACfuB,QAAS,CAAC,EAAAC,OAAO0B,aAqBzB,IAGRpD,EAASY,WAAWrH,EAAWU,kBAAmB,CAC9C4G,MAAO,IAAMf,EAAMI,GAAG,2BAA4BY,EAAS7F,EAAMmF,cAAe9D,IAChF0G,QAASlD,EAAMI,GAAG,0CAClBC,YACAY,QAAS,KAEL,IAAKZ,IACD,OAEJ,MAAMtD,EAAUP,EAAWQ,iBAAiB7B,EAAMmF,eAClD,OAAKvD,EAOEA,EAAQwG,kBAAkB5F,MAAK6D,MAAOgC,IACzC,MAAM3H,EAAOmF,EAAS7F,EAAMmF,cAAe9D,GAC3C,GAAIgH,EAAYC,OAAS,EAErB,kBADM,IAAAf,kBAAiB1C,EAAMI,GAAG,kBAAmBJ,EAAMI,GAAG,4CAA6CvE,IAG7G,MAAM6H,EAA0C,IAAvBF,EAAYC,OAC/BD,EAAY,SACN9H,EAAQiI,oBAAoBH,EAAYI,UAAW5D,GAC/D,OAAK0D,GAGE,IAAAjC,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,0BAA2BvE,GAC3C6F,KAAM,IAAImC,EAAoBH,EAAkB1D,EAAOnE,GACvD8F,QAAS,CACL,EAAAC,OAAOC,eACP,EAAAD,OAAOE,WAAW,CACdf,MAAOf,EAAMI,GAAG,UAChB0D,UAAW9D,EAAMI,GAAG,6BAG7BzC,MAAKwF,IACJ,IAAIpG,EAAQqG,WAGZ,OAAID,EAAOpB,OAAOC,OACVjF,EAAQa,MAAMmG,SACPhH,EAAQsG,SAEZtG,EACF5C,kBAAkBuJ,EAAiB9I,IACnC+C,MAAK,IAAMZ,EAAQsG,gBAN5B,CAOA,SAxBJ,CAyBE,KAxCK,IAAA5B,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,iBAChBsB,KAAM1B,EAAMI,GAAG,wCACfuB,QAAS,CAAC,EAAAC,OAAO0B,aAsCvB,IAGV,MASMU,EAAiB,IAAIpH,QAC3BsD,EAASY,WAAWrH,EAAWW,KAAM,CACjC2G,MAAO,IAAMf,EAAMI,GAAG,UAAWY,EAAS7F,EAAMmF,cAAe9D,IAC/D0G,QAZY,KACZ,GAAI/H,EAAMmF,cAAe,CACrB,MAAMvD,EAAUP,EAAWQ,iBAAiB7B,EAAMmF,eAClD,GAAIvD,aAAyC,EAASA,EAAQa,MAAMqG,cAChE,OAAOjE,EAAMI,GAAG,gFAExB,CACA,OAAOJ,EAAMI,GAAG,6BAA6B,EAM7C8D,KAAM7G,GAASA,EAAK8G,QAAU,EAAAC,cAAW9E,EACzCe,UAtKe,KACf,IAAI5B,EACJ,MAAM,cAAE6B,GAAkBnF,EAC1B,IAAKmF,EACD,OAAO,EAEX,MAAMvD,EAAUP,EAAWQ,iBAAiBsD,GAC5C,SAA6F,QAAlF7B,EAAK1B,aAAyC,EAASA,EAAQsH,qBAAkC,IAAP5F,OAAgB,EAASA,EAAG6F,SAAS,EAgK1IrD,QAASO,UACL,IAAI/C,EAAI8F,EAAIC,EAEZ,GAAInE,IAAa,CACb,MAAM7E,EAASL,EAAMmF,cACfvD,EAAUP,EAAWQ,iBAAiBxB,GAC5C,IAAKuB,EACD,OAAO,IAAA0E,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,eAChBsB,KAAM1B,EAAMI,GAAG,wCACfuB,QAAS,CAAC,EAAAC,OAAO0B,cAGpB,CACD,GAAIU,EAAe/G,IAAIF,GACnB,OAEJ,GAAIA,EAAQa,MAAMmG,SACd,OAAO,IAAAtC,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,eAChBsB,KAAM1B,EAAMI,GAAG,yBACfuB,QAAS,CAAC,EAAAC,OAAO0B,cAGzBU,EAAejI,IAAIgB,GACnB,MAAM0H,EAAU,EAAAC,QAAQC,SAA8F,QAApFJ,EAAsC,QAAhC9F,EAAK1B,EAAQsH,qBAAkC,IAAP5F,OAAgB,EAASA,EAAG8C,YAAyB,IAAPgD,EAAgBA,EAAK,IACnJ,IAAIK,EAAUH,EACd,GAAIjI,EAAWqI,2BACW,IAAtBrJ,EAAOsJ,WAAqB,CAC5B,MAAM3B,QAAe,EAAA4B,YAAYC,QAAQ,CACrCrJ,MAAOqE,EAAMI,GAAG,eAChB6E,QAASjF,EAAMI,GAAG,UAClB8E,YAAalF,EAAMI,GAAG,aACtB+E,KAAMV,EACNW,eAAgBX,EAAQhB,OAAS,EAAAiB,QAAQW,QAAQZ,GAAShB,OAC1D6B,SAAU,CACNvE,MAAOf,EAAMI,GAAG,wBAChB8C,QAASlD,EAAMI,GAAG,0FAG1B,GAAI+C,EAAOpB,OAAOC,SACd4C,EAAkC,QAAvBJ,EAAKrB,EAAOoC,aAA0B,IAAPf,EAAgBA,EAAKC,EAC/DjJ,EAAOsJ,YAAa,EACY,kBAArB3B,EAAOqC,WAAyB,CACvC,MAAMC,SAAwB5F,EAAgBgD,IAAInI,EAAoB,6BAA6BgL,UAC/FvC,EAAOqC,YAAcC,GACrB5F,EACK8F,IAAIjL,EAAoB,4BAA6ByI,EAAOqC,WAC5DhD,OAAMoD,IACPC,QAAQpD,MAAM,2CAA2CmD,IAAS,GAG9E,CAER,CACA,IAEI,SADM7I,EAAQ3C,SACRoB,aAAuC,EAASA,EAAO4H,YACzD,OAAOrG,EAAQ+I,kBAEvB,CACA,MAAOC,GAEH,GAAiB,qBAAbA,EAAIzI,KACJ,OAEJ,MAAMyI,CACV,CACA,QACI/B,EAAegC,OAAOjJ,GAClB6H,IAAYH,SACN1H,EAAQ/C,OAAO4K,EAE7B,CACJ,CACJ,KAGR1E,EAASY,WAAWrH,EAAWY,QAAS,CACpC0G,MAAO,IAAMf,EAAMI,GAAG,YACtB8C,QAASlD,EAAMI,GAAG,2BAClBC,UAAW,KACA,IAAA4F,MAAK9K,EAAM+K,QAAQ,SAASC,IAAO,IAAI1H,EAAI8F,EAAIC,EAAI,OAAsK,QAA9JA,EAA4G,QAAtGD,EAA+C,QAAzC9F,EAAKjC,EAAWQ,iBAAiBmJ,UAAuB,IAAP1H,OAAgB,EAASA,EAAG4F,qBAAkC,IAAPE,OAAgB,EAASA,EAAGD,gBAA6B,IAAPE,GAAgBA,CAAU,IAEtQvD,QAAS,KACL,MAAMmF,EAAW,GACXC,EAAQ,IAAIC,IAClB,IAAK,MAAM9K,KAAUL,EAAM+K,QAAQ,QAAS,CACxC,MAAMnJ,EAAUP,EAAWQ,iBAAiBxB,IACxCuB,GAAYA,EAAQa,MAAMmG,UAAasC,EAAMpJ,IAAIF,EAAQwE,QACzD8E,EAAMtK,IAAIgB,EAAQwE,MAClB6E,EAASG,KAAKxJ,EAAQ3C,QAE9B,CACA,OAAOoM,QAAQC,IAAIL,EAAS,IAGpClG,EAASY,WAAWrH,EAAWa,OAAQ,CACnCyG,MAAO,IAAMf,EAAMI,GAAG,cAAeY,EAAS7F,EAAMmF,cAAe9D,IACnE0G,QAASlD,EAAMI,GAAG,sBAClBC,YACAY,QAAS,KAEL,GAAIZ,IAAa,CACb,MAAMtD,EAAUP,EAAWQ,iBAAiB7B,EAAMmF,eAClD,IAAKvD,EACD,OAAO,IAAA0E,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,eAChBsB,KAAM1B,EAAMI,GAAG,wCACfuB,QAAS,CAAC,EAAAC,OAAO0B,cAGzB,MAAMoD,EAAW,CAACtJ,EAAQC,KACJ,SAAdA,EAAKxB,MACLwB,EAAKE,UACLF,EAAKE,SAASgE,OAASxE,EAAQwE,OAC1B/E,EAAWmK,UAAU5J,EAAQwE,MAC7BrB,EAASe,QAAQxH,EAAWI,KAAM,CACnC0H,KAAMlE,EAAKE,SAASgE,OAE5B,EAEJ/E,EAAW8F,SAASC,SAASqE,YAAY/J,QAAQ6J,GACjD3J,EACKzC,SACAuM,SAAQ,IAAMrK,EAAW8F,SAASC,SAASqE,YAAYE,WAAWJ,IAC3E,KAGRxG,EAASY,WAAWrH,EAAWe,eAAgB,CAC3CuG,MAAOf,EAAMI,GAAG,sBAChB2G,UAAW,IAAMvK,EAAWwK,SAC5B/F,QAAS,KACL,MAAMsE,GAAS/I,EAAWwK,SACpBC,EAAM,WACZ,OAAOpH,EACF8F,IAAIjL,EAAoBuM,EAAK1B,GAC7B/C,OAAOoD,IACRC,QAAQpD,MAAM,iBAAiB/H,KAAsBuM,OAASrB,EAAOsB,UAAU,GACjF,IAGNpH,GACA,CACIrG,EAAWM,OACXN,EAAWU,kBACXV,EAAWW,KACXX,EAAWa,OACXb,EAAWe,eACXf,EAAWS,WACbiN,SAAQjF,IACNpC,EAAQsH,QAAQ,CAAElF,UAAS/B,YAAW,GAGlD,CAxnBQkH,CAAYnM,EAAKsB,EAAYC,EAAcoD,EAAiBhB,EAAYkB,EAAUD,GAElF,MAAMwH,EAAqBC,IAEvB,MAAMP,EAAWO,EAAS1E,IAAI,YAAY6C,UAC1ClJ,EAAWwK,UACM,IAAbA,IAAkC,IAAbA,GAAqBA,EAC9C9L,EAAIgF,SAASsH,qBAAqB/N,EAAWe,gBAC7C,MAAMiN,EAAyBF,EAAS1E,IAAI,0BACvC6C,UACLlJ,EAAWiL,uBAAyBA,SAAuEA,EAE3G,MAAMC,EAAmBH,EAAS1E,IAAI,oBAAoB6C,UAC1DlJ,EAAWkL,iBAAmBA,GAAoB,IAElD,MAAMC,EAA0BJ,EAAS1E,IAAI,2BACxC6C,UACLlJ,EAAWmL,wBAA0BA,GAA2B,IAChE,MAAMC,EAAqBL,EAAS1E,IAAI,4BACnC6C,UACLlJ,EAAWqI,yBAA2B+C,SAA+DA,EAErG,MAAMC,EAAiBN,EAAS1E,IAAI,kBAAkB6C,UAChDoC,EAAY,CAAC,EAEnBC,OAAOC,KAAKH,GAAgBV,SAAQc,IAC3BrJ,EAASsJ,YAAYD,IAIrBrJ,EAASuJ,iBAAiBN,EAAeI,KAC1CpC,QAAQuC,KAAK,mBAAmBP,EAAeI,gBAEnDH,EAAUG,GAAMJ,EAAeI,IAN3BpC,QAAQuC,KAAK,aAAaH,cAMI,IAItC,IAAK,MAAMA,KAAMrJ,EAASyJ,YACtB,IACIzJ,EAAS0J,wBAAwBL,EAAG3K,KAAMwK,EAAUG,EAAG3K,MAC3D,CACA,MAAOmB,GACHoH,QAAQuC,KAAK,gCAAgCN,EAAUG,EAAG3K,uBAAuB2K,EAAG3K,OACxF,CACJ,EAGJkJ,QAAQC,IAAI,CAAC5G,EAAgBI,KAAKvF,GAAqBQ,EAAIgE,WACtDvB,MAAK,EAAE4J,MACRA,EAASgB,QAAQ1L,QAAQyK,GACzBA,EAAkBC,GAelB/K,EAAWqB,aAAahB,SAdD,CAACO,EAAQoL,KACxB,CACA,WACA,mBACA,yBACA,0BACA,4BACFC,SAASD,EAAOlL,OACdiK,EAAS1E,IAAI2F,EAAOlL,MAAMoI,YAAc8C,EAAOjL,UAC/CgK,EAAS5B,IAAI6C,EAAOlL,KAAMkL,EAAOjL,UAAUiF,OAAMoD,IAC7CC,QAAQpD,MAAM,8BAA8B+F,EAAOlL,WAAWsI,IAAS,GAE/E,GAE2C,IAE9CpD,OAAOoD,IACRC,QAAQpD,MAAMmD,EAAOsB,QAAQ,IAMjCrH,EAAgB6I,UAAUhO,EAAoB,CAC1CiO,MAAOC,IAEH,MAAMP,EAAYQ,MAAMC,KAAKlK,EAASyJ,aACjCU,KAAId,GAAMA,EAAG3K,OACb0L,KAAK,UAEJC,EAAYJ,MAAMC,KAAKlK,EAASsK,mBACjCH,KAAII,GAAKA,EAAE7L,OACX0L,KAAK,UAEJnO,EAAcmF,EAAMI,GAAG,qXAcxC6I,EAAWZ,GACMe,EAAS,EAAAC,QAAQC,SAASV,EAAOQ,QAEvC,OADAA,EAAOG,WAAW1B,eAAehN,YAAcA,EACxC,IAAK+N,EAAQQ,SAAQ,IAKpCxK,EAAS2J,QAAQ1L,SAAQ,IAAMgD,EAAgBI,KAAKvF,GAAoB,IAAM,GAMzE8O,EAAqB,CAC9B5O,GAAI,iDACJC,YAAa,kCACbC,WAAW,EACXsB,SAAU,CAAC,EAAAC,iBAAkB,EAAAuD,WAC7BtD,SAAU,CAAC,EAAA4B,YAAa,EAAAuL,YACxBxO,SAAU,CAAC6B,EAAGN,EAAYuD,EAAUlB,EAAY6K,KAC5C,IAAKA,EAED,OAEJ,MAAMC,EAAS,IAAI,EAAAC,aAAa,CAC5BpN,aACAqC,WAAYA,QAA+CA,EAAa,EAAAC,iBAG5E6K,EAAO/L,MAAMpC,OAASuE,EAASO,cAC/BP,EAAS8J,eAAehN,SAAQ,KAC5B8M,EAAO/L,MAAMpC,OAASuE,EAASO,aAAa,IAEhDoJ,EAAUI,mBAAmBN,EAAmB5O,GAAI,CAChDmP,KAAMJ,EACNK,MAAO,SACPC,SAAU,IAAuB,OAAjBN,EAAO/L,OAA0C,OAAxB+L,EAAO/L,MAAMlB,OACtDwN,mBAAoBP,EAAO/L,MAAMC,cACnC,GAMGsM,EAAmB,CAC5BvP,GAAI,+CACJC,YAAa,gDACbC,WAAW,EACXsB,SAAU,CAAC,EAAAC,iBAAkB,EAAAuD,WAC7BtD,SAAU,CAAC,EAAAmN,YACXxO,SAAU,CAAC6B,EAAGN,EAAYuD,EAAU2J,KAChC,IAAKA,EAED,OAEJ,MAAMnI,EAAO,IAAI,EAAA6I,WAAW,CAAE5N,eAE9B+E,EAAK3D,MAAMpC,OAASuE,EAASO,cAC7BP,EAAS8J,eAAehN,SAAQ,KAC5B0E,EAAK3D,MAAMpC,OAASuE,EAASO,aAAa,IAE9CoJ,EAAUI,mBAAmBK,EAAiBvP,GAAI,CAC9CmP,KAAMxI,EACNyI,MAAO,QACPK,KAAM,GACR,GAMGC,EAAiB,CAC1B1P,GAAI,4CACJC,YAAa,kCACbC,WAAW,EACXsB,SAAU,CAAC,EAAAC,kBACXC,SAAU,CAAC,EAAA4B,YAAa,EAAAyB,iBACxB1E,SAAU,CAACC,EAAKsB,EAAYqC,EAAYiB,KACpC,MAAME,GAASnB,QAA+CA,EAAa,EAAAC,gBAAgBmB,KAAK,eAC1F,SAAEC,EAAQ,MAAE/E,GAAUD,EACtBmF,EAAY,KACd,MAAM,cAAEC,GAAkBnF,EAC1B,SAAUmF,IAAiB9D,EAAWQ,iBAAiBsD,GAAe,EAE1EJ,EAASY,WAAWrH,EAAWc,SAAU,CACrCwG,MAAOf,EAAMI,GAAG,YAChB8C,QAASlD,EAAMI,GAAG,sCAClBC,YACAY,QAAS,KAEL,GAAIZ,IAAa,CACb,MAAMtD,EAAUP,EAAWQ,iBAAiB7B,EAAMmF,eAClD,OAAKvD,EAOEA,EAAQxC,YANJ,IAAAkH,YAAW,CACd9F,MAAOqE,EAAMI,GAAG,mBAChBsB,KAAM1B,EAAMI,GAAG,wCACfuB,QAAS,CAAC,EAAAC,OAAO0B,aAI7B,KAGR,MAAMnD,EAAWH,EAAMI,GAAG,mBACtBN,GACAA,EAAQsH,QAAQ,CAAElF,QAASzI,EAAWc,SAAU4F,YACpD,GAYKoK,EAAuB,CAChC3P,GAAI,oDACJC,YAAa,sCACbC,WAAW,EACXsB,SAAU,CAAC,EAAAC,kBACXC,SAAU,CAAC,EAAA4B,aACXjD,SAAU,CAACC,EAAKsB,EAAYqC,KACxB,MAAMmB,GAASnB,QAA+CA,EAAa,EAAAC,gBAAgBmB,KAAK,eAC1F,SAAEC,GAAahF,EACrBgF,EAASY,WAAWrH,EAAWK,eAAgB,CAC3CmH,QAAS5D,IACL,MAAMkE,OAA+B,IAAjBlE,EAAW,KAAoB,GAAKA,EAAW,KACnE,GAAKkE,EAGL,OAAO/E,EAAW8F,SAASC,SAASiI,eAAejJ,GAAM5D,MAAK8M,IAC1D,MAAMvO,EAASwO,OAAO7Q,OACtB,IAAIqC,EAKA,MAAM,IAAIiG,MAAM,mCAJhBjG,EAAOkD,OAAS,KAChBlD,EAAOyO,SAASC,KAAOH,CAI3B,GACF,EAENzH,UAAW3F,GAAQA,EAAW,MAAK,GACnC0D,MAAO,IAAMf,EAAMI,GAAG,4BACxB,GAgBV,EAVgB,CACZnC,EACAwB,EACAtD,EACAgO,EACAX,EACAc,EACAC,EACA5P,GAMG,IAAIkQ,EA4fPnP,GA3fJ,SAAWmP,GAQPA,EAAaC,iBAHb,SAA0B5K,EAAU0G,GAChC,OAAO,IAAAmE,8BAA6B,EAAAC,YAAYC,OAAO,gBAAoB,EAAAC,UAAW,CAAEC,OAAQvE,IAAe,IAAO,gBAAoB,EAAAwE,8BAA+B,CAAElL,SAAUA,EAAUtF,GAAInB,EAAWW,KAAM2G,MAAO,GAAI1D,KAAM,CAAE8G,SAAS,QACpP,CAEH,CATD,CASG0G,IAAiBA,EAAe,CAAC,IAEpC,MAAMhH,UAA4B,EAAAwH,OAI9B,WAAAjQ,CAAYkQ,EAAYtL,EAAOgB,EAAW,YACtCuK,MAAM,CACF9K,KAAM/E,EAAQ8P,wBAAwBF,EAAYtK,EAAUhB,IAEpE,EAGJ,SAASgB,EAASxF,EAAQgB,GACtB,IAAKhB,EACD,MAAO,OAEX,MAAMuB,EAAUP,EAAWQ,iBAAiBxB,GAC5C,IAAKuB,EACD,MAAO,GAEX,MAAM0O,EAAMjP,EAAWoC,SAAS8M,oBAAoB3O,EAAQwE,MAC5D,OAAOkK,EAAIhI,QAAUgI,EAAI,GAAGE,YAAcF,EAAI,GAAGE,YAAc,MACnE,EA4dA,SAAWjQ,GAIPA,EAAQd,GAAK,EAsBbc,EAAQ8P,wBArBR,SAAiCF,EAAYtK,EAAUhB,GACnD,MAAM0B,EAAOkK,SAASC,cAAc,OAC9BC,EAAiBF,SAASC,cAAc,KACxCE,EAAcH,SAASI,eAAehM,EAAMI,GAAG,yDAA0DY,IACzGiL,EAAiBL,SAASC,cAAc,UAC9CI,EAAeC,YAAclM,EAAMI,GAAG,0BACtC0L,EAAeK,YAAYJ,GAC3BD,EAAeK,YAAYF,GAC3B,MAAMG,EAAwBR,SAASC,cAAc,KAC/CQ,EAAqBT,SAASI,eAAehM,EAAMI,GAAG,yCACtDkM,EAAqBV,SAASC,cAAc,KAC5CU,EAAO,IAAIC,KAAKlB,EAAWmB,eAQjC,OAPAH,EAAmBI,MAAMC,UAAY,SACrCL,EAAmBJ,YACf,EAAAU,KAAKC,OAAON,GAAQ,KAAO,EAAAK,KAAKE,YAAYP,GAAQ,IACxDH,EAAsBD,YAAYE,GAClCD,EAAsBD,YAAYG,GAClC5K,EAAKyK,YAAYL,GACjBpK,EAAKyK,YAAYC,GACV1K,CACX,EAuBAhG,EAAQiI,oBAlBRnC,eAAmCgC,EAAaxD,GAE5C,MACM+M,EAAQvJ,EAAYuF,KAAI,CAACuC,EAAY0B,IAGhC,GAAGA,MAFM,EAAAJ,KAAKC,OAAOvB,EAAWmB,mBACrB,EAAAG,KAAKE,YAAYxB,EAAWmB,oBAG5CQ,SAAsB,EAAAlI,YAAYmI,QAAQ,CAC5CH,MAAOA,EACPpR,MAAOqE,EAAMI,GAAG,0BAChBmF,MACJ,IAAK0H,EACD,OAEJ,MAAME,EAAgBF,EAAaG,MAbZ,IAakC,GAAG,GAC5D,OAAO5J,EAAY6J,SAASF,EAAe,IAC/C,CAEH,CAjDD,CAiDGzR,IAAYA,EAAU,CAAC,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module docmanager-extension\n */\nimport { ILabShell, ILabStatus, JupyterLab } from '@jupyterlab/application';\nimport { addCommandToolbarButtonClass, CommandToolbarButtonComponent, Dialog, ICommandPalette, InputDialog, ISessionContextDialogs, ReactWidget, SessionContextDialogs, showDialog, showErrorMessage, UseSignal } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { DocumentManager, IDocumentManager, IDocumentWidgetOpener, PathStatus, renameDialog, SavingStatus } from '@jupyterlab/docmanager';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { saveIcon } from '@jupyterlab/ui-components';\nimport { some } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\n/**\n * The command IDs used by the document manager plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.clone = 'docmanager:clone';\n    CommandIDs.deleteFile = 'docmanager:delete-file';\n    CommandIDs.newUntitled = 'docmanager:new-untitled';\n    CommandIDs.open = 'docmanager:open';\n    CommandIDs.openBrowserTab = 'docmanager:open-browser-tab';\n    CommandIDs.reload = 'docmanager:reload';\n    CommandIDs.rename = 'docmanager:rename';\n    CommandIDs.del = 'docmanager:delete';\n    CommandIDs.duplicate = 'docmanager:duplicate';\n    CommandIDs.restoreCheckpoint = 'docmanager:restore-checkpoint';\n    CommandIDs.save = 'docmanager:save';\n    CommandIDs.saveAll = 'docmanager:save-all';\n    CommandIDs.saveAs = 'docmanager:save-as';\n    CommandIDs.download = 'docmanager:download';\n    CommandIDs.toggleAutosave = 'docmanager:toggle-autosave';\n    CommandIDs.showInFileBrowser = 'docmanager:show-in-file-browser';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The id of the document manager plugin.\n */\nconst docManagerPluginId = '@jupyterlab/docmanager-extension:plugin';\n/**\n * A plugin to open documents in the main area.\n *\n */\nconst openerPlugin = {\n    id: '@jupyterlab/docmanager-extension:opener',\n    description: 'Provides the widget opener.',\n    autoStart: true,\n    provides: IDocumentWidgetOpener,\n    activate: (app) => {\n        const { shell } = app;\n        return new (class {\n            constructor() {\n                this._opened = new Signal(this);\n            }\n            open(widget, options) {\n                if (!widget.id) {\n                    widget.id = `document-manager-${++Private.id}`;\n                }\n                widget.title.dataset = {\n                    type: 'document-title',\n                    ...widget.title.dataset\n                };\n                if (!widget.isAttached) {\n                    shell.add(widget, 'main', options || {});\n                }\n                shell.activateById(widget.id);\n                this._opened.emit(widget);\n            }\n            get opened() {\n                return this._opened;\n            }\n        })();\n    }\n};\n/**\n * A plugin to handle dirty states for open documents.\n */\nconst contextsPlugin = {\n    id: '@jupyterlab/docmanager-extension:contexts',\n    description: 'Adds the handling of opened documents dirty state.',\n    autoStart: true,\n    requires: [IDocumentManager, IDocumentWidgetOpener],\n    optional: [ILabStatus],\n    activate: (app, docManager, widgetOpener, status) => {\n        const contexts = new WeakSet();\n        widgetOpener.opened.connect((_, widget) => {\n            // Handle dirty state for open documents.\n            const context = docManager.contextForWidget(widget);\n            if (context && !contexts.has(context)) {\n                if (status) {\n                    handleContext(status, context);\n                }\n                contexts.add(context);\n            }\n        });\n    }\n};\n/**\n * A plugin providing the default document manager.\n */\nconst manager = {\n    id: '@jupyterlab/docmanager-extension:manager',\n    description: 'Provides the document manager.',\n    provides: IDocumentManager,\n    requires: [IDocumentWidgetOpener],\n    optional: [ITranslator, ILabStatus, ISessionContextDialogs, JupyterLab.IInfo],\n    activate: (app, widgetOpener, translator_, status, sessionDialogs_, info) => {\n        var _a;\n        const { serviceManager: manager, docRegistry: registry } = app;\n        const translator = translator_ !== null && translator_ !== void 0 ? translator_ : nullTranslator;\n        const sessionDialogs = sessionDialogs_ !== null && sessionDialogs_ !== void 0 ? sessionDialogs_ : new SessionContextDialogs({ translator });\n        const when = app.restored.then(() => void 0);\n        const docManager = new DocumentManager({\n            registry,\n            manager,\n            opener: widgetOpener,\n            when,\n            setBusy: (_a = (status && (() => status.setBusy()))) !== null && _a !== void 0 ? _a : undefined,\n            sessionDialogs,\n            translator: translator !== null && translator !== void 0 ? translator : nullTranslator,\n            isConnectedCallback: () => {\n                if (info) {\n                    return info.isConnected;\n                }\n                return true;\n            }\n        });\n        return docManager;\n    }\n};\n/**\n * The default document manager provider commands and settings.\n */\nconst docManagerPlugin = {\n    id: docManagerPluginId,\n    description: 'Adds commands and settings to the document manager.',\n    autoStart: true,\n    requires: [IDocumentManager, IDocumentWidgetOpener, ISettingRegistry],\n    optional: [ITranslator, ICommandPalette, ILabShell],\n    activate: (app, docManager, widgetOpener, settingRegistry, translator, palette, labShell) => {\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const registry = app.docRegistry;\n        // Register the file operations commands.\n        addCommands(app, docManager, widgetOpener, settingRegistry, translator, labShell, palette);\n        // Keep up to date with the settings registry.\n        const onSettingsUpdated = (settings) => {\n            // Handle whether to autosave\n            const autosave = settings.get('autosave').composite;\n            docManager.autosave =\n                autosave === true || autosave === false ? autosave : true;\n            app.commands.notifyCommandChanged(CommandIDs.toggleAutosave);\n            const confirmClosingDocument = settings.get('confirmClosingDocument')\n                .composite;\n            docManager.confirmClosingDocument = confirmClosingDocument !== null && confirmClosingDocument !== void 0 ? confirmClosingDocument : true;\n            // Handle autosave interval\n            const autosaveInterval = settings.get('autosaveInterval').composite;\n            docManager.autosaveInterval = autosaveInterval || 120;\n            // Handle last modified timestamp check margin\n            const lastModifiedCheckMargin = settings.get('lastModifiedCheckMargin')\n                .composite;\n            docManager.lastModifiedCheckMargin = lastModifiedCheckMargin || 500;\n            const renameUntitledFile = settings.get('renameUntitledFileOnSave')\n                .composite;\n            docManager.renameUntitledFileOnSave = renameUntitledFile !== null && renameUntitledFile !== void 0 ? renameUntitledFile : true;\n            // Handle default widget factory overrides.\n            const defaultViewers = settings.get('defaultViewers').composite;\n            const overrides = {};\n            // Filter the defaultViewers and file types for existing ones.\n            Object.keys(defaultViewers).forEach(ft => {\n                if (!registry.getFileType(ft)) {\n                    console.warn(`File Type ${ft} not found`);\n                    return;\n                }\n                if (!registry.getWidgetFactory(defaultViewers[ft])) {\n                    console.warn(`Document viewer ${defaultViewers[ft]} not found`);\n                }\n                overrides[ft] = defaultViewers[ft];\n            });\n            // Set the default factory overrides. If not provided, this has the\n            // effect of unsetting any previous overrides.\n            for (const ft of registry.fileTypes()) {\n                try {\n                    registry.setDefaultWidgetFactory(ft.name, overrides[ft.name]);\n                }\n                catch (_a) {\n                    console.warn(`Failed to set default viewer ${overrides[ft.name]} for file type ${ft.name}`);\n                }\n            }\n        };\n        // Fetch the initial state of the settings.\n        Promise.all([settingRegistry.load(docManagerPluginId), app.restored])\n            .then(([settings]) => {\n            settings.changed.connect(onSettingsUpdated);\n            onSettingsUpdated(settings);\n            const onStateChanged = (sender, change) => {\n                if ([\n                    'autosave',\n                    'autosaveInterval',\n                    'confirmClosingDocument',\n                    'lastModifiedCheckMargin',\n                    'renameUntitledFileOnSave'\n                ].includes(change.name) &&\n                    settings.get(change.name).composite !== change.newValue) {\n                    settings.set(change.name, change.newValue).catch(reason => {\n                        console.error(`Failed to set the setting '${change.name}':\\n${reason}`);\n                    });\n                }\n            };\n            docManager.stateChanged.connect(onStateChanged);\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n        // Register a fetch transformer for the settings registry,\n        // allowing us to dynamically populate a help string with the\n        // available document viewers and file types for the default\n        // viewer overrides.\n        settingRegistry.transform(docManagerPluginId, {\n            fetch: plugin => {\n                // Get the available file types.\n                const fileTypes = Array.from(registry.fileTypes())\n                    .map(ft => ft.name)\n                    .join('    \\n');\n                // Get the available widget factories.\n                const factories = Array.from(registry.widgetFactories())\n                    .map(f => f.name)\n                    .join('    \\n');\n                // Generate the help string.\n                const description = trans.__(`Overrides for the default viewers for file types.\nSpecify a mapping from file type name to document viewer name, for example:\n\ndefaultViewers: {\n  markdown: \"Markdown Preview\"\n}\n\nIf you specify non-existent file types or viewers, or if a viewer cannot\nopen a given file type, the override will not function.\n\nAvailable viewers:\n%1\n\nAvailable file types:\n%2`, factories, fileTypes);\n                const schema = JSONExt.deepCopy(plugin.schema);\n                schema.properties.defaultViewers.description = description;\n                return { ...plugin, schema };\n            }\n        });\n        // If the document registry gains or loses a factory or file type,\n        // regenerate the settings description with the available options.\n        registry.changed.connect(() => settingRegistry.load(docManagerPluginId, true));\n    }\n};\n/**\n * A plugin for adding a saving status item to the status bar.\n */\nexport const savingStatusPlugin = {\n    id: '@jupyterlab/docmanager-extension:saving-status',\n    description: 'Adds a saving status indicator.',\n    autoStart: true,\n    requires: [IDocumentManager, ILabShell],\n    optional: [ITranslator, IStatusBar],\n    activate: (_, docManager, labShell, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const saving = new SavingStatus({\n            docManager,\n            translator: translator !== null && translator !== void 0 ? translator : nullTranslator\n        });\n        // Keep the currently active widget synchronized.\n        saving.model.widget = labShell.currentWidget;\n        labShell.currentChanged.connect(() => {\n            saving.model.widget = labShell.currentWidget;\n        });\n        statusBar.registerStatusItem(savingStatusPlugin.id, {\n            item: saving,\n            align: 'middle',\n            isActive: () => saving.model !== null && saving.model.status !== null,\n            activeStateChanged: saving.model.stateChanged\n        });\n    }\n};\n/**\n * A plugin providing a file path widget to the status bar.\n */\nexport const pathStatusPlugin = {\n    id: '@jupyterlab/docmanager-extension:path-status',\n    description: 'Adds a file path indicator in the status bar.',\n    autoStart: true,\n    requires: [IDocumentManager, ILabShell],\n    optional: [IStatusBar],\n    activate: (_, docManager, labShell, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const path = new PathStatus({ docManager });\n        // Keep the file path widget up-to-date with the application active widget.\n        path.model.widget = labShell.currentWidget;\n        labShell.currentChanged.connect(() => {\n            path.model.widget = labShell.currentWidget;\n        });\n        statusBar.registerStatusItem(pathStatusPlugin.id, {\n            item: path,\n            align: 'right',\n            rank: 0\n        });\n    }\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nexport const downloadPlugin = {\n    id: '@jupyterlab/docmanager-extension:download',\n    description: 'Adds command to download files.',\n    autoStart: true,\n    requires: [IDocumentManager],\n    optional: [ITranslator, ICommandPalette],\n    activate: (app, docManager, translator, palette) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n        const { commands, shell } = app;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        commands.addCommand(CommandIDs.download, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: () => {\n                // Checks that shell.currentWidget is valid:\n                if (isEnabled()) {\n                    const context = docManager.contextForWidget(shell.currentWidget);\n                    if (!context) {\n                        return showDialog({\n                            title: trans.__('Cannot Download'),\n                            body: trans.__('No context found for current widget!'),\n                            buttons: [Dialog.okButton()]\n                        });\n                    }\n                    return context.download();\n                }\n            }\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.download, category });\n        }\n    }\n};\n/**\n * A plugin providing open-browser-tab commands.\n *\n * This is its own plugin in case you would like to disable this feature.\n * e.g. jupyter labextension disable @jupyterlab/docmanager-extension:open-browser-tab\n *\n * Note: If disabling this, you may also want to disable:\n * @jupyterlab/filebrowser-extension:open-browser-tab\n */\nexport const openBrowserTabPlugin = {\n    id: '@jupyterlab/docmanager-extension:open-browser-tab',\n    description: 'Adds command to open a browser tab.',\n    autoStart: true,\n    requires: [IDocumentManager],\n    optional: [ITranslator],\n    activate: (app, docManager, translator) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n        const { commands } = app;\n        commands.addCommand(CommandIDs.openBrowserTab, {\n            execute: args => {\n                const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n                if (!path) {\n                    return;\n                }\n                return docManager.services.contents.getDownloadUrl(path).then(url => {\n                    const opened = window.open();\n                    if (opened) {\n                        opened.opener = null;\n                        opened.location.href = url;\n                    }\n                    else {\n                        throw new Error('Failed to open new browser tab.');\n                    }\n                });\n            },\n            iconClass: args => args['icon'] || '',\n            label: () => trans.__('Open in New Browser Tab')\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    manager,\n    docManagerPlugin,\n    contextsPlugin,\n    pathStatusPlugin,\n    savingStatusPlugin,\n    downloadPlugin,\n    openBrowserTabPlugin,\n    openerPlugin\n];\nexport default plugins;\n/**\n * Toolbar item factory\n */\nexport var ToolbarItems;\n(function (ToolbarItems) {\n    /**\n     * Create save button toolbar item.\n     *\n     */\n    function createSaveButton(commands, fileChanged) {\n        return addCommandToolbarButtonClass(ReactWidget.create(React.createElement(UseSignal, { signal: fileChanged }, () => (React.createElement(CommandToolbarButtonComponent, { commands: commands, id: CommandIDs.save, label: '', args: { toolbar: true } })))));\n    }\n    ToolbarItems.createSaveButton = createSaveButton;\n})(ToolbarItems || (ToolbarItems = {}));\n/* Widget to display the revert to checkpoint confirmation. */\nclass RevertConfirmWidget extends Widget {\n    /**\n     * Construct a new revert confirmation widget.\n     */\n    constructor(checkpoint, trans, fileType = 'notebook') {\n        super({\n            node: Private.createRevertConfirmNode(checkpoint, fileType, trans)\n        });\n    }\n}\n// Returns the file type for a widget.\nfunction fileType(widget, docManager) {\n    if (!widget) {\n        return 'File';\n    }\n    const context = docManager.contextForWidget(widget);\n    if (!context) {\n        return '';\n    }\n    const fts = docManager.registry.getFileTypesForPath(context.path);\n    return fts.length && fts[0].displayName ? fts[0].displayName : 'File';\n}\n/**\n * Add the file operations commands to the application's command registry.\n */\nfunction addCommands(app, docManager, widgetOpener, settingRegistry, translator, labShell, palette) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const category = trans.__('File Operations');\n    const isEnabled = () => {\n        const { currentWidget } = shell;\n        return !!(currentWidget && docManager.contextForWidget(currentWidget));\n    };\n    const isWritable = () => {\n        var _a;\n        const { currentWidget } = shell;\n        if (!currentWidget) {\n            return false;\n        }\n        const context = docManager.contextForWidget(currentWidget);\n        return !!((_a = context === null || context === void 0 ? void 0 : context.contentsModel) === null || _a === void 0 ? void 0 : _a.writable);\n    };\n    // If inside a rich application like JupyterLab, add additional functionality.\n    if (labShell) {\n        addLabCommands(app, docManager, labShell, widgetOpener, translator);\n    }\n    commands.addCommand(CommandIDs.deleteFile, {\n        label: () => `Delete ${fileType(shell.currentWidget, docManager)}`,\n        execute: args => {\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            if (!path) {\n                const command = CommandIDs.deleteFile;\n                throw new Error(`A non-empty path is required for ${command}.`);\n            }\n            return docManager.deleteFile(path);\n        }\n    });\n    commands.addCommand(CommandIDs.newUntitled, {\n        execute: args => {\n            const errorTitle = args['error'] || trans.__('Error');\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            const options = {\n                type: args['type'],\n                path\n            };\n            if (args['type'] === 'file') {\n                options.ext = args['ext'] || '.txt';\n            }\n            return docManager.services.contents\n                .newUntitled(options)\n                .catch(error => showErrorMessage(errorTitle, error));\n        },\n        label: args => args['label'] || `New ${args['type']}`\n    });\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            const factory = args['factory'] || void 0;\n            const kernel = args === null || args === void 0 ? void 0 : args.kernel;\n            const options = args['options'] || void 0;\n            return docManager.services.contents\n                .get(path, { content: false })\n                .then(() => docManager.openOrReveal(path, factory, kernel, options));\n        },\n        iconClass: args => args['icon'] || '',\n        label: args => {\n            var _a;\n            return ((_a = (args['label'] || args['factory'])) !== null && _a !== void 0 ? _a : trans.__('Open the provided `path`.'));\n        },\n        mnemonic: args => args['mnemonic'] || -1\n    });\n    commands.addCommand(CommandIDs.reload, {\n        label: () => trans.__('Reload %1 from Disk', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Reload contents from disk'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (!isEnabled()) {\n                return;\n            }\n            const context = docManager.contextForWidget(shell.currentWidget);\n            const type = fileType(shell.currentWidget, docManager);\n            if (!context) {\n                return showDialog({\n                    title: trans.__('Cannot Reload'),\n                    body: trans.__('No context found for current widget!'),\n                    buttons: [Dialog.okButton()]\n                });\n            }\n            if (context.model.dirty) {\n                return showDialog({\n                    title: trans.__('Reload %1 from Disk', type),\n                    body: trans.__('Are you sure you want to reload the %1 from the disk?', type),\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.warnButton({ label: trans.__('Reload') })\n                    ]\n                }).then(result => {\n                    if (result.button.accept && !context.isDisposed) {\n                        return context.revert();\n                    }\n                });\n            }\n            else {\n                if (!context.isDisposed) {\n                    return context.revert();\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.restoreCheckpoint, {\n        label: () => trans.__('Revert %1 to Checkpoint…', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Revert contents to previous checkpoint'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (!isEnabled()) {\n                return;\n            }\n            const context = docManager.contextForWidget(shell.currentWidget);\n            if (!context) {\n                return showDialog({\n                    title: trans.__('Cannot Revert'),\n                    body: trans.__('No context found for current widget!'),\n                    buttons: [Dialog.okButton()]\n                });\n            }\n            return context.listCheckpoints().then(async (checkpoints) => {\n                const type = fileType(shell.currentWidget, docManager);\n                if (checkpoints.length < 1) {\n                    await showErrorMessage(trans.__('No checkpoints'), trans.__('No checkpoints are available for this %1.', type));\n                    return;\n                }\n                const targetCheckpoint = checkpoints.length === 1\n                    ? checkpoints[0]\n                    : await Private.getTargetCheckpoint(checkpoints.reverse(), trans);\n                if (!targetCheckpoint) {\n                    return;\n                }\n                return showDialog({\n                    title: trans.__('Revert %1 to checkpoint', type),\n                    body: new RevertConfirmWidget(targetCheckpoint, trans, type),\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.warnButton({\n                            label: trans.__('Revert'),\n                            ariaLabel: trans.__('Revert to Checkpoint')\n                        })\n                    ]\n                }).then(result => {\n                    if (context.isDisposed) {\n                        return;\n                    }\n                    if (result.button.accept) {\n                        if (context.model.readOnly) {\n                            return context.revert();\n                        }\n                        return context\n                            .restoreCheckpoint(targetCheckpoint.id)\n                            .then(() => context.revert());\n                    }\n                });\n            });\n        }\n    });\n    const caption = () => {\n        if (shell.currentWidget) {\n            const context = docManager.contextForWidget(shell.currentWidget);\n            if (context === null || context === void 0 ? void 0 : context.model.collaborative) {\n                return trans.__('In collaborative mode, the document is saved automatically after every change');\n            }\n        }\n        return trans.__('Save and create checkpoint');\n    };\n    const saveInProgress = new WeakSet();\n    commands.addCommand(CommandIDs.save, {\n        label: () => trans.__('Save %1', fileType(shell.currentWidget, docManager)),\n        caption,\n        icon: args => (args.toolbar ? saveIcon : undefined),\n        isEnabled: isWritable,\n        execute: async () => {\n            var _a, _b, _c;\n            // Checks that shell.currentWidget is valid:\n            if (isEnabled()) {\n                const widget = shell.currentWidget;\n                const context = docManager.contextForWidget(widget);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Save'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton()]\n                    });\n                }\n                else {\n                    if (saveInProgress.has(context)) {\n                        return;\n                    }\n                    if (context.model.readOnly) {\n                        return showDialog({\n                            title: trans.__('Cannot Save'),\n                            body: trans.__('Document is read-only'),\n                            buttons: [Dialog.okButton()]\n                        });\n                    }\n                    saveInProgress.add(context);\n                    const oldName = PathExt.basename((_b = (_a = context.contentsModel) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : '');\n                    let newName = oldName;\n                    if (docManager.renameUntitledFileOnSave &&\n                        widget.isUntitled === true) {\n                        const result = await InputDialog.getText({\n                            title: trans.__('Rename file'),\n                            okLabel: trans.__('Rename'),\n                            placeholder: trans.__('File name'),\n                            text: oldName,\n                            selectionRange: oldName.length - PathExt.extname(oldName).length,\n                            checkbox: {\n                                label: trans.__('Do not ask me again.'),\n                                caption: trans.__('If checked, you will not be asked to rename future untitled files when saving them.')\n                            }\n                        });\n                        if (result.button.accept) {\n                            newName = (_c = result.value) !== null && _c !== void 0 ? _c : oldName;\n                            widget.isUntitled = false;\n                            if (typeof result.isChecked === 'boolean') {\n                                const currentSetting = (await settingRegistry.get(docManagerPluginId, 'renameUntitledFileOnSave')).composite;\n                                if (result.isChecked === currentSetting) {\n                                    settingRegistry\n                                        .set(docManagerPluginId, 'renameUntitledFileOnSave', !result.isChecked)\n                                        .catch(reason => {\n                                        console.error(`Fail to set 'renameUntitledFileOnSave:\\n${reason}`);\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    try {\n                        await context.save();\n                        if (!(widget === null || widget === void 0 ? void 0 : widget.isDisposed)) {\n                            return context.createCheckpoint();\n                        }\n                    }\n                    catch (err) {\n                        // If the save was canceled by user-action, do nothing.\n                        if (err.name === 'ModalCancelError') {\n                            return;\n                        }\n                        throw err;\n                    }\n                    finally {\n                        saveInProgress.delete(context);\n                        if (newName !== oldName) {\n                            await context.rename(newName);\n                        }\n                    }\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.saveAll, {\n        label: () => trans.__('Save All'),\n        caption: trans.__('Save all open documents'),\n        isEnabled: () => {\n            return some(shell.widgets('main'), w => { var _a, _b, _c; return (_c = (_b = (_a = docManager.contextForWidget(w)) === null || _a === void 0 ? void 0 : _a.contentsModel) === null || _b === void 0 ? void 0 : _b.writable) !== null && _c !== void 0 ? _c : false; });\n        },\n        execute: () => {\n            const promises = [];\n            const paths = new Set(); // Cache so we don't double save files.\n            for (const widget of shell.widgets('main')) {\n                const context = docManager.contextForWidget(widget);\n                if (context && !context.model.readOnly && !paths.has(context.path)) {\n                    paths.add(context.path);\n                    promises.push(context.save());\n                }\n            }\n            return Promise.all(promises);\n        }\n    });\n    commands.addCommand(CommandIDs.saveAs, {\n        label: () => trans.__('Save %1 As…', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Save with new path'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(shell.currentWidget);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Save'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton()]\n                    });\n                }\n                const onChange = (sender, args) => {\n                    if (args.type === 'save' &&\n                        args.newValue &&\n                        args.newValue.path !== context.path) {\n                        void docManager.closeFile(context.path);\n                        void commands.execute(CommandIDs.open, {\n                            path: args.newValue.path\n                        });\n                    }\n                };\n                docManager.services.contents.fileChanged.connect(onChange);\n                context\n                    .saveAs()\n                    .finally(() => docManager.services.contents.fileChanged.disconnect(onChange));\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.toggleAutosave, {\n        label: trans.__('Autosave Documents'),\n        isToggled: () => docManager.autosave,\n        execute: () => {\n            const value = !docManager.autosave;\n            const key = 'autosave';\n            return settingRegistry\n                .set(docManagerPluginId, key, value)\n                .catch((reason) => {\n                console.error(`Failed to set ${docManagerPluginId}:${key} - ${reason.message}`);\n            });\n        }\n    });\n    if (palette) {\n        [\n            CommandIDs.reload,\n            CommandIDs.restoreCheckpoint,\n            CommandIDs.save,\n            CommandIDs.saveAs,\n            CommandIDs.toggleAutosave,\n            CommandIDs.duplicate\n        ].forEach(command => {\n            palette.addItem({ command, category });\n        });\n    }\n}\nfunction addLabCommands(app, docManager, labShell, widgetOpener, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    // Returns the doc widget associated with the most recent contextmenu event.\n    const contextMenuWidget = () => {\n        var _a;\n        const pathRe = /[Pp]ath:\\s?(.*)\\n?/;\n        const test = (node) => { var _a; return !!((_a = node['title']) === null || _a === void 0 ? void 0 : _a.match(pathRe)); };\n        const node = app.contextMenuHitTest(test);\n        const pathMatch = node === null || node === void 0 ? void 0 : node['title'].match(pathRe);\n        return ((_a = (pathMatch && docManager.findWidget(pathMatch[1], null))) !== null && _a !== void 0 ? _a : \n        // Fall back to active doc widget if path cannot be obtained from event.\n        labShell.currentWidget);\n    };\n    // Returns `true` if the current widget has a document context.\n    const isEnabled = () => {\n        const { currentWidget } = labShell;\n        return !!(currentWidget && docManager.contextForWidget(currentWidget));\n    };\n    commands.addCommand(CommandIDs.clone, {\n        label: () => trans.__('New View for %1', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: args => {\n            const widget = contextMenuWidget();\n            const options = args['options'] || {\n                mode: 'split-right'\n            };\n            if (!widget) {\n                return;\n            }\n            // Clone the widget.\n            const child = docManager.cloneWidget(widget);\n            if (child) {\n                widgetOpener.open(child, options);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.rename, {\n        label: () => {\n            let t = fileType(contextMenuWidget(), docManager);\n            if (t) {\n                t = ' ' + t;\n            }\n            return trans.__('Rename%1…', t);\n        },\n        isEnabled,\n        execute: () => {\n            // Implies contextMenuWidget() !== null\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                return renameDialog(docManager, context);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.duplicate, {\n        label: () => trans.__('Duplicate %1', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: () => {\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                if (!context) {\n                    return;\n                }\n                return docManager.duplicate(context.path);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.del, {\n        label: () => trans.__('Delete %1', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: async () => {\n            // Implies contextMenuWidget() !== null\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                if (!context) {\n                    return;\n                }\n                const result = await showDialog({\n                    title: trans.__('Delete'),\n                    body: trans.__('Are you sure you want to delete %1', context.path),\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.warnButton({ label: trans.__('Delete') })\n                    ]\n                });\n                if (result.button.accept) {\n                    await app.commands.execute('docmanager:delete-file', {\n                        path: context.path\n                    });\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.showInFileBrowser, {\n        label: () => trans.__('Show in File Browser'),\n        isEnabled,\n        execute: async () => {\n            const widget = contextMenuWidget();\n            const context = widget && docManager.contextForWidget(widget);\n            if (!context) {\n                return;\n            }\n            // 'activate' is needed if this command is selected in the \"open tabs\" sidebar\n            await commands.execute('filebrowser:activate', { path: context.path });\n            await commands.execute('filebrowser:go-to-path', { path: context.path });\n        }\n    });\n}\n/**\n * Handle dirty state for a context.\n */\nfunction handleContext(status, context) {\n    let disposable = null;\n    const onStateChanged = (sender, args) => {\n        if (args.name === 'dirty') {\n            if (args.newValue === true) {\n                if (!disposable) {\n                    disposable = status.setDirty();\n                }\n            }\n            else if (disposable) {\n                disposable.dispose();\n                disposable = null;\n            }\n        }\n    };\n    void context.ready.then(() => {\n        context.model.stateChanged.connect(onStateChanged);\n        if (context.model.dirty) {\n            disposable = status.setDirty();\n        }\n    });\n    context.disposed.connect(() => {\n        if (disposable) {\n            disposable.dispose();\n        }\n    });\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A counter for unique IDs.\n     */\n    Private.id = 0;\n    function createRevertConfirmNode(checkpoint, fileType, trans) {\n        const body = document.createElement('div');\n        const confirmMessage = document.createElement('p');\n        const confirmText = document.createTextNode(trans.__('Are you sure you want to revert the %1 to checkpoint? ', fileType));\n        const cannotUndoText = document.createElement('strong');\n        cannotUndoText.textContent = trans.__('This cannot be undone.');\n        confirmMessage.appendChild(confirmText);\n        confirmMessage.appendChild(cannotUndoText);\n        const lastCheckpointMessage = document.createElement('p');\n        const lastCheckpointText = document.createTextNode(trans.__('The checkpoint was last updated at: '));\n        const lastCheckpointDate = document.createElement('p');\n        const date = new Date(checkpoint.last_modified);\n        lastCheckpointDate.style.textAlign = 'center';\n        lastCheckpointDate.textContent =\n            Time.format(date) + ' (' + Time.formatHuman(date) + ')';\n        lastCheckpointMessage.appendChild(lastCheckpointText);\n        lastCheckpointMessage.appendChild(lastCheckpointDate);\n        body.appendChild(confirmMessage);\n        body.appendChild(lastCheckpointMessage);\n        return body;\n    }\n    Private.createRevertConfirmNode = createRevertConfirmNode;\n    /**\n     * Ask user for a checkpoint to revert to.\n     */\n    async function getTargetCheckpoint(checkpoints, trans) {\n        // the id could be too long to show so use the index instead\n        const indexSeparator = '.';\n        const items = checkpoints.map((checkpoint, index) => {\n            const isoDate = Time.format(checkpoint.last_modified);\n            const humanDate = Time.formatHuman(checkpoint.last_modified);\n            return `${index}${indexSeparator} ${isoDate} (${humanDate})`;\n        });\n        const selectedItem = (await InputDialog.getItem({\n            items: items,\n            title: trans.__('Choose a checkpoint')\n        })).value;\n        if (!selectedItem) {\n            return;\n        }\n        const selectedIndex = selectedItem.split(indexSeparator, 1)[0];\n        return checkpoints[parseInt(selectedIndex, 10)];\n    }\n    Private.getTargetCheckpoint = getTargetCheckpoint;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","clone","deleteFile","newUntitled","open","openBrowserTab","reload","rename","del","duplicate","restoreCheckpoint","save","saveAll","saveAs","download","toggleAutosave","showInFileBrowser","docManagerPluginId","openerPlugin","id","description","autoStart","provides","IDocumentWidgetOpener","activate","app","shell","constructor","this","_opened","Signal","widget","options","Private","title","dataset","type","isAttached","add","activateById","emit","opened","contextsPlugin","requires","IDocumentManager","optional","ILabStatus","docManager","widgetOpener","status","contexts","WeakSet","connect","_","context","contextForWidget","has","disposable","onStateChanged","sender","args","name","newValue","setDirty","dispose","ready","then","model","stateChanged","dirty","disposed","handleContext","manager","ITranslator","ISessionContextDialogs","JupyterLab","IInfo","translator_","sessionDialogs_","info","_a","serviceManager","docRegistry","registry","translator","nullTranslator","sessionDialogs","SessionContextDialogs","when","restored","DocumentManager","opener","setBusy","undefined","isConnectedCallback","isConnected","docManagerPlugin","ISettingRegistry","ICommandPalette","ILabShell","settingRegistry","palette","labShell","trans","load","commands","category","__","isEnabled","currentWidget","contextMenuWidget","pathRe","node","contextMenuHitTest","match","pathMatch","findWidget","addCommand","label","fileType","execute","mode","child","cloneWidget","t","renameDialog","path","async","showDialog","body","buttons","Dialog","cancelButton","warnButton","button","accept","addLabCommands","command","Error","errorTitle","ext","services","contents","catch","error","showErrorMessage","factory","kernel","get","content","openOrReveal","iconClass","mnemonic","caption","result","isDisposed","revert","okButton","listCheckpoints","checkpoints","length","targetCheckpoint","getTargetCheckpoint","reverse","RevertConfirmWidget","ariaLabel","readOnly","saveInProgress","collaborative","icon","toolbar","saveIcon","contentsModel","writable","_b","_c","oldName","PathExt","basename","newName","renameUntitledFileOnSave","isUntitled","InputDialog","getText","okLabel","placeholder","text","selectionRange","extname","checkbox","value","isChecked","currentSetting","composite","set","reason","console","createCheckpoint","err","delete","some","widgets","w","promises","paths","Set","push","Promise","all","onChange","closeFile","fileChanged","finally","disconnect","isToggled","autosave","key","message","forEach","addItem","addCommands","onSettingsUpdated","settings","notifyCommandChanged","confirmClosingDocument","autosaveInterval","lastModifiedCheckMargin","renameUntitledFile","defaultViewers","overrides","Object","keys","ft","getFileType","getWidgetFactory","warn","fileTypes","setDefaultWidgetFactory","changed","change","includes","transform","fetch","plugin","Array","from","map","join","factories","widgetFactories","f","schema","JSONExt","deepCopy","properties","savingStatusPlugin","IStatusBar","statusBar","saving","SavingStatus","currentChanged","registerStatusItem","item","align","isActive","activeStateChanged","pathStatusPlugin","PathStatus","rank","downloadPlugin","openBrowserTabPlugin","getDownloadUrl","url","window","location","href","ToolbarItems","createSaveButton","addCommandToolbarButtonClass","ReactWidget","create","UseSignal","signal","CommandToolbarButtonComponent","Widget","checkpoint","super","createRevertConfirmNode","fts","getFileTypesForPath","displayName","document","createElement","confirmMessage","confirmText","createTextNode","cannotUndoText","textContent","appendChild","lastCheckpointMessage","lastCheckpointText","lastCheckpointDate","date","Date","last_modified","style","textAlign","Time","format","formatHuman","items","index","selectedItem","getItem","selectedIndex","split","parseInt"],"sourceRoot":""}