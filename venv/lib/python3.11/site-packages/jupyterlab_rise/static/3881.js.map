{"version":3,"file":"3881.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application-extension/lib/topbar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application-extension/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { createToolbarFactory, IToolbarWidgetRegistry, setToolbar } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { Toolbar } from '@jupyterlab/ui-components';\nconst TOPBAR_FACTORY = 'TopBar';\n/**\n * A plugin adding a toolbar to the top area.\n */\nexport const topbar = {\n    id: '@jupyterlab/application-extension:top-bar',\n    description: 'Adds a toolbar to the top area (next to the main menu bar).',\n    autoStart: true,\n    requires: [ISettingRegistry, IToolbarWidgetRegistry],\n    optional: [ITranslator],\n    activate: (app, settingRegistry, toolbarRegistry, translator) => {\n        const toolbar = new Toolbar();\n        toolbar.id = 'jp-top-bar';\n        // Set toolbar\n        setToolbar(toolbar, createToolbarFactory(toolbarRegistry, settingRegistry, TOPBAR_FACTORY, topbar.id, translator !== null && translator !== void 0 ? translator : nullTranslator), toolbar);\n        app.shell.add(toolbar, 'top', { rank: 900 });\n    }\n};\n//# sourceMappingURL=topbar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module application-extension\n */\nimport { ConnectionLost, IConnectionLost, ILabShell, ILabStatus, ILayoutRestorer, IRouter, ITreePathUpdater, JupyterFrontEnd, JupyterFrontEndContextMenu, JupyterLab, LabShell, LayoutRestorer, Router } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, IWindowResolver, MenuFactory, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IPropertyInspectorProvider, SideBarPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { ISettingRegistry, SettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { buildIcon, jupyterIcon, RankedMenu, Switch } from '@jupyterlab/ui-components';\nimport { find, some } from '@lumino/algorithm';\nimport { JSONExt, PromiseDelegate } from '@lumino/coreutils';\nimport { CommandRegistry } from '@lumino/commands';\nimport { DisposableDelegate, DisposableSet } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport { topbar } from './topbar';\n/**\n * Default context menu item rank\n */\nexport const DEFAULT_CONTEXT_ITEM_RANK = 100;\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activateNextTab = 'application:activate-next-tab';\n    CommandIDs.activatePreviousTab = 'application:activate-previous-tab';\n    CommandIDs.activateNextTabBar = 'application:activate-next-tab-bar';\n    CommandIDs.activatePreviousTabBar = 'application:activate-previous-tab-bar';\n    CommandIDs.close = 'application:close';\n    CommandIDs.closeOtherTabs = 'application:close-other-tabs';\n    CommandIDs.closeRightTabs = 'application:close-right-tabs';\n    CommandIDs.closeAll = 'application:close-all';\n    CommandIDs.setMode = 'application:set-mode';\n    CommandIDs.showPropertyPanel = 'property-inspector:show-panel';\n    CommandIDs.resetLayout = 'application:reset-layout';\n    CommandIDs.toggleHeader = 'application:toggle-header';\n    CommandIDs.toggleMode = 'application:toggle-mode';\n    CommandIDs.toggleLeftArea = 'application:toggle-left-area';\n    CommandIDs.toggleRightArea = 'application:toggle-right-area';\n    CommandIDs.toggleSideTabBar = 'application:toggle-side-tabbar';\n    CommandIDs.togglePresentationMode = 'application:toggle-presentation-mode';\n    CommandIDs.tree = 'router:tree';\n    CommandIDs.switchSidebar = 'sidebar:switch';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin to register the commands for the main application.\n */\nconst mainCommands = {\n    id: '@jupyterlab/application-extension:commands',\n    description: 'Adds commands related to the shell.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ILabShell, ICommandPalette],\n    activate: (app, translator, labShell, palette) => {\n        const { commands, shell } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Main Area');\n        // Add Command to override the JLab context menu.\n        commands.addCommand(JupyterFrontEndContextMenu.contextMenu, {\n            label: trans.__('Shift+Right Click for Browser Menu'),\n            isEnabled: () => false,\n            execute: () => void 0\n        });\n        // Returns the widget associated with the most recent contextmenu event.\n        const contextMenuWidget = () => {\n            const test = (node) => !!node.dataset.id;\n            const node = app.contextMenuHitTest(test);\n            if (!node) {\n                // Fall back to active widget if path cannot be obtained from event.\n                return shell.currentWidget;\n            }\n            return (find(shell.widgets('main'), widget => widget.id === node.dataset.id) ||\n                shell.currentWidget);\n        };\n        // Closes an array of widgets.\n        const closeWidgets = (widgets) => {\n            widgets.forEach(widget => widget.close());\n        };\n        // Find the tab area for a widget within a specific dock area.\n        const findTab = (area, widget) => {\n            if (area.type === 'tab-area') {\n                return area.widgets.includes(widget) ? area : null;\n            }\n            if (area.type === 'split-area') {\n                for (const child of area.children) {\n                    const found = findTab(child, widget);\n                    if (found) {\n                        return found;\n                    }\n                }\n            }\n            return null;\n        };\n        // Find the tab area for a widget within the main dock area.\n        const tabAreaFor = (widget) => {\n            var _a;\n            const layout = labShell === null || labShell === void 0 ? void 0 : labShell.saveLayout();\n            const mainArea = layout === null || layout === void 0 ? void 0 : layout.mainArea;\n            if (!mainArea || PageConfig.getOption('mode') !== 'multiple-document') {\n                return null;\n            }\n            const area = (_a = mainArea.dock) === null || _a === void 0 ? void 0 : _a.main;\n            return area ? findTab(area, widget) : null;\n        };\n        // Returns an array of all widgets to the right of a widget in a tab area.\n        const widgetsRightOf = (widget) => {\n            const { id } = widget;\n            const tabArea = tabAreaFor(widget);\n            const widgets = tabArea ? tabArea.widgets || [] : [];\n            const index = widgets.findIndex(widget => widget.id === id);\n            if (index < 0) {\n                return [];\n            }\n            return widgets.slice(index + 1);\n        };\n        commands.addCommand(CommandIDs.close, {\n            label: () => trans.__('Close Tab'),\n            isEnabled: () => {\n                const widget = contextMenuWidget();\n                return !!widget && widget.title.closable;\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (widget) {\n                    widget.close();\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.closeOtherTabs, {\n            label: () => trans.__('Close All Other Tabs'),\n            isEnabled: () => {\n                // Ensure there are at least two widgets.\n                return some(shell.widgets('main'), (_, i) => i === 1);\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                const { id } = widget;\n                for (const widget of shell.widgets('main')) {\n                    if (widget.id !== id) {\n                        widget.close();\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.closeRightTabs, {\n            label: () => trans.__('Close Tabs to Right'),\n            isEnabled: () => !!contextMenuWidget() &&\n                widgetsRightOf(contextMenuWidget()).length > 0,\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                closeWidgets(widgetsRightOf(widget));\n            }\n        });\n        if (labShell) {\n            commands.addCommand(CommandIDs.activateNextTab, {\n                label: trans.__('Activate Next Tab'),\n                execute: () => {\n                    labShell.activateNextTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTab, {\n                label: trans.__('Activate Previous Tab'),\n                execute: () => {\n                    labShell.activatePreviousTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activateNextTabBar, {\n                label: trans.__('Activate Next Tab Bar'),\n                execute: () => {\n                    labShell.activateNextTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTabBar, {\n                label: trans.__('Activate Previous Tab Bar'),\n                execute: () => {\n                    labShell.activatePreviousTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.closeAll, {\n                label: trans.__('Close All Tabs'),\n                execute: () => {\n                    labShell.closeAll();\n                }\n            });\n            commands.addCommand(CommandIDs.toggleHeader, {\n                label: trans.__('Show Header'),\n                execute: () => {\n                    if (labShell.mode === 'single-document') {\n                        labShell.toggleTopInSimpleModeVisibility();\n                    }\n                },\n                isToggled: () => labShell.isTopInSimpleModeVisible(),\n                isVisible: () => labShell.mode === 'single-document'\n            });\n            commands.addCommand(CommandIDs.toggleLeftArea, {\n                label: trans.__('Show Left Sidebar'),\n                execute: () => {\n                    if (labShell.leftCollapsed) {\n                        labShell.expandLeft();\n                    }\n                    else {\n                        labShell.collapseLeft();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.leftCollapsed,\n                isEnabled: () => !labShell.isEmpty('left')\n            });\n            commands.addCommand(CommandIDs.toggleRightArea, {\n                label: trans.__('Show Right Sidebar'),\n                execute: () => {\n                    if (labShell.rightCollapsed) {\n                        labShell.expandRight();\n                    }\n                    else {\n                        labShell.collapseRight();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.rightCollapsed,\n                isEnabled: () => !labShell.isEmpty('right')\n            });\n            commands.addCommand(CommandIDs.toggleSideTabBar, {\n                label: args => args.side === 'right'\n                    ? trans.__('Show Right Activity Bar')\n                    : trans.__('Show Left Activity Bar'),\n                execute: args => {\n                    if (args.side === 'right') {\n                        labShell.toggleSideTabBarVisibility('right');\n                    }\n                    else {\n                        labShell.toggleSideTabBarVisibility('left');\n                    }\n                },\n                isToggled: args => args.side === 'right'\n                    ? labShell.isSideTabBarVisible('right')\n                    : labShell.isSideTabBarVisible('left'),\n                isEnabled: args => args.side === 'right'\n                    ? !labShell.isEmpty('right')\n                    : !labShell.isEmpty('left')\n            });\n            commands.addCommand(CommandIDs.togglePresentationMode, {\n                label: () => trans.__('Presentation Mode'),\n                execute: () => {\n                    labShell.presentationMode = !labShell.presentationMode;\n                },\n                isToggled: () => labShell.presentationMode,\n                isVisible: () => true\n            });\n            commands.addCommand(CommandIDs.setMode, {\n                label: args => args['mode']\n                    ? trans.__('Set %1 mode.', args['mode'])\n                    : trans.__('Set the layout `mode`.'),\n                caption: trans.__('The layout `mode` can be \"single-document\" or \"multiple-document\".'),\n                isVisible: args => {\n                    const mode = args['mode'];\n                    return mode === 'single-document' || mode === 'multiple-document';\n                },\n                execute: args => {\n                    const mode = args['mode'];\n                    if (mode === 'single-document' || mode === 'multiple-document') {\n                        labShell.mode = mode;\n                        return;\n                    }\n                    throw new Error(`Unsupported application shell mode: ${mode}`);\n                }\n            });\n            commands.addCommand(CommandIDs.toggleMode, {\n                label: trans.__('Simple Interface'),\n                isToggled: () => labShell.mode === 'single-document',\n                execute: () => {\n                    const args = labShell.mode === 'multiple-document'\n                        ? { mode: 'single-document' }\n                        : { mode: 'multiple-document' };\n                    return commands.execute(CommandIDs.setMode, args);\n                }\n            });\n            commands.addCommand(CommandIDs.resetLayout, {\n                label: trans.__('Reset Default Layout'),\n                execute: () => {\n                    // Turn off presentation mode\n                    if (labShell.presentationMode) {\n                        commands\n                            .execute(CommandIDs.togglePresentationMode)\n                            .catch(reason => {\n                            console.error('Failed to undo presentation mode.', reason);\n                        });\n                    }\n                    // Display top header\n                    if (labShell.mode === 'single-document' &&\n                        !labShell.isTopInSimpleModeVisible()) {\n                        commands.execute(CommandIDs.toggleHeader).catch(reason => {\n                            console.error('Failed to display title header.', reason);\n                        });\n                    }\n                    // Display side tabbar\n                    ['left', 'right'].forEach(side => {\n                        if (!labShell.isSideTabBarVisible(side) &&\n                            !labShell.isEmpty(side)) {\n                            commands\n                                .execute(CommandIDs.toggleSideTabBar, { side })\n                                .catch(reason => {\n                                console.error(`Failed to show ${side} activity bar.`, reason);\n                            });\n                        }\n                    });\n                    // Some actions are also trigger indirectly\n                    // - by listening to this command execution.\n                }\n            });\n        }\n        if (palette) {\n            [\n                CommandIDs.activateNextTab,\n                CommandIDs.activatePreviousTab,\n                CommandIDs.activateNextTabBar,\n                CommandIDs.activatePreviousTabBar,\n                CommandIDs.close,\n                CommandIDs.closeAll,\n                CommandIDs.closeOtherTabs,\n                CommandIDs.closeRightTabs,\n                CommandIDs.toggleHeader,\n                CommandIDs.toggleLeftArea,\n                CommandIDs.toggleRightArea,\n                CommandIDs.togglePresentationMode,\n                CommandIDs.toggleMode,\n                CommandIDs.resetLayout\n            ].forEach(command => palette.addItem({ command, category }));\n            ['right', 'left'].forEach(side => {\n                palette.addItem({\n                    command: CommandIDs.toggleSideTabBar,\n                    category,\n                    args: { side }\n                });\n            });\n        }\n    }\n};\n/**\n * The main extension.\n */\nconst main = {\n    id: '@jupyterlab/application-extension:main',\n    description: 'Initializes the application and provides the URL tree path handler.',\n    requires: [\n        IRouter,\n        IWindowResolver,\n        ITranslator,\n        JupyterFrontEnd.ITreeResolver\n    ],\n    optional: [IConnectionLost],\n    provides: ITreePathUpdater,\n    activate: (app, router, resolver, translator, treeResolver, connectionLost) => {\n        const trans = translator.load('jupyterlab');\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${main.id} must be activated in JupyterLab.`);\n        }\n        // These two internal state variables are used to manage the two source\n        // of the tree part of the URL being updated: 1) path of the active document,\n        // 2) path of the default browser if the active main area widget isn't a document.\n        let _docTreePath = '';\n        let _defaultBrowserTreePath = '';\n        function updateTreePath(treePath) {\n            // Wait for tree resolver to finish before updating the path because it use the PageConfig['treePath']\n            void treeResolver.paths.then(() => {\n                _defaultBrowserTreePath = treePath;\n                if (!_docTreePath) {\n                    const url = PageConfig.getUrl({ treePath });\n                    const path = URLExt.parse(url).pathname;\n                    router.navigate(path, { skipRouting: true });\n                    // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                    PageConfig.setOption('treePath', treePath);\n                }\n            });\n        }\n        // Requiring the window resolver guarantees that the application extension\n        // only loads if there is a viable window name. Otherwise, the application\n        // will short-circuit and ask the user to navigate away.\n        const workspace = resolver.name;\n        console.debug(`Starting application in workspace: \"${workspace}\"`);\n        // If there were errors registering plugins, tell the user.\n        if (app.registerPluginErrors.length !== 0) {\n            const body = (React.createElement(\"pre\", null, app.registerPluginErrors.map(e => e.message).join('\\n')));\n            void showErrorMessage(trans.__('Error Registering Plugins'), {\n                message: body\n            });\n        }\n        // If the application shell layout is modified,\n        // trigger a refresh of the commands.\n        app.shell.layoutModified.connect(() => {\n            app.commands.notifyCommandChanged();\n        });\n        // Watch the mode and update the page URL to /lab or /doc to reflect the\n        // change.\n        app.shell.modeChanged.connect((_, args) => {\n            const url = PageConfig.getUrl({ mode: args });\n            const path = URLExt.parse(url).pathname;\n            router.navigate(path, { skipRouting: true });\n            // Persist this mode change to PageConfig as it is used elsewhere at runtime.\n            PageConfig.setOption('mode', args);\n        });\n        // Wait for tree resolver to finish before updating the path because it use the PageConfig['treePath']\n        void treeResolver.paths.then(() => {\n            // Watch the path of the current widget in the main area and update the page\n            // URL to reflect the change.\n            app.shell.currentPathChanged.connect((_, args) => {\n                const maybeTreePath = args.newValue;\n                const treePath = maybeTreePath || _defaultBrowserTreePath;\n                const url = PageConfig.getUrl({ treePath: treePath });\n                const path = URLExt.parse(url).pathname;\n                router.navigate(path, { skipRouting: true });\n                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                PageConfig.setOption('treePath', treePath);\n                _docTreePath = maybeTreePath;\n            });\n        });\n        // If the connection to the server is lost, handle it with the\n        // connection lost handler.\n        connectionLost = connectionLost || ConnectionLost;\n        app.serviceManager.connectionFailure.connect((manager, error) => connectionLost(manager, error, translator));\n        const builder = app.serviceManager.builder;\n        const build = () => {\n            return builder\n                .build()\n                .then(() => {\n                return showDialog({\n                    title: trans.__('Build Complete'),\n                    body: (React.createElement(\"div\", null,\n                        trans.__('Build successfully completed, reload page?'),\n                        React.createElement(\"br\", null),\n                        trans.__('You will lose any unsaved changes.'))),\n                    buttons: [\n                        Dialog.cancelButton({\n                            label: trans.__('Reload Without Saving'),\n                            actions: ['reload']\n                        }),\n                        Dialog.okButton({ label: trans.__('Save and Reload') })\n                    ],\n                    hasClose: true\n                });\n            })\n                .then(({ button: { accept, actions } }) => {\n                if (accept) {\n                    void app.commands\n                        .execute('docmanager:save')\n                        .then(() => {\n                        router.reload();\n                    })\n                        .catch(err => {\n                        void showErrorMessage(trans.__('Save Failed'), {\n                            message: React.createElement(\"pre\", null, err.message)\n                        });\n                    });\n                }\n                else if (actions.includes('reload')) {\n                    router.reload();\n                }\n            })\n                .catch(err => {\n                void showErrorMessage(trans.__('Build Failed'), {\n                    message: React.createElement(\"pre\", null, err.message)\n                });\n            });\n        };\n        if (builder.isAvailable && builder.shouldCheck) {\n            void builder.getStatus().then(response => {\n                if (response.status === 'building') {\n                    return build();\n                }\n                if (response.status !== 'needed') {\n                    return;\n                }\n                const body = (React.createElement(\"div\", null,\n                    trans.__('JupyterLab build is suggested:'),\n                    React.createElement(\"br\", null),\n                    React.createElement(\"pre\", null, response.message)));\n                void showDialog({\n                    title: trans.__('Build Recommended'),\n                    body,\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.okButton({ label: trans.__('Build') })\n                    ]\n                }).then(result => (result.button.accept ? build() : undefined));\n            });\n        }\n        return updateTreePath;\n    },\n    autoStart: true\n};\n/**\n * Plugin to build the context menu from the settings.\n */\nconst contextMenuPlugin = {\n    id: '@jupyterlab/application-extension:context-menu',\n    description: 'Populates the context menu.',\n    autoStart: true,\n    requires: [ISettingRegistry, ITranslator],\n    activate: (app, settingRegistry, translator) => {\n        const trans = translator.load('jupyterlab');\n        function createMenu(options) {\n            const menu = new RankedMenu({ ...options, commands: app.commands });\n            if (options.label) {\n                menu.title.label = trans.__(options.label);\n            }\n            return menu;\n        }\n        // Load the context menu lately so plugins are loaded.\n        app.started\n            .then(() => {\n            return Private.loadSettingsContextMenu(app.contextMenu, settingRegistry, createMenu, translator);\n        })\n            .catch(reason => {\n            console.error('Failed to load context menu items from settings registry.', reason);\n        });\n    }\n};\n/**\n * Check if the application is dirty before closing the browser tab.\n */\nconst dirty = {\n    id: '@jupyterlab/application-extension:dirty',\n    description: 'Adds safeguard dialog when closing the browser tab with unsaved modifications.',\n    autoStart: true,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${dirty.id} must be activated in JupyterLab.`);\n        }\n        const trans = translator.load('jupyterlab');\n        const message = trans.__('Are you sure you want to exit JupyterLab?\\n\\nAny unsaved changes will be lost.');\n        // The spec for the `beforeunload` event is implemented differently by\n        // the different browser vendors. Consequently, the `event.returnValue`\n        // attribute needs to set in addition to a return value being returned.\n        // For more information, see:\n        // https://developer.mozilla.org/en/docs/Web/Events/beforeunload\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n    }\n};\n/**\n * The default layout restorer provider.\n */\nconst layout = {\n    id: '@jupyterlab/application-extension:layout',\n    description: 'Provides the shell layout restorer.',\n    requires: [IStateDB, ILabShell, ISettingRegistry],\n    optional: [ITranslator],\n    activate: (app, state, labShell, settingRegistry, translator) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n        const first = app.started;\n        const registry = app.commands;\n        const mode = PageConfig.getOption('mode');\n        const restorer = new LayoutRestorer({\n            connector: state,\n            first,\n            registry,\n            mode\n        });\n        settingRegistry\n            .load(shell.id)\n            .then(settings => {\n            var _a, _b;\n            // Add a layer of customization to support app shell mode\n            const customizedLayout = settings.composite['layout'];\n            // Restore the layout.\n            void labShell\n                .restoreLayout(mode, restorer, {\n                'multiple-document': (_a = customizedLayout.multiple) !== null && _a !== void 0 ? _a : {},\n                'single-document': (_b = customizedLayout.single) !== null && _b !== void 0 ? _b : {}\n            })\n                .then(() => {\n                labShell.layoutModified.connect(() => {\n                    void restorer.save(labShell.saveLayout());\n                });\n                settings.changed.connect(onSettingsChanged);\n                Private.activateSidebarSwitcher(app, labShell, settings, trans);\n            });\n        })\n            .catch(reason => {\n            console.error('Fail to load settings for the layout restorer.');\n            console.error(reason);\n        });\n        return restorer;\n        async function onSettingsChanged(settings) {\n            if (!JSONExt.deepEqual(settings.composite['layout'], {\n                single: labShell.userLayout['single-document'],\n                multiple: labShell.userLayout['multiple-document']\n            })) {\n                const result = await showDialog({\n                    title: trans.__('Information'),\n                    body: trans.__('User layout customization has changed. You may need to reload JupyterLab to see the changes.'),\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.okButton({ label: trans.__('Reload') })\n                    ]\n                });\n                if (result.button.accept) {\n                    location.reload();\n                }\n            }\n        }\n    },\n    autoStart: true,\n    provides: ILayoutRestorer\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlab/application-extension:router',\n    description: 'Provides the URL router',\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n    autoStart: true,\n    provides: IRouter\n};\n/**\n * The default tree route resolver plugin.\n */\nconst tree = {\n    id: '@jupyterlab/application-extension:tree-resolver',\n    description: 'Provides the tree route resolver',\n    autoStart: true,\n    requires: [IRouter],\n    provides: JupyterFrontEnd.ITreeResolver,\n    activate: (app, router) => {\n        const { commands } = app;\n        const set = new DisposableSet();\n        const delegate = new PromiseDelegate();\n        const treePattern = new RegExp('/(lab|doc)(/workspaces/[a-zA-Z0-9-_]+)?(/tree/.*)?');\n        set.add(commands.addCommand(CommandIDs.tree, {\n            execute: async (args) => {\n                var _a;\n                if (set.isDisposed) {\n                    return;\n                }\n                const query = URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');\n                const browser = query['file-browser-path'] || '';\n                // Remove the file browser path from the query string.\n                delete query['file-browser-path'];\n                // Clean up artifacts immediately upon routing.\n                set.dispose();\n                delegate.resolve({ browser, file: PageConfig.getOption('treePath') });\n            }\n        }));\n        set.add(router.register({ command: CommandIDs.tree, pattern: treePattern }));\n        // If a route is handled by the router without the tree command being\n        // invoked, resolve to `null` and clean up artifacts.\n        const listener = () => {\n            if (set.isDisposed) {\n                return;\n            }\n            set.dispose();\n            delegate.resolve(null);\n        };\n        router.routed.connect(listener);\n        set.add(new DisposableDelegate(() => {\n            router.routed.disconnect(listener);\n        }));\n        return { paths: delegate.promise };\n    }\n};\n/**\n * The default URL not found extension.\n */\nconst notfound = {\n    id: '@jupyterlab/application-extension:notfound',\n    description: 'Defines the behavior for not found URL (aka route).',\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    activate: (_, paths, router, translator) => {\n        const trans = translator.load('jupyterlab');\n        const bad = paths.urls.notFound;\n        if (!bad) {\n            return;\n        }\n        const base = router.base;\n        const message = trans.__('The path: %1 was not found. JupyterLab redirected to: %2', bad, base);\n        // Change the URL back to the base application URL.\n        router.navigate('');\n        void showErrorMessage(trans.__('Path Not Found'), { message });\n    },\n    autoStart: true\n};\n/**\n * Change the favicon changing based on the busy status;\n */\nconst busy = {\n    id: '@jupyterlab/application-extension:faviconbusy',\n    description: 'Handles the favicon depending on the application status.',\n    requires: [ILabStatus],\n    activate: async (_, status) => {\n        status.busySignal.connect((_, isBusy) => {\n            const favicon = document.querySelector(`link[rel=\"icon\"]${isBusy ? '.idle.favicon' : '.busy.favicon'}`);\n            if (!favicon) {\n                return;\n            }\n            const newFavicon = document.querySelector(`link${isBusy ? '.busy.favicon' : '.idle.favicon'}`);\n            if (!newFavicon) {\n                return;\n            }\n            // If we have the two icons with the special classes, then toggle them.\n            if (favicon !== newFavicon) {\n                favicon.rel = '';\n                newFavicon.rel = 'icon';\n                // Firefox doesn't seem to recognize just changing rel, so we also\n                // reinsert the link into the DOM.\n                newFavicon.parentNode.replaceChild(newFavicon, newFavicon);\n            }\n        });\n    },\n    autoStart: true\n};\n/**\n * The default JupyterLab application shell.\n */\nconst shell = {\n    id: '@jupyterlab/application-extension:shell',\n    description: 'Provides the JupyterLab shell. It has an extended API compared to `app.shell`.',\n    optional: [ISettingRegistry],\n    activate: (app, settingRegistry) => {\n        if (!(app.shell instanceof LabShell)) {\n            throw new Error(`${shell.id} did not find a LabShell instance.`);\n        }\n        if (settingRegistry) {\n            void settingRegistry.load(shell.id).then(settings => {\n                app.shell.updateConfig(settings.composite);\n                settings.changed.connect(() => {\n                    app.shell.updateConfig(settings.composite);\n                });\n            });\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: ILabShell\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlab/application-extension:status',\n    description: 'Provides the application status.',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${status.id} must be activated in JupyterLab.`);\n        }\n        return app.status;\n    },\n    autoStart: true,\n    provides: ILabStatus\n};\n/**\n * The default JupyterLab application-specific information provider.\n *\n * #### Notes\n * This plugin should only be used by plugins that specifically need to access\n * JupyterLab application information, e.g., listing extensions that have been\n * loaded or deferred within JupyterLab.\n */\nconst info = {\n    id: '@jupyterlab/application-extension:info',\n    description: 'Provides the application information.',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${info.id} must be activated in JupyterLab.`);\n        }\n        return app.info;\n    },\n    autoStart: true,\n    provides: JupyterLab.IInfo\n};\n/**\n * The default JupyterLab paths dictionary provider.\n */\nconst paths = {\n    id: '@jupyterlab/application-extension:paths',\n    description: 'Provides the application paths.',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${paths.id} must be activated in JupyterLab.`);\n        }\n        return app.paths;\n    },\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths\n};\n/**\n * The default property inspector provider.\n */\nconst propertyInspector = {\n    id: '@jupyterlab/application-extension:property-inspector',\n    description: 'Provides the property inspector.',\n    autoStart: true,\n    requires: [ILabShell, ITranslator],\n    optional: [ILayoutRestorer],\n    provides: IPropertyInspectorProvider,\n    activate: (app, labshell, translator, restorer) => {\n        const trans = translator.load('jupyterlab');\n        const widget = new SideBarPropertyInspectorProvider({\n            shell: labshell,\n            translator\n        });\n        widget.title.icon = buildIcon;\n        widget.title.caption = trans.__('Property Inspector');\n        widget.id = 'jp-property-inspector';\n        labshell.add(widget, 'right', { rank: 100, type: 'Property Inspector' });\n        app.commands.addCommand(CommandIDs.showPropertyPanel, {\n            label: trans.__('Property Inspector'),\n            execute: () => {\n                labshell.activateById(widget.id);\n            }\n        });\n        if (restorer) {\n            restorer.add(widget, 'jp-property-inspector');\n        }\n        return widget;\n    }\n};\nconst jupyterLogo = {\n    id: '@jupyterlab/application-extension:logo',\n    description: 'Sets the application logo.',\n    autoStart: true,\n    requires: [ILabShell],\n    activate: (app, shell) => {\n        const logo = new Widget();\n        jupyterIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px'\n        });\n        logo.id = 'jp-MainLogo';\n        shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * The simple interface mode switch in the status bar.\n */\nconst modeSwitchPlugin = {\n    id: '@jupyterlab/application-extension:mode-switch',\n    description: 'Adds the interface mode switch',\n    requires: [ILabShell, ITranslator],\n    optional: [IStatusBar, ISettingRegistry],\n    activate: (app, labShell, translator, statusBar, settingRegistry) => {\n        if (statusBar === null) {\n            // Bail early\n            return;\n        }\n        const trans = translator.load('jupyterlab');\n        const modeSwitch = new Switch();\n        modeSwitch.id = 'jp-single-document-mode';\n        modeSwitch.valueChanged.connect((_, args) => {\n            labShell.mode = args.newValue ? 'single-document' : 'multiple-document';\n        });\n        labShell.modeChanged.connect((_, mode) => {\n            modeSwitch.value = mode === 'single-document';\n        });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(shell.id);\n            const updateSettings = (settings) => {\n                const startMode = settings.get('startMode').composite;\n                if (startMode) {\n                    labShell.mode =\n                        startMode === 'single' ? 'single-document' : 'multiple-document';\n                }\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        // Show the current file browser shortcut in its title.\n        const updateModeSwitchTitle = () => {\n            const binding = app.commands.keyBindings.find(b => b.command === 'application:toggle-mode');\n            if (binding) {\n                const ks = binding.keys.map(CommandRegistry.formatKeystroke).join(', ');\n                modeSwitch.caption = trans.__('Simple Interface (%1)', ks);\n            }\n            else {\n                modeSwitch.caption = trans.__('Simple Interface');\n            }\n        };\n        updateModeSwitchTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updateModeSwitchTitle();\n        });\n        modeSwitch.label = trans.__('Simple');\n        statusBar.registerStatusItem(modeSwitchPlugin.id, {\n            item: modeSwitch,\n            align: 'left',\n            rank: -1\n        });\n    },\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    contextMenuPlugin,\n    dirty,\n    main,\n    mainCommands,\n    layout,\n    router,\n    tree,\n    notfound,\n    busy,\n    shell,\n    status,\n    info,\n    modeSwitchPlugin,\n    paths,\n    propertyInspector,\n    jupyterLogo,\n    topbar\n];\nexport default plugins;\nvar Private;\n(function (Private) {\n    async function displayInformation(trans) {\n        const result = await showDialog({\n            title: trans.__('Information'),\n            body: trans.__('Context menu customization has changed. You will need to reload JupyterLab to see the changes.'),\n            buttons: [\n                Dialog.cancelButton(),\n                Dialog.okButton({ label: trans.__('Reload') })\n            ]\n        });\n        if (result.button.accept) {\n            location.reload();\n        }\n    }\n    async function loadSettingsContextMenu(contextMenu, registry, menuFactory, translator) {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const pluginId = contextMenuPlugin.id;\n        let canonical = null;\n        let loaded = {};\n        /**\n         * Populate the plugin's schema defaults.\n         *\n         * We keep track of disabled entries in case the plugin is loaded\n         * after the menu initialization.\n         */\n        function populate(schema) {\n            var _a, _b;\n            loaded = {};\n            const pluginDefaults = Object.keys(registry.plugins)\n                .map(plugin => {\n                var _a, _b;\n                const items = (_b = (_a = registry.plugins[plugin].schema['jupyter.lab.menus']) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : [];\n                loaded[plugin] = items;\n                return items;\n            })\n                .concat([(_b = (_a = schema['jupyter.lab.menus']) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : []])\n                .reduceRight((acc, val) => SettingRegistry.reconcileItems(acc, val, true), []);\n            // Apply default value as last step to take into account overrides.json\n            // The standard default being [] as the plugin must use `jupyter.lab.menus.context`\n            // to define their default value.\n            schema.properties.contextMenu.default = SettingRegistry.reconcileItems(pluginDefaults, schema.properties.contextMenu.default, true)\n                // flatten one level\n                .sort((a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.rank) !== null && _b !== void 0 ? _b : Infinity); });\n        }\n        // Transform the plugin object to return different schema than the default.\n        registry.transform(pluginId, {\n            compose: plugin => {\n                var _a, _b, _c, _d;\n                // Only override the canonical schema the first time.\n                if (!canonical) {\n                    canonical = JSONExt.deepCopy(plugin.schema);\n                    populate(canonical);\n                }\n                const defaults = (_c = (_b = (_a = canonical.properties) === null || _a === void 0 ? void 0 : _a.contextMenu) === null || _b === void 0 ? void 0 : _b.default) !== null && _c !== void 0 ? _c : [];\n                const user = {\n                    ...plugin.data.user,\n                    contextMenu: (_d = plugin.data.user.contextMenu) !== null && _d !== void 0 ? _d : []\n                };\n                const composite = {\n                    ...plugin.data.composite,\n                    contextMenu: SettingRegistry.reconcileItems(defaults, user.contextMenu, false)\n                };\n                plugin.data = { composite, user };\n                return plugin;\n            },\n            fetch: plugin => {\n                // Only override the canonical schema the first time.\n                if (!canonical) {\n                    canonical = JSONExt.deepCopy(plugin.schema);\n                    populate(canonical);\n                }\n                return {\n                    data: plugin.data,\n                    id: plugin.id,\n                    raw: plugin.raw,\n                    schema: canonical,\n                    version: plugin.version\n                };\n            }\n        });\n        // Repopulate the canonical variable after the setting registry has\n        // preloaded all initial plugins.\n        const settings = await registry.load(pluginId);\n        const contextItems = (_a = settings.composite.contextMenu) !== null && _a !== void 0 ? _a : [];\n        // Create menu item for non-disabled element\n        SettingRegistry.filterDisabledItems(contextItems).forEach(item => {\n            MenuFactory.addContextItem({\n                // We have to set the default rank because Lumino is sorting the visible items\n                rank: DEFAULT_CONTEXT_ITEM_RANK,\n                ...item\n            }, contextMenu, menuFactory);\n        });\n        settings.changed.connect(() => {\n            var _a;\n            // As extension may change the context menu through API,\n            // prompt the user to reload if the menu has been updated.\n            const newItems = (_a = settings.composite.contextMenu) !== null && _a !== void 0 ? _a : [];\n            if (!JSONExt.deepEqual(contextItems, newItems)) {\n                void displayInformation(trans);\n            }\n        });\n        registry.pluginChanged.connect(async (sender, plugin) => {\n            var _a, _b, _c, _d;\n            if (plugin !== pluginId) {\n                // If the plugin changed its menu.\n                const oldItems = (_a = loaded[plugin]) !== null && _a !== void 0 ? _a : [];\n                const newItems = (_c = (_b = registry.plugins[plugin].schema['jupyter.lab.menus']) === null || _b === void 0 ? void 0 : _b.context) !== null && _c !== void 0 ? _c : [];\n                if (!JSONExt.deepEqual(oldItems, newItems)) {\n                    if (loaded[plugin]) {\n                        // The plugin has changed, request the user to reload the UI\n                        await displayInformation(trans);\n                    }\n                    else {\n                        // The plugin was not yet loaded when the menu was built => update the menu\n                        loaded[plugin] = JSONExt.deepCopy(newItems);\n                        // Merge potential disabled state\n                        const toAdd = (_d = SettingRegistry.reconcileItems(newItems, contextItems, false, false)) !== null && _d !== void 0 ? _d : [];\n                        SettingRegistry.filterDisabledItems(toAdd).forEach(item => {\n                            MenuFactory.addContextItem({\n                                // We have to set the default rank because Lumino is sorting the visible items\n                                rank: DEFAULT_CONTEXT_ITEM_RANK,\n                                ...item\n                            }, contextMenu, menuFactory);\n                        });\n                    }\n                }\n            }\n        });\n    }\n    Private.loadSettingsContextMenu = loadSettingsContextMenu;\n    function activateSidebarSwitcher(app, labShell, settings, trans) {\n        // Add a command to switch a side panels's side\n        app.commands.addCommand(CommandIDs.switchSidebar, {\n            label: trans.__('Switch Sidebar Side'),\n            execute: () => {\n                // First, try to find the correct panel based on the application\n                // context menu click. Bail if we don't find a sidebar for the widget.\n                const contextNode = app.contextMenuHitTest(node => !!node.dataset.id);\n                if (!contextNode) {\n                    return;\n                }\n                const id = contextNode.dataset['id'];\n                const leftPanel = document.getElementById('jp-left-stack');\n                const node = document.getElementById(id);\n                let newLayout = null;\n                // Move the panel to the other side.\n                if (leftPanel && node && leftPanel.contains(node)) {\n                    const widget = find(labShell.widgets('left'), w => w.id === id);\n                    if (widget) {\n                        newLayout = labShell.move(widget, 'right');\n                        labShell.activateById(widget.id);\n                    }\n                }\n                else {\n                    const widget = find(labShell.widgets('right'), w => w.id === id);\n                    if (widget) {\n                        newLayout = labShell.move(widget, 'left');\n                        labShell.activateById(widget.id);\n                    }\n                }\n                if (newLayout) {\n                    settings\n                        .set('layout', {\n                        single: newLayout['single-document'],\n                        multiple: newLayout['multiple-document']\n                    })\n                        .catch(reason => {\n                        console.error('Failed to save user layout customization.', reason);\n                    });\n                }\n            }\n        });\n        app.commands.commandExecuted.connect((registry, executed) => {\n            if (executed.id === CommandIDs.resetLayout) {\n                settings.remove('layout').catch(reason => {\n                    console.error('Failed to remove user layout customization.', reason);\n                });\n            }\n        });\n    }\n    Private.activateSidebarSwitcher = activateSidebarSwitcher;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["topbar","id","description","autoStart","requires","ISettingRegistry","IToolbarWidgetRegistry","optional","ITranslator","activate","app","settingRegistry","toolbarRegistry","translator","toolbar","Toolbar","setToolbar","createToolbarFactory","nullTranslator","shell","add","rank","DEFAULT_CONTEXT_ITEM_RANK","CommandIDs","activateNextTab","activatePreviousTab","activateNextTabBar","activatePreviousTabBar","close","closeOtherTabs","closeRightTabs","closeAll","setMode","showPropertyPanel","resetLayout","toggleHeader","toggleMode","toggleLeftArea","toggleRightArea","toggleSideTabBar","togglePresentationMode","tree","switchSidebar","mainCommands","ILabShell","ICommandPalette","labShell","palette","commands","trans","load","category","__","addCommand","JupyterFrontEndContextMenu","contextMenu","label","isEnabled","execute","contextMenuWidget","node","contextMenuHitTest","dataset","find","widgets","widget","currentWidget","findTab","area","type","includes","child","children","found","widgetsRightOf","tabArea","_a","layout","saveLayout","mainArea","PageConfig","getOption","dock","main","tabAreaFor","index","findIndex","slice","title","closable","some","_","i","length","forEach","mode","toggleTopInSimpleModeVisibility","isToggled","isTopInSimpleModeVisible","isVisible","leftCollapsed","expandLeft","collapseLeft","activateById","isEmpty","rightCollapsed","expandRight","collapseRight","args","side","toggleSideTabBarVisibility","isSideTabBarVisible","presentationMode","caption","Error","catch","reason","console","error","command","addItem","IRouter","IWindowResolver","JupyterFrontEnd","ITreeResolver","IConnectionLost","provides","ITreePathUpdater","router","resolver","treeResolver","connectionLost","JupyterLab","_docTreePath","_defaultBrowserTreePath","workspace","name","debug","registerPluginErrors","body","map","e","message","join","showErrorMessage","layoutModified","connect","notifyCommandChanged","modeChanged","url","getUrl","path","URLExt","parse","pathname","navigate","skipRouting","setOption","paths","then","currentPathChanged","maybeTreePath","newValue","treePath","ConnectionLost","serviceManager","connectionFailure","manager","builder","build","showDialog","buttons","Dialog","cancelButton","actions","okButton","hasClose","button","accept","reload","err","isAvailable","shouldCheck","getStatus","response","status","result","undefined","contextMenuPlugin","createMenu","options","menu","RankedMenu","started","Private","loadSettingsContextMenu","dirty","window","addEventListener","event","isDirty","returnValue","IStateDB","state","first","registry","restorer","LayoutRestorer","connector","settings","_b","customizedLayout","composite","restoreLayout","multiple","single","save","changed","onSettingsChanged","activateSidebarSwitcher","async","JSONExt","deepEqual","userLayout","location","ILayoutRestorer","IPaths","base","urls","Router","route","set","DisposableSet","delegate","PromiseDelegate","treePattern","RegExp","isDisposed","query","queryStringToObject","search","browser","dispose","resolve","file","register","pattern","listener","routed","DisposableDelegate","disconnect","promise","notfound","bad","notFound","busy","ILabStatus","busySignal","isBusy","favicon","document","querySelector","newFavicon","rel","parentNode","replaceChild","LabShell","updateConfig","info","IInfo","propertyInspector","IPropertyInspectorProvider","labshell","SideBarPropertyInspectorProvider","icon","buildIcon","jupyterLogo","logo","Widget","jupyterIcon","element","container","elementPosition","margin","height","width","modeSwitchPlugin","IStatusBar","statusBar","modeSwitch","Switch","valueChanged","value","loadSettings","updateSettings","startMode","get","Promise","all","restored","updateModeSwitchTitle","binding","keyBindings","b","ks","keys","CommandRegistry","formatKeystroke","keyBindingChanged","registerStatusItem","item","align","displayInformation","menuFactory","pluginId","canonical","loaded","populate","schema","pluginDefaults","Object","plugins","plugin","items","context","concat","reduceRight","acc","val","SettingRegistry","reconcileItems","properties","default","sort","a","Infinity","transform","compose","_c","_d","deepCopy","defaults","user","data","fetch","raw","version","contextItems","filterDisabledItems","MenuFactory","addContextItem","newItems","pluginChanged","sender","oldItems","toAdd","contextNode","leftPanel","getElementById","newLayout","contains","w","move","commandExecuted","executed","remove"],"sourceRoot":""}