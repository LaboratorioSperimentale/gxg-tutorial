{"version":3,"file":"9086.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/handler.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/reconciliator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/default/contextprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/default/kernelprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/manager.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Text } from '@jupyterlab/coreutils';\nimport { Message, MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\n/**\n * A class added to editors that can host a completer.\n */\nconst COMPLETER_ENABLED_CLASS = 'jp-mod-completer-enabled';\n/**\n * A class added to editors that have an active completer.\n */\nconst COMPLETER_ACTIVE_CLASS = 'jp-mod-completer-active';\n/**\n * A completion handler for editors.\n */\nexport class CompletionHandler {\n    /**\n     * Construct a new completion handler for a widget.\n     */\n    constructor(options) {\n        this._editor = null;\n        this._enabled = false;\n        this._isDisposed = false;\n        this._autoCompletion = false;\n        this.completer = options.completer;\n        this.completer.selected.connect(this.onCompletionSelected, this);\n        this.completer.visibilityChanged.connect(this.onVisibilityChanged, this);\n        this._reconciliator = options.reconciliator;\n    }\n    set reconciliator(reconciliator) {\n        this._reconciliator = reconciliator;\n    }\n    /**\n     * The editor used by the completion handler.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(newValue) {\n        if (newValue === this._editor) {\n            return;\n        }\n        let editor = this._editor;\n        // Clean up and disconnect from old editor.\n        if (editor && !editor.isDisposed) {\n            const model = editor.model;\n            editor.host.classList.remove(COMPLETER_ENABLED_CLASS);\n            editor.host.classList.remove(COMPLETER_ACTIVE_CLASS);\n            model.selections.changed.disconnect(this.onSelectionsChanged, this);\n            model.sharedModel.changed.disconnect(this.onTextChanged, this);\n        }\n        // Reset completer state.\n        this.completer.reset();\n        this.completer.editor = newValue;\n        // Update the editor and signal connections.\n        editor = this._editor = newValue;\n        if (editor) {\n            const model = editor.model;\n            this._enabled = false;\n            model.selections.changed.connect(this.onSelectionsChanged, this);\n            model.sharedModel.changed.connect(this.onTextChanged, this);\n            // On initial load, manually check the cursor position.\n            this.onSelectionsChanged();\n        }\n    }\n    /**\n     * Get whether the completion handler is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Enable/disable continuous hinting mode.\n     */\n    set autoCompletion(value) {\n        this._autoCompletion = value;\n    }\n    get autoCompletion() {\n        return this._autoCompletion;\n    }\n    /**\n     * Dispose of the resources used by the handler.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Invoke the handler and launch a completer.\n     */\n    invoke() {\n        MessageLoop.sendMessage(this, CompletionHandler.Msg.InvokeRequest);\n    }\n    /**\n     * Process a message sent to the completion handler.\n     */\n    processMessage(msg) {\n        switch (msg.type) {\n            case CompletionHandler.Msg.InvokeRequest.type:\n                this.onInvokeRequest(msg);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Get the state of the text editor at the given position.\n     */\n    getState(editor, position) {\n        return {\n            text: editor.model.sharedModel.getSource(),\n            line: position.line,\n            column: position.column\n        };\n    }\n    /**\n     * Handle a completion selected signal from the completion widget.\n     */\n    onCompletionSelected(completer, val) {\n        const model = completer.model;\n        const editor = this._editor;\n        if (!editor || !model) {\n            return;\n        }\n        const patch = model.createPatch(val);\n        if (!patch) {\n            return;\n        }\n        const { start, end, value } = patch;\n        const cursorBeforeChange = editor.getOffsetAt(editor.getCursorPosition());\n        // we need to update the shared model in a single transaction so that the undo manager works as expected\n        editor.model.sharedModel.updateSource(start, end, value);\n        if (cursorBeforeChange <= end && cursorBeforeChange >= start) {\n            editor.setCursorPosition(editor.getPositionAt(start + value.length));\n        }\n    }\n    /**\n     * Handle `invoke-request` messages.\n     */\n    onInvokeRequest(msg) {\n        // If there is no completer model, bail.\n        if (!this.completer.model) {\n            return;\n        }\n        // If a completer session is already active, bail.\n        if (this.completer.model.original) {\n            return;\n        }\n        const editor = this._editor;\n        if (editor) {\n            this._makeRequest(editor.getCursorPosition()).catch(reason => {\n                console.warn('Invoke request bailed', reason);\n            });\n        }\n    }\n    /**\n     * Handle selection changed signal from an editor.\n     *\n     * #### Notes\n     * If a sub-class reimplements this method, then that class must either call\n     * its super method or it must take responsibility for adding and removing\n     * the completer completable class to the editor host node.\n     *\n     * Despite the fact that the editor widget adds a class whenever there is a\n     * primary selection, this method checks independently for two reasons:\n     *\n     * 1. The editor widget connects to the same signal to add that class, so\n     *    there is no guarantee that the class will be added before this method\n     *    is invoked so simply checking for the CSS class's existence is not an\n     *    option. Secondarily, checking the editor state should be faster than\n     *    querying the DOM in either case.\n     * 2. Because this method adds a class that indicates whether completer\n     *    functionality ought to be enabled, relying on the behavior of the\n     *    `jp-mod-has-primary-selection` to filter out any editors that have\n     *    a selection means the semantic meaning of `jp-mod-completer-enabled`\n     *    is obscured because there may be cases where the enabled class is added\n     *    even though the completer is not available.\n     */\n    onSelectionsChanged() {\n        const model = this.completer.model;\n        const editor = this._editor;\n        if (!editor) {\n            return;\n        }\n        const host = editor.host;\n        // If there is no model, return.\n        if (!model) {\n            this._enabled = false;\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // If we are currently performing a subset match,\n        // return without resetting the completer.\n        if (model.subsetMatch) {\n            return;\n        }\n        const position = editor.getCursorPosition();\n        const line = editor.getLine(position.line);\n        if (!line) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        const { start, end } = editor.getSelection();\n        // If there is a text selection, return.\n        if (start.column !== end.column || start.line !== end.line) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // If the part of the line before the cursor is white space, return.\n        if (line.slice(0, position.column).match(/^\\s*$/)) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // Enable completion.\n        if (!this._enabled) {\n            this._enabled = true;\n            host.classList.add(COMPLETER_ENABLED_CLASS);\n        }\n        // Dispatch the cursor change.\n        model.handleCursorChange(this.getState(editor, editor.getCursorPosition()));\n    }\n    /**\n     * Handle a text changed signal from an editor.\n     */\n    onTextChanged(str, changed) {\n        const model = this.completer.model;\n        if (!model || !this._enabled) {\n            return;\n        }\n        // If there is a text selection, no completion is allowed.\n        const editor = this.editor;\n        if (!editor) {\n            return;\n        }\n        if (this._autoCompletion &&\n            this._reconciliator\n                .shouldShowContinuousHint &&\n            this._reconciliator.shouldShowContinuousHint(this.completer.isVisible, changed)) {\n            void this._makeRequest(editor.getCursorPosition());\n        }\n        const { start, end } = editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            return;\n        }\n        // Dispatch the text change.\n        model.handleTextChange(this.getState(editor, editor.getCursorPosition()));\n    }\n    /**\n     * Handle a visibility change signal from a completer widget.\n     */\n    onVisibilityChanged(completer) {\n        // Completer is not active.\n        if (completer.isDisposed || completer.isHidden) {\n            if (this._editor) {\n                this._editor.host.classList.remove(COMPLETER_ACTIVE_CLASS);\n                this._editor.focus();\n            }\n            return;\n        }\n        // Completer is active.\n        if (this._editor) {\n            this._editor.host.classList.add(COMPLETER_ACTIVE_CLASS);\n        }\n    }\n    /**\n     * Make a completion request.\n     */\n    _makeRequest(position) {\n        const editor = this.editor;\n        if (!editor) {\n            return Promise.reject(new Error('No active editor'));\n        }\n        const text = editor.model.sharedModel.getSource();\n        const offset = Text.jsIndexToCharIndex(editor.getOffsetAt(position), text);\n        const state = this.getState(editor, position);\n        const request = { text, offset };\n        return this._reconciliator\n            .fetch(request)\n            .then(reply => {\n            if (!reply) {\n                return;\n            }\n            const model = this._updateModel(state, reply.start, reply.end);\n            if (!model) {\n                return;\n            }\n            if (model.setCompletionItems) {\n                model.setCompletionItems(reply.items);\n            }\n        })\n            .catch(p => {\n            /* Fails silently. */\n        });\n    }\n    /**\n     * Updates model with text state and current cursor position.\n     */\n    _updateModel(state, start, end) {\n        const model = this.completer.model;\n        const text = state.text;\n        if (!model) {\n            return null;\n        }\n        // Update the original request.\n        model.original = state;\n        // Update the cursor.\n        model.cursor = {\n            start: Text.charIndexToJsIndex(start, text),\n            end: Text.charIndexToJsIndex(end, text)\n        };\n        return model;\n    }\n}\n/**\n * A namespace for cell completion handler statics.\n */\n(function (CompletionHandler) {\n    /**\n     * A namespace for completion handler messages.\n     */\n    let Msg;\n    (function (Msg) {\n        /**\n         * A singleton `'invoke-request'` message.\n         */\n        Msg.InvokeRequest = new Message('invoke-request');\n    })(Msg = CompletionHandler.Msg || (CompletionHandler.Msg = {}));\n})(CompletionHandler || (CompletionHandler = {}));\n//# sourceMappingURL=handler.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { StringExt } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * Escape HTML by native means of the browser.\n */\nfunction escapeHTML(text) {\n    const node = document.createElement('span');\n    node.textContent = text;\n    return node.innerHTML;\n}\n/**\n * An implementation of a completer model.\n */\nexport class CompleterModel {\n    constructor() {\n        this._current = null;\n        this._cursor = null;\n        this._isDisposed = false;\n        this._completionItems = [];\n        this._processedItemsCache = null;\n        this._original = null;\n        this._query = '';\n        this._subsetMatch = false;\n        this._typeMap = {};\n        this._orderedTypes = [];\n        this._stateChanged = new Signal(this);\n        this._queryChanged = new Signal(this);\n        /**\n         * A counter to cancel ongoing `resolveItem` call.\n         */\n        this._resolvingItem = 0;\n    }\n    /**\n     * A signal emitted when state of the completer menu changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when query string changes (at invocation, or as user types).\n     */\n    get queryChanged() {\n        return this._queryChanged;\n    }\n    /**\n     * The original completion request details.\n     */\n    get original() {\n        return this._original;\n    }\n    set original(newValue) {\n        const unchanged = this._original === newValue ||\n            (this._original &&\n                newValue &&\n                JSONExt.deepEqual(newValue, this._original));\n        if (unchanged) {\n            return;\n        }\n        this._reset();\n        // Set both the current and original to the same value when original is set.\n        this._current = this._original = newValue;\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The current text change details.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(newValue) {\n        const unchanged = this._current === newValue ||\n            (this._current && newValue && JSONExt.deepEqual(newValue, this._current));\n        if (unchanged) {\n            return;\n        }\n        const original = this._original;\n        // Original request must always be set before a text change. If it isn't\n        // the model fails silently.\n        if (!original) {\n            return;\n        }\n        const cursor = this._cursor;\n        // Cursor must always be set before a text change. This happens\n        // automatically in the completer handler, but since `current` is a public\n        // attribute, this defensive check is necessary.\n        if (!cursor) {\n            return;\n        }\n        const current = (this._current = newValue);\n        if (!current) {\n            this._stateChanged.emit(undefined);\n            return;\n        }\n        const originalLine = original.text.split('\\n')[original.line];\n        const currentLine = current.text.split('\\n')[current.line];\n        // If the text change means that the original start point has been preceded,\n        // then the completion is no longer valid and should be reset.\n        if (!this._subsetMatch && currentLine.length < originalLine.length) {\n            this.reset(true);\n            return;\n        }\n        const { start, end } = cursor;\n        // Clip the front of the current line.\n        let query = current.text.substring(start);\n        // Clip the back of the current line by calculating the end of the original.\n        const ending = original.text.substring(end);\n        query = query.substring(0, query.lastIndexOf(ending));\n        this._query = query;\n        this._processedItemsCache = null;\n        this._queryChanged.emit({ newValue: this._query, origin: 'editorUpdate' });\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The cursor details that the API has used to return matching options.\n     */\n    get cursor() {\n        return this._cursor;\n    }\n    set cursor(newValue) {\n        // Original request must always be set before a cursor change. If it isn't\n        // the model fails silently.\n        if (!this.original) {\n            return;\n        }\n        this._cursor = newValue;\n    }\n    /**\n     * The query against which items are filtered.\n     */\n    get query() {\n        return this._query;\n    }\n    set query(newValue) {\n        this._query = newValue;\n        this._processedItemsCache = null;\n        this._queryChanged.emit({ newValue: this._query, origin: 'setter' });\n    }\n    /**\n     * A flag that is true when the model value was modified by a subset match.\n     */\n    get subsetMatch() {\n        return this._subsetMatch;\n    }\n    set subsetMatch(newValue) {\n        this._subsetMatch = newValue;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * The list of visible items in the completer menu.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    completionItems() {\n        if (!this._processedItemsCache) {\n            let query = this._query;\n            if (query) {\n                this._processedItemsCache = this._markup(query);\n            }\n            else {\n                this._processedItemsCache = this._completionItems.map(item => {\n                    return this._escapeItemLabel(item);\n                });\n            }\n        }\n        return this._processedItemsCache;\n    }\n    /**\n     * Set the list of visible items in the completer menu, and append any\n     * new types to KNOWN_TYPES.\n     */\n    setCompletionItems(newValue) {\n        if (JSONExt.deepEqual(newValue, this._completionItems)) {\n            return;\n        }\n        this._completionItems = newValue;\n        this._orderedTypes = Private.findOrderedCompletionItemTypes(this._completionItems);\n        this._processedItemsCache = null;\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The map from identifiers (a.b) to types (function, module, class, instance,\n     * etc.).\n     *\n     * #### Notes\n     * A type map is currently only provided by the latest IPython kernel using\n     * the completer reply metadata field `_jupyter_types_experimental`. The\n     * values are completely up to the kernel.\n     *\n     */\n    typeMap() {\n        return this._typeMap;\n    }\n    /**\n     * An ordered list of all the known types in the typeMap.\n     *\n     * #### Notes\n     * To visually encode the types of the completer matches, we assemble an\n     * ordered list. This list begins with:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * and then has any remaining types listed alphabetically. This will give\n     * reliable visual encoding for these known types, but allow kernels to\n     * provide new types.\n     */\n    orderedTypes() {\n        return this._orderedTypes;\n    }\n    /**\n     * Handle a cursor change.\n     */\n    handleCursorChange(change) {\n        // If there is no active completion, return.\n        if (!this._original) {\n            return;\n        }\n        const { column, line } = change;\n        const { current, original } = this;\n        if (!original) {\n            return;\n        }\n        // If a cursor change results in a the cursor being on a different line\n        // than the original request, cancel.\n        if (line !== original.line) {\n            this.reset(true);\n            return;\n        }\n        // If a cursor change results in the cursor being set to a position that\n        // precedes the original column, cancel.\n        if (column < original.column) {\n            this.reset(true);\n            return;\n        }\n        const { cursor } = this;\n        if (!cursor || !current) {\n            return;\n        }\n        // If a cursor change results in the cursor being set to a position beyond\n        // the end of the area that would be affected by completion, cancel.\n        const cursorDelta = cursor.end - cursor.start;\n        const originalLine = original.text.split('\\n')[original.line];\n        const currentLine = current.text.split('\\n')[current.line];\n        const inputDelta = currentLine.length - originalLine.length;\n        if (column > original.column + cursorDelta + inputDelta) {\n            this.reset(true);\n            return;\n        }\n    }\n    /**\n     * Handle a text change.\n     */\n    handleTextChange(change) {\n        const original = this._original;\n        // If there is no active completion, return.\n        if (!original) {\n            return;\n        }\n        const { text, column, line } = change;\n        const last = text.split('\\n')[line][column - 1];\n        // If last character entered is not whitespace or if the change column is\n        // greater than or equal to the original column, update completion.\n        if ((last && last.match(/\\S/)) || change.column >= original.column) {\n            this.current = change;\n            return;\n        }\n        // If final character is whitespace, reset completion.\n        this.reset(false);\n    }\n    /**\n     * Create a resolved patch between the original state and a patch string.\n     *\n     * @param patch - The patch string to apply to the original value.\n     *\n     * @returns A patched text change or undefined if original value did not exist.\n     */\n    createPatch(patch) {\n        const original = this._original;\n        const cursor = this._cursor;\n        const current = this._current;\n        if (!original || !cursor || !current) {\n            return undefined;\n        }\n        let { start, end } = cursor;\n        // Also include any filtering/additional-typing that has occurred\n        // since the completion request in the patched length.\n        end = end + (current.text.length - original.text.length);\n        return { start, end, value: patch };\n    }\n    /**\n     * Reset the state of the model and emit a state change signal.\n     *\n     * @param hard - Reset even if a subset match is in progress.\n     */\n    reset(hard = false) {\n        // When the completer detects a common subset prefix for all options,\n        // it updates the model and sets the model source to that value, triggering\n        // a reset. Unless explicitly a hard reset, this should be ignored.\n        if (!hard && this._subsetMatch) {\n            return;\n        }\n        this._reset();\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * Check if CompletionItem matches against query.\n     * Highlight matching prefix by adding <mark> tags.\n     */\n    _markup(query) {\n        var _a;\n        const items = this._completionItems;\n        let results = [];\n        for (let item of items) {\n            // See if label matches query string\n            // With ICompletionItems, the label may include parameters,\n            // so we exclude them from the matcher.\n            // e.g. Given label `foo(b, a, r)` and query `bar`,\n            // don't count parameters, `b`, `a`, and `r` as matches.\n            const index = item.label.indexOf('(');\n            const text = index > -1 ? item.label.substring(0, index) : item.label;\n            const match = StringExt.matchSumOfSquares(escapeHTML(text), query);\n            // Filter non-matching items.\n            if (match) {\n                // Highlight label text if there's a match\n                let marked = StringExt.highlight(escapeHTML(item.label), match.indices, Private.mark);\n                // Use `Object.assign` to evaluate getters.\n                const highlightedItem = Object.assign({}, item);\n                highlightedItem.label = marked.join('');\n                highlightedItem.insertText = (_a = item.insertText) !== null && _a !== void 0 ? _a : item.label;\n                results.push({\n                    item: highlightedItem,\n                    score: match.score\n                });\n            }\n        }\n        results.sort(Private.scoreCmp);\n        // Extract only the item (dropping the extra score attribute to not leak\n        // implementation details to JavaScript callers.\n        return results.map(match => match.item);\n    }\n    /**\n     * Lazy load missing data of item at `activeIndex`.\n     * @param {number} activeIndex - index of item\n     * @return Return `undefined` if the completion item with `activeIndex` index can not be found.\n     * Return a promise of `null` if another `resolveItem` is called (but still updates the\n     * underlying completion item with resolved data). Otherwise return the\n     * promise of resolved completion item.\n     */\n    resolveItem(activeIndex) {\n        const current = ++this._resolvingItem;\n        let resolvedItem;\n        if (!this.completionItems) {\n            return undefined;\n        }\n        let completionItems = this._completionItems;\n        if (!completionItems || !completionItems[activeIndex]) {\n            return undefined;\n        }\n        let completionItem = completionItems[activeIndex];\n        if (completionItem.resolve) {\n            let patch;\n            if (completionItem.insertText) {\n                patch = this.createPatch(completionItem.insertText);\n            }\n            resolvedItem = completionItem.resolve(patch);\n        }\n        else {\n            resolvedItem = Promise.resolve(completionItem);\n        }\n        return resolvedItem\n            .then(activeItem => {\n            // Escape the label it in place\n            this._escapeItemLabel(activeItem, true);\n            Object.keys(activeItem).forEach((key) => {\n                completionItem[key] = activeItem[key];\n            });\n            completionItem.resolve = undefined;\n            if (current !== this._resolvingItem) {\n                return Promise.resolve(null);\n            }\n            return activeItem;\n        })\n            .catch(e => {\n            console.error(e);\n            // Failed to resolve missing data, return the original item.\n            return Promise.resolve(completionItem);\n        });\n    }\n    /**\n     * Escape item label, storing the original label and adding `insertText` if needed.\n     * If escaping changes label creates a new item unless `inplace` is true.\n     */\n    _escapeItemLabel(item, inplace = false) {\n        var _a;\n        const escapedLabel = escapeHTML(item.label);\n        // If there was no insert text, use the original (unescaped) label.\n        if (escapedLabel !== item.label) {\n            const newItem = inplace ? item : Object.assign({}, item);\n            newItem.insertText = (_a = item.insertText) !== null && _a !== void 0 ? _a : item.label;\n            newItem.label = escapedLabel;\n            return newItem;\n        }\n        return item;\n    }\n    /**\n     * Reset the state of the model.\n     */\n    _reset() {\n        const hadQuery = this._query;\n        this._current = null;\n        this._cursor = null;\n        this._completionItems = [];\n        this._original = null;\n        this._query = '';\n        this._processedItemsCache = null;\n        this._subsetMatch = false;\n        this._typeMap = {};\n        this._orderedTypes = [];\n        if (hadQuery) {\n            this._queryChanged.emit({ newValue: this._query, origin: 'reset' });\n        }\n    }\n}\n/**\n * A namespace for completer model private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The list of known type annotations of completer matches.\n     */\n    const KNOWN_TYPES = ['function', 'instance', 'class', 'module', 'keyword'];\n    /**\n     * The map of known type annotations of completer matches.\n     */\n    const KNOWN_MAP = KNOWN_TYPES.reduce((acc, type) => {\n        acc[type] = null;\n        return acc;\n    }, {});\n    /**\n     * Mark a highlighted chunk of text.\n     */\n    function mark(value) {\n        return `<mark>${value}</mark>`;\n    }\n    Private.mark = mark;\n    /**\n     * A sort comparison function for item match scores.\n     *\n     * #### Notes\n     * This orders the items first based on score (lower is better), then\n     * by locale order of the item text.\n     */\n    function scoreCmp(a, b) {\n        var _a, _b, _c;\n        const delta = a.score - b.score;\n        if (delta !== 0) {\n            return delta;\n        }\n        return (_c = (_a = a.item.insertText) === null || _a === void 0 ? void 0 : _a.localeCompare((_b = b.item.insertText) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : 0;\n    }\n    Private.scoreCmp = scoreCmp;\n    /**\n     * Compute a reliably ordered list of types for ICompletionItems.\n     *\n     * #### Notes\n     * The resulting list always begins with the known types:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * followed by other types in alphabetical order.\n     *\n     */\n    function findOrderedCompletionItemTypes(items) {\n        const newTypeSet = new Set();\n        items.forEach(item => {\n            if (item.type &&\n                !KNOWN_TYPES.includes(item.type) &&\n                !newTypeSet.has(item.type)) {\n                newTypeSet.add(item.type);\n            }\n        });\n        const newTypes = Array.from(newTypeSet);\n        newTypes.sort((a, b) => a.localeCompare(b));\n        return KNOWN_TYPES.concat(newTypes);\n    }\n    Private.findOrderedCompletionItemTypes = findOrderedCompletionItemTypes;\n    /**\n     * Compute a reliably ordered list of types.\n     *\n     * #### Notes\n     * The resulting list always begins with the known types:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * followed by other types in alphabetical order.\n     */\n    function findOrderedTypes(typeMap) {\n        const filtered = Object.keys(typeMap)\n            .map(key => typeMap[key])\n            .filter((value) => !!value && !(value in KNOWN_MAP))\n            .sort((a, b) => a.localeCompare(b));\n        return KNOWN_TYPES.concat(filtered);\n    }\n    Private.findOrderedTypes = findOrderedTypes;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Sanitizer } from '@jupyterlab/apputils';\nimport { renderText } from '@jupyterlab/rendermime';\nimport { HoverBox } from '@jupyterlab/ui-components';\nimport { ElementExt } from '@lumino/domutils';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to completer menu items.\n */\nconst ITEM_CLASS = 'jp-Completer-item';\n/**\n * The class name added to an active completer menu item.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The class used by item listing which determines the height of the completer.\n */\nconst LIST_CLASS = 'jp-Completer-list';\n/**\n * Class of the documentation panel.\n */\nconst DOC_PANEL_CLASS = 'jp-Completer-docpanel';\n/**\n * A flag to indicate that event handlers are caught in the capture phase.\n */\nconst USE_CAPTURE = true;\n/**\n * The number of colors defined for the completer type annotations.\n * These are listed in completer/style/index.css#102-152.\n */\nconst N_COLORS = 10;\n/**\n * A widget that enables text completion.\n *\n * #### Notes\n * The completer is intended to be absolutely positioned on the\n * page and hover over any other content, so it should be attached directly\n * to `document.body`, or a node that is the full size of `document.body`.\n * Attaching it to other nodes may incorrectly locate the completer.\n */\nexport class Completer extends Widget {\n    /**\n     * Construct a text completer menu widget.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super({ node: document.createElement('div') });\n        this._activeIndex = 0;\n        this._editor = null;\n        this._model = null;\n        this._selected = new Signal(this);\n        this._visibilityChanged = new Signal(this);\n        this._indexChanged = new Signal(this);\n        this._lastSubsetMatch = '';\n        this._geometryLock = false;\n        /**\n         * Increasing this counter invalidates previous request to save geometry cache in animation callback.\n         */\n        this._geometryCounter = 0;\n        this._docPanelExpanded = false;\n        this._renderCounter = 0;\n        this.sanitizer = (_a = options.sanitizer) !== null && _a !== void 0 ? _a : new Sanitizer();\n        this._defaultRenderer = Completer.getDefaultRenderer(this.sanitizer);\n        this._renderer = (_b = options.renderer) !== null && _b !== void 0 ? _b : this._defaultRenderer;\n        this.model = (_c = options.model) !== null && _c !== void 0 ? _c : null;\n        this.editor = (_d = options.editor) !== null && _d !== void 0 ? _d : null;\n        this.addClass('jp-Completer');\n        this._updateConstraints();\n    }\n    /**\n     * Cache style constraints from CSS.\n     */\n    _updateConstraints() {\n        const tempNode = document.createElement('div');\n        tempNode.classList.add(LIST_CLASS);\n        tempNode.style.visibility = 'hidden';\n        tempNode.style.overflowY = 'scroll';\n        document.body.appendChild(tempNode);\n        const computedStyle = window.getComputedStyle(tempNode);\n        this._maxHeight = parseInt(computedStyle.maxHeight, 10);\n        this._minHeight = parseInt(computedStyle.minHeight, 10);\n        this._scrollbarWidth = tempNode.offsetWidth - tempNode.clientWidth;\n        document.body.removeChild(tempNode);\n        const tempDocPanel = document.createElement('div');\n        tempDocPanel.classList.add(DOC_PANEL_CLASS);\n        this._docPanelWidth = Private.measureSize(tempDocPanel, 'inline-block').width;\n    }\n    /**\n     * The active index.\n     */\n    get activeIndex() {\n        return this._activeIndex;\n    }\n    /**\n     * The editor used by the completion widget.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(newValue) {\n        this._editor = newValue;\n    }\n    /**\n     * A signal emitted when a selection is made from the completer menu.\n     */\n    get selected() {\n        return this._selected;\n    }\n    /**\n     * A signal emitted when the completer widget's visibility changes.\n     *\n     * #### Notes\n     * This signal is useful when there are multiple floating widgets that may\n     * contend with the same space and ought to be mutually exclusive.\n     */\n    get visibilityChanged() {\n        return this._visibilityChanged;\n    }\n    /**\n     * A signal emitted when the active index changes.\n     */\n    get indexChanged() {\n        return this._indexChanged;\n    }\n    /**\n     * The model used by the completer widget.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(model) {\n        if ((!model && !this._model) || model === this._model) {\n            return;\n        }\n        if (this._model) {\n            this._model.stateChanged.disconnect(this.onModelStateChanged, this);\n            this._model.queryChanged.disconnect(this.onModelQueryChanged, this);\n        }\n        this._model = model;\n        if (this._model) {\n            this._model.stateChanged.connect(this.onModelStateChanged, this);\n            this._model.queryChanged.connect(this.onModelQueryChanged, this);\n        }\n    }\n    /**\n     * Enable/disable the document panel.\n     */\n    set showDocsPanel(showDoc) {\n        this._showDoc = showDoc;\n    }\n    get showDocsPanel() {\n        return this._showDoc;\n    }\n    /**\n     * Dispose of the resources held by the completer widget.\n     */\n    dispose() {\n        this._sizeCache = undefined;\n        this._model = null;\n        super.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeydown(event);\n                break;\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Reset the widget.\n     */\n    reset() {\n        this._activeIndex = 0;\n        this._lastSubsetMatch = '';\n        if (this._model) {\n            this._model.reset(true);\n        }\n        // Clear size cache.\n        this._sizeCache = undefined;\n        this.node.scrollTop = 0;\n    }\n    /**\n     * Emit the selected signal for the current active item and reset.\n     */\n    selectActive() {\n        const active = this.node.querySelector(`.${ACTIVE_CLASS}`);\n        if (!active) {\n            this.reset();\n            return;\n        }\n        this._selected.emit(active.getAttribute('data-value'));\n        this.reset();\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        document.addEventListener('keydown', this, USE_CAPTURE);\n        document.addEventListener('mousedown', this, USE_CAPTURE);\n        document.addEventListener('scroll', this, USE_CAPTURE);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        document.removeEventListener('keydown', this, USE_CAPTURE);\n        document.removeEventListener('mousedown', this, USE_CAPTURE);\n        document.removeEventListener('scroll', this, USE_CAPTURE);\n    }\n    /**\n     * Handle model state changes.\n     */\n    onModelStateChanged() {\n        if (this.isAttached) {\n            this._activeIndex = 0;\n            this._indexChanged.emit(this._activeIndex);\n            this.update();\n        }\n    }\n    /**\n     * Handle model query changes.\n     */\n    onModelQueryChanged(model, queryChange) {\n        // If query was changed by the user typing, the filtered down items\n        // may no longer reach/exceed the maxHeight of the completer widget,\n        // hence size needs to be recalculated.\n        if (this._sizeCache && queryChange.origin === 'editorUpdate') {\n            const newItems = model.completionItems();\n            const oldItems = this._sizeCache.items;\n            // Only reset size if the number of items changed, or the longest item changed.\n            const oldWidest = oldItems[this._findWidestItemIndex(oldItems)];\n            const newWidest = newItems[this._findWidestItemIndex(newItems)];\n            const heuristic = this._getPreferredItemWidthHeuristic();\n            if (newItems.length !== this._sizeCache.items.length ||\n                heuristic(oldWidest) !== heuristic(newWidest)) {\n                this._sizeCache = undefined;\n            }\n        }\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        var _a;\n        const model = this._model;\n        if (!model) {\n            return;\n        }\n        // If this is the first time the current completer session has loaded,\n        // populate any initial subset match. This is being done before node\n        // gets rendered to avoid rendering it twice.\n        if (!model.query) {\n            this._populateSubset();\n        }\n        let items = model.completionItems();\n        // If there are no items, reset and bail.\n        if (!items.length) {\n            if (!this.isHidden) {\n                this.reset();\n                this.hide();\n                this._visibilityChanged.emit(undefined);\n            }\n            return;\n        }\n        // Update constraints before any DOM modifications\n        this._updateConstraints();\n        // Do not trigger any geometry updates from async code when in lock.\n        this._geometryLock = true;\n        const node = this._createCompleterNode(model, items);\n        let active = node.querySelectorAll(`.${ITEM_CLASS}`)[this._activeIndex];\n        active.classList.add(ACTIVE_CLASS);\n        // Add the documentation panel\n        if (this._showDoc) {\n            let docPanel = document.createElement('div');\n            docPanel.className = DOC_PANEL_CLASS;\n            this._docPanel = docPanel;\n            node.appendChild(docPanel);\n            this._docPanelExpanded = false;\n        }\n        const resolvedItem = (_a = this.model) === null || _a === void 0 ? void 0 : _a.resolveItem(this._activeIndex);\n        this._updateDocPanel(resolvedItem);\n        if (this.isHidden) {\n            this.show();\n            this._setGeometry();\n            this._visibilityChanged.emit(undefined);\n        }\n        else {\n            this._setGeometry();\n        }\n        this._geometryLock = false;\n    }\n    /**\n     * Get cached dimensions of the completer box.\n     */\n    get sizeCache() {\n        if (!this._sizeCache) {\n            return;\n        }\n        return {\n            width: this._sizeCache.width,\n            height: this._sizeCache.height\n        };\n    }\n    _createCompleterNode(model, items) {\n        const current = ++this._renderCounter;\n        // Clear the node.\n        let node = this.node;\n        node.textContent = '';\n        // Compute an ordered list of all the types in the typeMap, this is computed\n        // once by the model each time new data arrives for efficiency.\n        let orderedTypes = model.orderedTypes();\n        // Populate the completer items.\n        let ul = document.createElement('ul');\n        ul.className = LIST_CLASS;\n        // Add first N items to fill the first \"page\" assuming that the completer\n        // would reach its maximum allowed height.\n        const first = this._renderer.createCompletionItemNode(items[0], orderedTypes);\n        const renderedItems = [first];\n        const firstItemSize = Private.measureSize(first, 'inline-grid');\n        const pageSize = Math.max(Math.ceil(this._maxHeight / firstItemSize.height), 5);\n        // We add one item in case if height heuristic is inacurate.\n        const toRenderImmediately = Math.min(pageSize + 1, items.length);\n        const start = performance.now();\n        for (let i = 1; i < toRenderImmediately; i++) {\n            const li = this._renderer.createCompletionItemNode(items[i], orderedTypes);\n            renderedItems.push(li);\n        }\n        for (const li of renderedItems) {\n            ul.appendChild(li);\n        }\n        if (pageSize < items.length) {\n            // If the first \"page\" is completely filled, we can pre-calculate size:\n            //  - height will equal maximum allowed height,\n            //  - width will be estimated from the widest item.\n            // If the page size is larger than the number of items, then there are\n            // few items and the benefit from pre-computing the size is negligible.\n            const widestItemIndex = this._findWidestItemIndex(items);\n            const widestItem = widestItemIndex < renderedItems.length\n                ? renderedItems[widestItemIndex]\n                : this._renderer.createCompletionItemNode(items[widestItemIndex], orderedTypes);\n            // The node needs to be cloned to avoid side-effect of detaching it.\n            const widestItemSize = Private.measureSize(widestItem.cloneNode(true), 'inline-grid');\n            this._sizeCache = {\n                height: this._maxHeight,\n                width: widestItemSize.width + this._scrollbarWidth,\n                items: items\n            };\n        }\n        if (toRenderImmediately < items.length) {\n            // Render remaining items on idle in subsequent animation frames,\n            // in chunks of size such that each frame would take about 16ms\n            // allowing for 4ms of overhead, but keep the chunks no smaller\n            // than 5 items at a time.\n            const timePerItem = (performance.now() - start) / toRenderImmediately;\n            const chunkSize = Math.max(5, Math.floor(12 / timePerItem));\n            let alreadyRendered = toRenderImmediately;\n            let previousChunkFinal = renderedItems[renderedItems.length - 1];\n            const renderChunk = () => {\n                if (alreadyRendered >= items.length) {\n                    return;\n                }\n                // Add a filler so that the list with partially rendered items has the total\n                // height equal to the (predicted) final height to avoid scrollbar jitter.\n                const predictedMissingHeight = firstItemSize.height * (items.length - alreadyRendered);\n                previousChunkFinal.style.marginBottom = `${predictedMissingHeight}px`;\n                requestAnimationFrame(() => {\n                    if (current != this._renderCounter) {\n                        // Bail if rendering afresh was requested in the meantime.\n                        return;\n                    }\n                    previousChunkFinal.style.marginBottom = '';\n                    const limit = Math.min(items.length, alreadyRendered + chunkSize);\n                    for (let i = alreadyRendered; i < limit; i++) {\n                        const li = this._renderer.createCompletionItemNode(items[i], orderedTypes);\n                        ul.appendChild(li);\n                        previousChunkFinal = li;\n                    }\n                    alreadyRendered = limit;\n                    renderChunk();\n                });\n            };\n            renderChunk();\n        }\n        node.appendChild(ul);\n        return node;\n    }\n    /**\n     * Use preferred heuristic to find the index of the widest item.\n     */\n    _findWidestItemIndex(items) {\n        const widthHeuristic = this._getPreferredItemWidthHeuristic();\n        const widthHeuristics = items.map(widthHeuristic);\n        return widthHeuristics.indexOf(Math.max(...widthHeuristics));\n    }\n    /**\n     * Get item width heuristic function from renderer if available,\n     * or the default one otherwise.\n     */\n    _getPreferredItemWidthHeuristic() {\n        return this._renderer.itemWidthHeuristic\n            ? this._renderer.itemWidthHeuristic.bind(this._renderer)\n            : this._defaultRenderer.itemWidthHeuristic.bind(this._defaultRenderer);\n    }\n    /**\n     * Cycle through the available completer items.\n     *\n     * #### Notes\n     * When the user cycles all the way `down` to the last index, subsequent\n     * `down` cycles will cycle to the first index. When the user cycles `up` to\n     * the first item, subsequent `up` cycles will cycle to the last index.\n     */\n    _cycle(direction) {\n        var _a;\n        const items = this.node.querySelectorAll(`.${ITEM_CLASS}`);\n        const index = this._activeIndex;\n        const last = items.length - 1;\n        let active = this.node.querySelector(`.${ACTIVE_CLASS}`);\n        active.classList.remove(ACTIVE_CLASS);\n        switch (direction) {\n            case 'up':\n                this._activeIndex = index === 0 ? last : index - 1;\n                break;\n            case 'down':\n                this._activeIndex = index < last ? index + 1 : 0;\n                break;\n            case 'pageUp':\n            case 'pageDown': {\n                // Measure the number of items on a page and clamp to the list length.\n                const container = this.node.getBoundingClientRect();\n                const current = active.getBoundingClientRect();\n                const page = Math.floor(container.height / current.height);\n                const sign = direction === 'pageUp' ? -1 : 1;\n                this._activeIndex = Math.min(Math.max(0, index + sign * page), last);\n                break;\n            }\n        }\n        active = items[this._activeIndex];\n        active.classList.add(ACTIVE_CLASS);\n        let completionList = this.node.querySelector(`.${LIST_CLASS}`);\n        ElementExt.scrollIntoViewIfNeeded(completionList, active);\n        this._indexChanged.emit(this._activeIndex);\n        const resolvedItem = (_a = this.model) === null || _a === void 0 ? void 0 : _a.resolveItem(this._activeIndex);\n        this._updateDocPanel(resolvedItem);\n    }\n    /**\n     * Handle keydown events for the widget.\n     */\n    _evtKeydown(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        if (!this._editor.host.contains(event.target)) {\n            this.reset();\n            return;\n        }\n        switch (event.keyCode) {\n            case 9: {\n                // Tab key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                const model = this._model;\n                if (!model) {\n                    return;\n                }\n                // Autoinsert single completions on manual request (tab)\n                const items = model.completionItems();\n                if (items && items.length === 1) {\n                    this._selected.emit(items[0].insertText || items[0].label);\n                    this.reset();\n                    return;\n                }\n                const populated = this._populateSubset();\n                // If the common subset was found and set on `query`,\n                // or if there is a `query` in the initialization options,\n                // then emit a completion signal with that `query` (=subset match),\n                // but only if the query has actually changed.\n                // See: https://github.com/jupyterlab/jupyterlab/issues/10439#issuecomment-875189540\n                if (model.query && model.query !== this._lastSubsetMatch) {\n                    model.subsetMatch = true;\n                    this._selected.emit(model.query);\n                    model.subsetMatch = false;\n                    this._lastSubsetMatch = model.query;\n                }\n                // If the query changed, update rendering of the options.\n                if (populated) {\n                    this.update();\n                }\n                this._cycle(event.shiftKey ? 'up' : 'down');\n                return;\n            }\n            case 27: // Esc key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                this.reset();\n                return;\n            case 33: // PageUp\n            case 34: // PageDown\n            case 38: // Up arrow key\n            case 40: {\n                // Down arrow key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                const cycle = Private.keyCodeMap[event.keyCode];\n                this._cycle(cycle);\n                return;\n            }\n            default:\n                return;\n        }\n    }\n    /**\n     * Handle mousedown events for the widget.\n     */\n    _evtMousedown(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        if (Private.nonstandardClick(event)) {\n            this.reset();\n            return;\n        }\n        let target = event.target;\n        while (target !== document.documentElement) {\n            // If the user has made a selection, emit its value and reset the widget.\n            if (target.classList.contains(ITEM_CLASS)) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                this._selected.emit(target.getAttribute('data-value'));\n                this.reset();\n                return;\n            }\n            // If the mouse event happened anywhere else in the widget, bail.\n            if (target === this.node) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                return;\n            }\n            target = target.parentElement;\n        }\n        this.reset();\n    }\n    /**\n     * Handle scroll events for the widget\n     */\n    _evtScroll(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        const { node } = this;\n        // All scrolls except scrolls in the actual hover box node may cause the\n        // referent editor that anchors the node to move, so the only scroll events\n        // that can safely be ignored are ones that happen inside the hovering node.\n        if (node.contains(event.target)) {\n            return;\n        }\n        // Set the geometry of the node asynchronously.\n        requestAnimationFrame(() => {\n            this._setGeometry();\n        });\n    }\n    /**\n     * Populate the completer up to the longest initial subset of items.\n     *\n     * @returns `true` if a subset match was found and populated.\n     */\n    _populateSubset() {\n        const { model } = this;\n        if (!model) {\n            return false;\n        }\n        const items = model.completionItems();\n        const subset = Private.commonSubset(items.map(item => item.insertText || item.label));\n        const { query } = model;\n        // If a common subset exists and it is not the current query, highlight it.\n        if (subset && subset !== query && subset.indexOf(query) === 0) {\n            model.query = subset;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Set the visible dimensions of the widget.\n     */\n    _setGeometry() {\n        const { node } = this;\n        const model = this._model;\n        const editor = this._editor;\n        // This is an overly defensive test: `cursor` will always exist if\n        // `original` exists, except in contrived tests. But since it is possible\n        // to generate a runtime error, the check occurs here.\n        if (!editor || !model || !model.original || !model.cursor) {\n            return;\n        }\n        const start = model.cursor.start;\n        const position = editor.getPositionAt(start);\n        const anchor = editor.getCoordinateForPosition(position);\n        const style = window.getComputedStyle(node);\n        const borderLeft = parseInt(style.borderLeftWidth, 10) || 0;\n        const paddingLeft = parseInt(style.paddingLeft, 10) || 0;\n        // When the editor is attached to the main area, contain the completer hover box\n        // to the full area available (rather than to the editor itself); the available\n        // area excludes the toolbar, hence the first Widget child between MainAreaWidget\n        // and editor is preferred. The difference is negligible in File Editor, but\n        // substantial for Notebooks.\n        const host = editor.host.closest('.jp-MainAreaWidget > .lm-Widget') ||\n            editor.host;\n        const items = model.completionItems();\n        // Fast cache invalidation (only checks for length rather than length + width)\n        if (this._sizeCache && this._sizeCache.items.length !== items.length) {\n            this._sizeCache = undefined;\n        }\n        // Calculate the geometry of the completer.\n        HoverBox.setGeometry({\n            anchor,\n            host: host,\n            maxHeight: this._maxHeight,\n            minHeight: this._minHeight,\n            node: node,\n            size: this._sizeCache,\n            offset: { horizontal: borderLeft + paddingLeft },\n            privilege: 'below',\n            style: style,\n            outOfViewDisplay: {\n                top: 'stick-inside',\n                bottom: 'stick-inside',\n                left: 'stick-inside',\n                right: 'stick-outside'\n            }\n        });\n        const current = ++this._geometryCounter;\n        if (!this._sizeCache) {\n            // If size was not pre-calculated using heuristics, save the actual\n            // size into cache once rendered.\n            requestAnimationFrame(() => {\n                if (current != this._geometryCounter) {\n                    // Do not set size to cache if it may already be outdated.\n                    return;\n                }\n                let rect = node.getBoundingClientRect();\n                this._sizeCache = {\n                    width: rect.width,\n                    height: rect.height,\n                    items: items\n                };\n            });\n        }\n    }\n    /**\n     * Update the display-state and contents of the documentation panel\n     */\n    _updateDocPanel(resolvedItem) {\n        var _a, _b, _c;\n        let docPanel = this._docPanel;\n        if (!docPanel) {\n            return;\n        }\n        this._toggleDocPanel(true);\n        if (!resolvedItem) {\n            this._toggleDocPanel(false);\n            return;\n        }\n        docPanel.textContent = '';\n        const loadingIndicator = (_c = (_b = (_a = this._renderer).createLoadingDocsIndicator) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : this._defaultRenderer.createLoadingDocsIndicator();\n        docPanel.appendChild(loadingIndicator);\n        resolvedItem\n            .then(activeItem => {\n            var _a, _b, _c;\n            if (!activeItem) {\n                return;\n            }\n            if (!docPanel) {\n                return;\n            }\n            if (activeItem.documentation) {\n                const node = (_c = (_b = (_a = this._renderer).createDocumentationNode) === null || _b === void 0 ? void 0 : _b.call(_a, activeItem)) !== null && _c !== void 0 ? _c : this._defaultRenderer.createDocumentationNode(activeItem);\n                docPanel.textContent = '';\n                docPanel.appendChild(node);\n            }\n            else {\n                this._toggleDocPanel(false);\n            }\n        })\n            .catch(e => console.error(e));\n    }\n    _toggleDocPanel(show) {\n        let docPanel = this._docPanel;\n        if (!docPanel) {\n            return;\n        }\n        if (show) {\n            if (this._docPanelExpanded) {\n                return;\n            }\n            docPanel.style.display = '';\n            this._docPanelExpanded = true;\n        }\n        else {\n            if (!this._docPanelExpanded) {\n                return;\n            }\n            docPanel.style.display = 'none';\n            this._docPanelExpanded = false;\n        }\n        const sizeCache = this._sizeCache;\n        if (sizeCache) {\n            sizeCache.width += this._docPanelWidth * (show ? +1 : -1);\n            if (!this._geometryLock) {\n                this._setGeometry();\n            }\n        }\n    }\n}\n(function (Completer) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        constructor(options) {\n            this.sanitizer = (options === null || options === void 0 ? void 0 : options.sanitizer) || new Sanitizer();\n        }\n        /**\n         * Create an item node from an ICompletionItem for a text completer menu.\n         */\n        createCompletionItemNode(item, orderedTypes) {\n            let wrapperNode = this._createWrapperNode(item.insertText || item.label);\n            if (item.deprecated) {\n                wrapperNode.classList.add('jp-Completer-deprecated');\n            }\n            return this._constructNode(wrapperNode, this._createLabelNode(item.label), !!item.type, item.type, orderedTypes, item.icon);\n        }\n        /**\n         * Create a documentation node for documentation panel.\n         */\n        createDocumentationNode(activeItem) {\n            const host = document.createElement('div');\n            host.classList.add('jp-RenderedText');\n            const sanitizer = this.sanitizer;\n            const source = activeItem.documentation || '';\n            renderText({ host, sanitizer, source }).catch(console.error);\n            return host;\n        }\n        /**\n         * Get a heuristic for the width of an item.\n         */\n        itemWidthHeuristic(item) {\n            var _a;\n            return (item.label.replace(/<\\?mark>/g, '').length + (((_a = item.type) === null || _a === void 0 ? void 0 : _a.length) || 0));\n        }\n        /**\n         * Create a loading bar for the documentation panel.\n         */\n        createLoadingDocsIndicator() {\n            const loadingContainer = document.createElement('div');\n            loadingContainer.classList.add('jp-Completer-loading-bar-container');\n            const loadingBar = document.createElement('div');\n            loadingBar.classList.add('jp-Completer-loading-bar');\n            loadingContainer.append(loadingBar);\n            return loadingContainer;\n        }\n        /**\n         * Create base node with the value to be inserted.\n         */\n        _createWrapperNode(value) {\n            const li = document.createElement('li');\n            li.className = ITEM_CLASS;\n            // Set the raw, un-marked up value as a data attribute.\n            li.setAttribute('data-value', value);\n            return li;\n        }\n        /**\n         * Create match node to highlight potential prefix match within result.\n         */\n        _createLabelNode(result) {\n            const matchNode = document.createElement('code');\n            matchNode.className = 'jp-Completer-match';\n            // Use innerHTML because search results include <mark> tags.\n            matchNode.innerHTML = result;\n            return matchNode;\n        }\n        /**\n         * Attaches type and match nodes to base node.\n         */\n        _constructNode(li, matchNode, typesExist, type, orderedTypes, icon) {\n            // Add the icon or type monogram\n            if (icon) {\n                const iconNode = icon.element({\n                    className: 'jp-Completer-type jp-Completer-icon'\n                });\n                li.appendChild(iconNode);\n            }\n            else if (typesExist) {\n                const typeNode = document.createElement('span');\n                typeNode.textContent = (type[0] || '').toLowerCase();\n                const colorIndex = (orderedTypes.indexOf(type) % N_COLORS) + 1;\n                typeNode.className = 'jp-Completer-type jp-Completer-monogram';\n                typeNode.setAttribute(`data-color-index`, colorIndex.toString());\n                li.appendChild(typeNode);\n            }\n            else {\n                // Create empty span to ensure consistent list styling.\n                // Otherwise, in a list of two items,\n                // if one item has an icon, but the other has type,\n                // the icon grows out of its bounds.\n                const dummyNode = document.createElement('span');\n                dummyNode.className = 'jp-Completer-monogram';\n                li.appendChild(dummyNode);\n            }\n            li.appendChild(matchNode);\n            // If there is a type, add the type extension and title\n            if (typesExist) {\n                li.title = type;\n                const typeExtendedNode = document.createElement('code');\n                typeExtendedNode.className = 'jp-Completer-typeExtended';\n                typeExtendedNode.textContent = type.toLocaleLowerCase();\n                li.appendChild(typeExtendedNode);\n            }\n            else {\n                // If no type is present on the right,\n                // the highlighting of the completion item\n                // doesn't cover the entire row.\n                const dummyTypeExtendedNode = document.createElement('span');\n                dummyTypeExtendedNode.className = 'jp-Completer-typeExtended';\n                li.appendChild(dummyTypeExtendedNode);\n            }\n            return li;\n        }\n    }\n    Completer.Renderer = Renderer;\n    /**\n     * Default renderer\n     */\n    let _defaultRenderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    function getDefaultRenderer(sanitizer) {\n        if (!_defaultRenderer ||\n            (sanitizer && _defaultRenderer.sanitizer !== sanitizer)) {\n            _defaultRenderer = new Renderer({ sanitizer: sanitizer });\n        }\n        return _defaultRenderer;\n    }\n    Completer.getDefaultRenderer = getDefaultRenderer;\n})(Completer || (Completer = {}));\n/**\n * A namespace for completer widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Mapping from keyCodes to scrollTypes.\n     */\n    Private.keyCodeMap = {\n        38: 'up',\n        40: 'down',\n        33: 'pageUp',\n        34: 'pageDown'\n    };\n    /**\n     * Returns the common subset string that a list of strings shares.\n     */\n    function commonSubset(values) {\n        const len = values.length;\n        let subset = '';\n        if (len < 2) {\n            return subset;\n        }\n        const strlen = values[0].length;\n        for (let i = 0; i < strlen; i++) {\n            const ch = values[0][i];\n            for (let j = 1; j < len; j++) {\n                if (values[j][i] !== ch) {\n                    return subset;\n                }\n            }\n            subset += ch;\n        }\n        return subset;\n    }\n    Private.commonSubset = commonSubset;\n    /**\n     * Returns true for any modified click event (i.e., not a left-click).\n     */\n    function nonstandardClick(event) {\n        return (event.button !== 0 ||\n            event.altKey ||\n            event.ctrlKey ||\n            event.shiftKey ||\n            event.metaKey);\n    }\n    Private.nonstandardClick = nonstandardClick;\n    /**\n     * Measure size of provided HTML element without painting it.\n     *\n     * #### Notes\n     * The provided element has to be detached (not connected to DOM),\n     * or a side-effect of detaching it will occur.\n     */\n    function measureSize(element, display) {\n        if (element.isConnected) {\n            console.warn('Measuring connected elements with `measureSize` has side-effects');\n        }\n        element.style.visibility = 'hidden';\n        element.style.display = display;\n        document.body.appendChild(element);\n        const size = element.getBoundingClientRect();\n        document.body.removeChild(element);\n        element.removeAttribute('style');\n        return size;\n    }\n    Private.measureSize = measureSize;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The exported token used to register new provider.\n */\nexport const ICompletionProviderManager = new Token('@jupyterlab/completer:ICompletionProviderManager', 'A service for the completion providers management.');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * The reconciliator which is used to fetch and merge responses from multiple completion providers.\n */\nexport class ProviderReconciliator {\n    /**\n     * Creates an instance of ProviderReconciliator.\n     */\n    constructor(options) {\n        this._resolveFactory = (provider, el) => provider.resolve\n            ? (patch) => provider.resolve(el, this._context, patch)\n            : undefined;\n        /**\n         * Counter to reject current provider response if a new fetch request is created.\n         */\n        this._fetching = 0;\n        this._providers = options.providers;\n        this._context = options.context;\n        this._timeout = options.timeout;\n    }\n    /**\n     * Fetch response from multiple providers, If a provider can not return\n     * the response for a completer request before timeout,\n     * the result of this provider will be ignored.\n     *\n     * @param {CompletionHandler.IRequest} request - The completion request.\n     */\n    async fetch(request) {\n        const current = ++this._fetching;\n        let promises = [];\n        for (const provider of this._providers) {\n            let promise;\n            promise = provider.fetch(request, this._context).then(reply => {\n                if (current !== this._fetching) {\n                    return Promise.reject(void 0);\n                }\n                const items = reply.items.map(el => ({\n                    ...el,\n                    resolve: this._resolveFactory(provider, el)\n                }));\n                return { ...reply, items };\n            });\n            const timeoutPromise = new Promise(resolve => {\n                return setTimeout(() => resolve(null), this._timeout);\n            });\n            promise = Promise.race([promise, timeoutPromise]);\n            // Wrap promise and return error in case of failure.\n            promises.push(promise.catch(p => p));\n        }\n        // TODO: maybe use `Promise.allSettled` once library is at es2020 instead of adding a catch.\n        const combinedPromise = Promise.all(promises);\n        return this._mergeCompletions(combinedPromise);\n    }\n    /**\n     * Check if completer should make request to fetch completion responses\n     * on user typing. If the provider with highest rank does not have\n     * `shouldShowContinuousHint` method, a default one will be used.\n     *\n     * @param completerIsVisible - The visible status of completer widget.\n     * @param changed - CodeMirror changed argument.\n     */\n    shouldShowContinuousHint(completerIsVisible, changed) {\n        if (this._providers[0].shouldShowContinuousHint) {\n            return this._providers[0].shouldShowContinuousHint(completerIsVisible, changed);\n        }\n        return this._defaultShouldShowContinuousHint(completerIsVisible, changed);\n    }\n    _alignPrefixes(replies, minStart, maxStart) {\n        if (minStart != maxStart) {\n            const editor = this._context.editor;\n            if (!editor) {\n                return replies;\n            }\n            const cursor = editor.getCursorPosition();\n            const line = editor.getLine(cursor.line);\n            if (!line) {\n                return replies;\n            }\n            return replies.map(reply => {\n                // No prefix to strip, return as-is.\n                if (reply.start == maxStart) {\n                    return reply;\n                }\n                let prefix = line.substring(reply.start, maxStart);\n                return {\n                    ...reply,\n                    items: reply.items.map(item => {\n                        let insertText = item.insertText || item.label;\n                        item.insertText = insertText.startsWith(prefix)\n                            ? insertText.slice(prefix.length)\n                            : insertText;\n                        return item;\n                    })\n                };\n            });\n        }\n        return replies;\n    }\n    async _mergeCompletions(promises) {\n        let replies = (await promises).filter(reply => {\n            // Ignore it errors out.\n            if (!reply || reply instanceof Error) {\n                return false;\n            }\n            // Ignore if no matches.\n            if (!reply.items.length) {\n                return false;\n            }\n            // Otherwise keep.\n            return true;\n        });\n        // Fast path for a single reply or no replies.\n        if (replies.length == 0) {\n            return null;\n        }\n        else if (replies.length == 1) {\n            return replies[0];\n        }\n        const minEnd = Math.min(...replies.map(reply => reply.end));\n        // If any of the replies uses a wider range, we need to align them\n        // so that all responses use the same range.\n        const starts = replies.map(reply => reply.start);\n        const minStart = Math.min(...starts);\n        const maxStart = Math.max(...starts);\n        replies = this._alignPrefixes(replies, minStart, maxStart);\n        const insertTextSet = new Set();\n        const mergedItems = new Array();\n        for (const reply of replies) {\n            reply.items.forEach(item => {\n                // IPython returns 'import' and 'import '; while the latter is more useful,\n                // user should not see two suggestions with identical labels and nearly-identical\n                // behaviour as they could not distinguish the two either way.\n                let text = (item.insertText || item.label).trim();\n                if (insertTextSet.has(text)) {\n                    return;\n                }\n                insertTextSet.add(text);\n                mergedItems.push(item);\n            });\n        }\n        return {\n            start: maxStart,\n            end: minEnd,\n            items: mergedItems\n        };\n    }\n    _defaultShouldShowContinuousHint(completerIsVisible, changed) {\n        return (!completerIsVisible &&\n            (changed.sourceChange == null ||\n                changed.sourceChange.some(delta => delta.insert != null && delta.insert.length > 0)));\n    }\n}\n//# sourceMappingURL=reconciliator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport const CONTEXT_PROVIDER_ID = 'CompletionProvider:context';\n/**\n * A context connector for completion handlers.\n */\nexport class ContextCompleterProvider {\n    constructor() {\n        this.identifier = CONTEXT_PROVIDER_ID;\n        this.renderer = null;\n    }\n    /**\n     * The context completion provider is applicable on all cases.\n     * @param context - additional information about context of completion request\n     */\n    async isApplicable(context) {\n        return true;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    fetch(request, context) {\n        const editor = context.editor;\n        if (!editor) {\n            return Promise.reject('No editor');\n        }\n        return new Promise(resolve => {\n            resolve(Private.contextHint(editor));\n        });\n    }\n}\n/**\n * A namespace for Private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get a list of completion hints from a tokenization\n     * of the editor.\n     */\n    function contextHint(editor) {\n        // Find the token at the cursor\n        const token = editor.getTokenAtCursor();\n        // Get the list of matching tokens.\n        const tokenList = getCompletionTokens(token, editor);\n        // Only choose the ones that have a non-empty type\n        // field, which are likely to be of interest.\n        const completionList = tokenList.filter(t => t.type).map(t => t.value);\n        // Remove duplicate completions from the list\n        const matches = new Set(completionList);\n        const items = new Array();\n        matches.forEach(label => items.push({ label }));\n        return {\n            start: token.offset,\n            end: token.offset + token.value.length,\n            items\n        };\n    }\n    Private.contextHint = contextHint;\n    /**\n     * Get a list of tokens that match the completion request,\n     * but are not identical to the completion request.\n     */\n    function getCompletionTokens(token, editor) {\n        const candidates = editor.getTokens();\n        // Only get the tokens that have a common start, but\n        // are not identical.\n        return candidates.filter(t => t.value.indexOf(token.value) === 0 && t.value !== token.value);\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=contextprovider.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Text } from '@jupyterlab/coreutils';\nexport const KERNEL_PROVIDER_ID = 'CompletionProvider:kernel';\n/**\n * A kernel connector for completion handlers.\n */\nexport class KernelCompleterProvider {\n    constructor() {\n        this.identifier = KERNEL_PROVIDER_ID;\n        this.renderer = null;\n    }\n    /**\n     * The kernel completion provider is applicable only if the kernel is available.\n     * @param context - additional information about context of completion request\n     */\n    async isApplicable(context) {\n        var _a;\n        const hasKernel = (_a = context.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!hasKernel) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    async fetch(request, context) {\n        var _a;\n        const kernel = (_a = context.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('No kernel for completion request.');\n        }\n        const contents = {\n            code: request.text,\n            cursor_pos: request.offset\n        };\n        const msg = await kernel.requestComplete(contents);\n        const response = msg.content;\n        if (response.status !== 'ok') {\n            throw new Error('Completion fetch failed to return successfully.');\n        }\n        const items = new Array();\n        const metadata = response.metadata._jupyter_types_experimental;\n        response.matches.forEach((label, index) => {\n            if (metadata && metadata[index]) {\n                items.push({\n                    label,\n                    type: metadata[index].type,\n                    insertText: metadata[index].text\n                });\n            }\n            else {\n                items.push({ label });\n            }\n        });\n        return {\n            start: response.cursor_start,\n            end: response.cursor_end,\n            items\n        };\n    }\n    /**\n     * Kernel provider will use the inspect request to lazy-load the content\n     * for document panel.\n     */\n    async resolve(item, context, patch) {\n        const { editor, session } = context;\n        if (session && editor) {\n            let code = editor.model.sharedModel.getSource();\n            const position = editor.getCursorPosition();\n            let offset = Text.jsIndexToCharIndex(editor.getOffsetAt(position), code);\n            const kernel = session.kernel;\n            if (!code || !kernel) {\n                return Promise.resolve(item);\n            }\n            if (patch) {\n                const { start, value } = patch;\n                code = code.substring(0, start) + value;\n                offset = offset + value.length;\n            }\n            const contents = {\n                code,\n                cursor_pos: offset,\n                detail_level: 0\n            };\n            const msg = await kernel.requestInspect(contents);\n            const value = msg.content;\n            if (value.status !== 'ok' || !value.found) {\n                return item;\n            }\n            item.documentation = value.data['text/plain'];\n            return item;\n        }\n        return item;\n    }\n    /**\n     * Kernel provider will activate the completer in continuous mode after\n     * the `.` character.\n     */\n    shouldShowContinuousHint(visible, changed) {\n        const sourceChange = changed.sourceChange;\n        if (sourceChange == null) {\n            return true;\n        }\n        if (sourceChange.some(delta => delta.delete != null)) {\n            return false;\n        }\n        return sourceChange.some(delta => delta.insert != null &&\n            (delta.insert === '.' || (!visible && delta.insert.trim().length > 0)));\n    }\n}\n//# sourceMappingURL=kernelprovider.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport { ProviderReconciliator } from './reconciliator';\nimport { CONTEXT_PROVIDER_ID } from './default/contextprovider';\nimport { KERNEL_PROVIDER_ID } from './default/kernelprovider';\nimport { CompletionHandler } from './handler';\nimport { CompleterModel } from './model';\nimport { Completer } from './widget';\n/**\n * A manager for completer provider.\n */\nexport class CompletionProviderManager {\n    /**\n     * Construct a new completer manager.\n     */\n    constructor() {\n        /**\n         * The set of activated provider\n         */\n        this._activeProviders = new Set([KERNEL_PROVIDER_ID, CONTEXT_PROVIDER_ID]);\n        this._providers = new Map();\n        this._panelHandlers = new Map();\n        this._activeProvidersChanged = new Signal(this);\n    }\n    /**\n     * Signal emitted when active providers list is changed.\n     */\n    get activeProvidersChanged() {\n        return this._activeProvidersChanged;\n    }\n    /**\n     * Set provider timeout.\n     *\n     * @param {number} timeout - value of timeout in millisecond.\n     */\n    setTimeout(timeout) {\n        this._timeout = timeout;\n    }\n    /**\n     * Enable/disable the document panel.\n     */\n    setShowDocumentationPanel(showDoc) {\n        this._panelHandlers.forEach(handler => (handler.completer.showDocsPanel = showDoc));\n        this._showDoc = showDoc;\n    }\n    /**\n     * Enable/disable continuous hinting mode.\n     */\n    setContinuousHinting(value) {\n        this._panelHandlers.forEach(handler => (handler.autoCompletion = value));\n        this._autoCompletion = value;\n    }\n    /**\n     * Register a completer provider with the manager.\n     *\n     * @param {ICompletionProvider} provider - the provider to be registered.\n     */\n    registerProvider(provider) {\n        const identifier = provider.identifier;\n        if (this._providers.has(identifier)) {\n            console.warn(`Completion service with identifier ${identifier} is already registered`);\n        }\n        else {\n            this._providers.set(identifier, provider);\n        }\n    }\n    /**\n     *\n     * Return the map of providers.\n     */\n    getProviders() {\n        return this._providers;\n    }\n    /**\n     * Activate the providers by id, the list of ids is populated from user setting.\n     * The non-existing providers will be discarded.\n     *\n     * @param {Array<string>} providerIds - Array of strings with ids of provider\n     */\n    activateProvider(providerIds) {\n        this._activeProviders = new Set([]);\n        providerIds.forEach(providerId => {\n            if (this._providers.has(providerId)) {\n                this._activeProviders.add(providerId);\n            }\n        });\n        if (this._activeProviders.size === 0) {\n            this._activeProviders.add(KERNEL_PROVIDER_ID);\n            this._activeProviders.add(CONTEXT_PROVIDER_ID);\n        }\n        this._activeProvidersChanged.emit();\n    }\n    /**\n     * Create or update completer handler of a widget with new context.\n     *\n     * @param newCompleterContext - The completion context.\n     */\n    async updateCompleter(newCompleterContext) {\n        const { widget, editor } = newCompleterContext;\n        const id = widget.id;\n        const handler = this._panelHandlers.get(id);\n        if (!handler) {\n            // Create a new handler.\n            const handler = await this.generateHandler(newCompleterContext);\n            this._panelHandlers.set(widget.id, handler);\n            widget.disposed.connect(old => {\n                this.disposeHandler(old.id, handler);\n            });\n        }\n        else {\n            // Update existing handler.\n            handler.completer.showDocsPanel = this._showDoc;\n            handler.autoCompletion = this._autoCompletion;\n            if (editor) {\n                handler.editor = editor;\n                handler.reconciliator = await this.generateReconciliator(newCompleterContext);\n            }\n        }\n    }\n    /**\n     * Invoke the completer in the widget with provided id.\n     *\n     * @param id - the id of notebook panel, console panel or code editor.\n     */\n    invoke(id) {\n        const handler = this._panelHandlers.get(id);\n        if (handler) {\n            handler.invoke();\n        }\n    }\n    /**\n     * Activate `select` command in the widget with provided id.\n     *\n     * @param {string} id - the id of notebook panel, console panel or code editor.\n     */\n    select(id) {\n        const handler = this._panelHandlers.get(id);\n        if (handler) {\n            handler.completer.selectActive();\n        }\n    }\n    /**\n     * Helper function to generate a `ProviderReconciliator` with provided context.\n     * The `isApplicable` method of provider is used to filter out the providers\n     * which can not be used with provided context.\n     *\n     * @param {ICompletionContext} completerContext - the current completer context\n     */\n    async generateReconciliator(completerContext) {\n        let providers = [];\n        //TODO Update list with rank\n        for (const id of this._activeProviders) {\n            const provider = this._providers.get(id);\n            if (provider && (await provider.isApplicable(completerContext))) {\n                providers.push(provider);\n            }\n        }\n        return new ProviderReconciliator({\n            context: completerContext,\n            providers,\n            timeout: this._timeout\n        });\n    }\n    /**\n     * Helper to dispose the completer handler on widget disposed event.\n     *\n     * @param {string} id - id of the widget\n     * @param {CompletionHandler} handler - the handler to be disposed.\n     */\n    disposeHandler(id, handler) {\n        var _a;\n        (_a = handler.completer.model) === null || _a === void 0 ? void 0 : _a.dispose();\n        handler.completer.dispose();\n        handler.dispose();\n        this._panelHandlers.delete(id);\n    }\n    /**\n     * Helper to generate a completer handler from provided context.\n     */\n    async generateHandler(completerContext) {\n        var _a;\n        const firstProvider = [...this._activeProviders][0];\n        const provider = this._providers.get(firstProvider);\n        let renderer = (_a = provider === null || provider === void 0 ? void 0 : provider.renderer) !== null && _a !== void 0 ? _a : Completer.getDefaultRenderer(completerContext.sanitizer);\n        const modelFactory = provider === null || provider === void 0 ? void 0 : provider.modelFactory;\n        let model;\n        if (modelFactory) {\n            model = await modelFactory(completerContext);\n        }\n        else {\n            model = new CompleterModel();\n        }\n        const { sanitizer } = completerContext;\n        const completer = new Completer({ model, renderer, sanitizer });\n        completer.showDocsPanel = this._showDoc;\n        completer.hide();\n        Widget.attach(completer, document.body);\n        const reconciliator = await this.generateReconciliator(completerContext);\n        const handler = new CompletionHandler({\n            completer,\n            reconciliator: reconciliator\n        });\n        handler.editor = completerContext.editor;\n        return handler;\n    }\n}\n//# sourceMappingURL=manager.js.map"],"names":["COMPLETER_ENABLED_CLASS","COMPLETER_ACTIVE_CLASS","CompletionHandler","constructor","options","this","_editor","_enabled","_isDisposed","_autoCompletion","completer","selected","connect","onCompletionSelected","visibilityChanged","onVisibilityChanged","_reconciliator","reconciliator","editor","newValue","isDisposed","model","host","classList","remove","selections","changed","disconnect","onSelectionsChanged","sharedModel","onTextChanged","reset","autoCompletion","value","dispose","Signal","clearData","invoke","MessageLoop","sendMessage","Msg","InvokeRequest","processMessage","msg","type","onInvokeRequest","getState","position","text","getSource","line","column","val","patch","createPatch","start","end","cursorBeforeChange","getOffsetAt","getCursorPosition","updateSource","setCursorPosition","getPositionAt","length","original","_makeRequest","catch","reason","console","warn","subsetMatch","getLine","getSelection","slice","match","add","handleCursorChange","str","shouldShowContinuousHint","isVisible","handleTextChange","isHidden","focus","Promise","reject","Error","offset","Text","jsIndexToCharIndex","state","request","fetch","then","reply","_updateModel","setCompletionItems","items","p","cursor","charIndexToJsIndex","Message","Private","escapeHTML","node","document","createElement","textContent","innerHTML","CompleterModel","_current","_cursor","_completionItems","_processedItemsCache","_original","_query","_subsetMatch","_typeMap","_orderedTypes","_stateChanged","_queryChanged","_resolvingItem","stateChanged","queryChanged","JSONExt","deepEqual","_reset","emit","undefined","current","originalLine","split","currentLine","query","substring","ending","lastIndexOf","origin","completionItems","_markup","map","item","_escapeItemLabel","findOrderedCompletionItemTypes","typeMap","orderedTypes","change","cursorDelta","inputDelta","last","hard","_a","results","index","label","indexOf","StringExt","matchSumOfSquares","marked","highlight","indices","mark","highlightedItem","Object","assign","join","insertText","push","score","sort","scoreCmp","resolveItem","activeIndex","resolvedItem","completionItem","resolve","activeItem","keys","forEach","key","e","error","inplace","escapedLabel","newItem","hadQuery","KNOWN_TYPES","KNOWN_MAP","reduce","acc","a","b","_b","_c","delta","localeCompare","newTypeSet","Set","includes","has","newTypes","Array","from","concat","findOrderedTypes","filtered","filter","ITEM_CLASS","ACTIVE_CLASS","LIST_CLASS","DOC_PANEL_CLASS","USE_CAPTURE","Completer","Widget","_d","super","_activeIndex","_model","_selected","_visibilityChanged","_indexChanged","_lastSubsetMatch","_geometryLock","_geometryCounter","_docPanelExpanded","_renderCounter","sanitizer","Sanitizer","_defaultRenderer","getDefaultRenderer","_renderer","renderer","addClass","_updateConstraints","tempNode","style","visibility","overflowY","body","appendChild","computedStyle","window","getComputedStyle","_maxHeight","parseInt","maxHeight","_minHeight","minHeight","_scrollbarWidth","offsetWidth","clientWidth","removeChild","tempDocPanel","_docPanelWidth","measureSize","width","indexChanged","onModelStateChanged","onModelQueryChanged","showDocsPanel","showDoc","_showDoc","_sizeCache","handleEvent","event","_evtKeydown","_evtMousedown","_evtScroll","scrollTop","selectActive","active","querySelector","getAttribute","onAfterAttach","addEventListener","onBeforeDetach","removeEventListener","isAttached","update","queryChange","newItems","oldItems","oldWidest","_findWidestItemIndex","newWidest","heuristic","_getPreferredItemWidthHeuristic","onUpdateRequest","_populateSubset","hide","_createCompleterNode","querySelectorAll","docPanel","className","_docPanel","_updateDocPanel","show","_setGeometry","sizeCache","height","ul","first","createCompletionItemNode","renderedItems","firstItemSize","pageSize","Math","max","ceil","toRenderImmediately","min","performance","now","i","li","widestItemIndex","widestItem","widestItemSize","cloneNode","timePerItem","chunkSize","floor","alreadyRendered","previousChunkFinal","renderChunk","predictedMissingHeight","marginBottom","requestAnimationFrame","limit","widthHeuristic","widthHeuristics","itemWidthHeuristic","bind","_cycle","direction","container","getBoundingClientRect","page","sign","completionList","ElementExt","scrollIntoViewIfNeeded","contains","target","keyCode","preventDefault","stopPropagation","stopImmediatePropagation","populated","shiftKey","cycle","keyCodeMap","nonstandardClick","documentElement","parentElement","subset","commonSubset","anchor","getCoordinateForPosition","borderLeft","borderLeftWidth","paddingLeft","closest","HoverBox","setGeometry","size","horizontal","privilege","outOfViewDisplay","top","bottom","left","right","rect","_toggleDocPanel","loadingIndicator","createLoadingDocsIndicator","call","documentation","createDocumentationNode","display","Renderer","wrapperNode","_createWrapperNode","deprecated","_constructNode","_createLabelNode","icon","source","renderText","replace","loadingContainer","loadingBar","append","setAttribute","result","matchNode","typesExist","iconNode","element","typeNode","toLowerCase","colorIndex","toString","dummyNode","title","typeExtendedNode","toLocaleLowerCase","dummyTypeExtendedNode","values","len","strlen","ch","j","button","altKey","ctrlKey","metaKey","isConnected","removeAttribute","ICompletionProviderManager","Token","ProviderReconciliator","_resolveFactory","provider","el","_context","_fetching","_providers","providers","context","_timeout","timeout","promises","promise","timeoutPromise","setTimeout","race","combinedPromise","all","_mergeCompletions","completerIsVisible","_defaultShouldShowContinuousHint","_alignPrefixes","replies","minStart","maxStart","prefix","startsWith","minEnd","starts","insertTextSet","mergedItems","trim","sourceChange","some","insert","CONTEXT_PROVIDER_ID","ContextCompleterProvider","identifier","isApplicable","contextHint","token","getTokenAtCursor","getTokens","t","getCompletionTokens","matches","KERNEL_PROVIDER_ID","KernelCompleterProvider","session","kernel","contents","code","cursor_pos","response","requestComplete","content","status","metadata","_jupyter_types_experimental","cursor_start","cursor_end","detail_level","requestInspect","found","data","visible","delete","CompletionProviderManager","_activeProviders","Map","_panelHandlers","_activeProvidersChanged","activeProvidersChanged","setShowDocumentationPanel","handler","setContinuousHinting","registerProvider","set","getProviders","activateProvider","providerIds","providerId","updateCompleter","newCompleterContext","widget","id","get","generateReconciliator","generateHandler","disposed","old","disposeHandler","select","completerContext","firstProvider","modelFactory","attach"],"sourceRoot":""}