{"version":3,"file":"2401.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/attachmentmodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/factories.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/latex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/mimemodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/outputmodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/renderers.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/widgets.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lodash.escape/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ObservableJSON } from '@jupyterlab/observables';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of a notebook attachment model.\n */\nexport class AttachmentModel {\n    /**\n     * Construct a new attachment model.\n     */\n    constructor(options) {\n        // All attachments are untrusted\n        this.trusted = false;\n        this._changed = new Signal(this);\n        this._raw = {};\n        const data = Private.getData(options.value);\n        this._data = new ObservableJSON({ values: data });\n        this._rawData = data;\n        // Make a copy of the data.\n        const value = options.value;\n        for (const key in value) {\n            // Ignore data and metadata that were stripped.\n            switch (key) {\n                case 'data':\n                    break;\n                default:\n                    this._raw[key] = Private.extract(value, key);\n            }\n        }\n    }\n    /**\n     * A signal emitted when the attachment model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources used by the attachment model.\n     */\n    dispose() {\n        this._data.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._rawData;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return {};\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        if (options.data) {\n            this._updateObservable(this._data, options.data);\n            this._rawData = options.data;\n        }\n        this._changed.emit(void 0);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const attachment = {};\n        for (const key in this._raw) {\n            attachment[key] = Private.extract(this._raw, key);\n        }\n        return attachment;\n    }\n    /**\n     * Update an observable JSON object using a readonly JSON object.\n     */\n    _updateObservable(observable, data) {\n        const oldKeys = observable.keys();\n        const newKeys = Object.keys(data);\n        // Handle removed keys.\n        for (const key of oldKeys) {\n            if (newKeys.indexOf(key) === -1) {\n                observable.delete(key);\n            }\n        }\n        // Handle changed data.\n        for (const key of newKeys) {\n            const oldValue = observable.get(key);\n            const newValue = data[key];\n            if (oldValue !== newValue) {\n                observable.set(key, newValue);\n            }\n        }\n    }\n}\n/**\n * The namespace for AttachmentModel statics.\n */\n(function (AttachmentModel) {\n    /**\n     * Get the data for an attachment.\n     *\n     * @param bundle - A kernel attachment MIME bundle.\n     *\n     * @returns - The data for the payload.\n     */\n    function getData(bundle) {\n        return Private.getData(bundle);\n    }\n    AttachmentModel.getData = getData;\n})(AttachmentModel || (AttachmentModel = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the data from a notebook attachment.\n     */\n    function getData(bundle) {\n        return convertBundle(bundle);\n    }\n    Private.getData = getData;\n    /**\n     * Get the bundle options given attachment model options.\n     */\n    function getBundleOptions(options) {\n        const data = getData(options.value);\n        return { data };\n    }\n    Private.getBundleOptions = getBundleOptions;\n    /**\n     * Extract a value from a JSONObject.\n     */\n    function extract(value, key) {\n        const item = value[key];\n        if (item === undefined || JSONExt.isPrimitive(item)) {\n            return item;\n        }\n        return JSONExt.deepCopy(item);\n    }\n    Private.extract = extract;\n    /**\n     * Convert a mime bundle to mime data.\n     */\n    function convertBundle(bundle) {\n        const map = Object.create(null);\n        for (const mimeType in bundle) {\n            map[mimeType] = extract(bundle, mimeType);\n        }\n        return map;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=attachmentmodel.js.map","import * as widgets from './widgets';\n/**\n * A mime renderer factory for raw html.\n */\nexport const htmlRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/html'],\n    defaultRank: 50,\n    createRenderer: options => new widgets.RenderedHTML(options)\n};\n/**\n * A mime renderer factory for images.\n */\nexport const imageRendererFactory = {\n    safe: true,\n    mimeTypes: [\n        'image/bmp',\n        'image/png',\n        'image/jpeg',\n        'image/gif',\n        'image/webp'\n    ],\n    defaultRank: 90,\n    createRenderer: options => new widgets.RenderedImage(options)\n};\n/**\n * A mime renderer factory for LaTeX.\n */\nexport const latexRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/latex'],\n    defaultRank: 70,\n    createRenderer: options => new widgets.RenderedLatex(options)\n};\n/**\n * A mime renderer factory for Markdown.\n */\nexport const markdownRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/markdown'],\n    defaultRank: 60,\n    createRenderer: options => new widgets.RenderedMarkdown(options)\n};\n/**\n * A mime renderer factory for svg.\n */\nexport const svgRendererFactory = {\n    safe: false,\n    mimeTypes: ['image/svg+xml'],\n    defaultRank: 80,\n    createRenderer: options => new widgets.RenderedSVG(options)\n};\n/**\n * A mime renderer factory for plain and jupyter console text data.\n */\nexport const textRendererFactory = {\n    safe: true,\n    mimeTypes: [\n        'text/plain',\n        'application/vnd.jupyter.stdout',\n        'application/vnd.jupyter.stderr'\n    ],\n    defaultRank: 120,\n    createRenderer: options => new widgets.RenderedText(options)\n};\n/**\n * A placeholder factory for rendered JavaScript.\n */\nexport const javaScriptRendererFactory = {\n    safe: false,\n    mimeTypes: ['text/javascript', 'application/javascript'],\n    defaultRank: 110,\n    createRenderer: options => new widgets.RenderedJavaScript(options)\n};\n/**\n * The standard factories provided by the rendermime package.\n */\nexport const standardRendererFactories = [\n    htmlRendererFactory,\n    markdownRendererFactory,\n    latexRendererFactory,\n    svgRendererFactory,\n    imageRendererFactory,\n    javaScriptRendererFactory,\n    textRendererFactory\n];\n//# sourceMappingURL=factories.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n// Some magic for deferring mathematical expressions to MathJax\n// by hiding them from the Markdown parser.\n// Some of the code here is adapted with permission from Davide Cervone\n// under the terms of the Apache2 license governing the MathJax project.\n// Other minor modifications are also due to StackExchange and are used with\n// permission.\nconst inline = '$'; // the inline math delimiter\n// MATHSPLIT contains the pattern for math delimiters and special symbols\n// needed for searching for math in the text input.\nconst MATHSPLIT = /(\\$\\$?|\\\\(?:begin|end)\\{[a-z]*\\*?\\}|\\\\[{}$]|[{}]|(?:\\n\\s*)+|@@\\d+@@|\\\\\\\\(?:\\(|\\)|\\[|\\]))/i;\n/**\n *  Break up the text into its component parts and search\n *    through them for math delimiters, braces, linebreaks, etc.\n *  Math delimiters must match and braces must balance.\n *  Don't allow math to pass through a double linebreak\n *    (which will be a paragraph).\n */\nexport function removeMath(text) {\n    const math = []; // stores math strings for later\n    let start = null;\n    let end = null;\n    let last = null;\n    let braces = 0;\n    let deTilde;\n    // Except for extreme edge cases, this should catch precisely those pieces of the markdown\n    // source that will later be turned into code spans. While MathJax will not TeXify code spans,\n    // we still have to consider them at this point; the following issue has happened several times:\n    //\n    //     `$foo` and `$bar` are variables.  -->  <code>$foo ` and `$bar</code> are variables.\n    const hasCodeSpans = text.includes('`') || text.includes('~~~');\n    if (hasCodeSpans) {\n        text = text\n            .replace(/~/g, '~T')\n            // note: the `fence` (three or more consecutive tildes or backticks)\n            // can be followed by an `info string` but this cannot include backticks,\n            // see specification: https://spec.commonmark.org/0.30/#info-string\n            .replace(/^(?<fence>`{3,}|(~T){3,})[^`\\n]*\\n([\\s\\S]*?)^\\k<fence>`*$/gm, wholematch => wholematch.replace(/\\$/g, '~D'))\n            .replace(/(^|[^\\\\])(`+)([^\\n]*?[^`\\n])\\2(?!`)/gm, wholematch => wholematch.replace(/\\$/g, '~D'));\n        deTilde = (text) => {\n            return text.replace(/~([TD])/g, (wholematch, character) => character === 'T' ? '~' : inline);\n        };\n    }\n    else {\n        deTilde = (text) => {\n            return text;\n        };\n    }\n    let blocks = text.replace(/\\r\\n?/g, '\\n').split(MATHSPLIT);\n    for (let i = 1, m = blocks.length; i < m; i += 2) {\n        const block = blocks[i];\n        if (block.charAt(0) === '@') {\n            //\n            //  Things that look like our math markers will get\n            //  stored and then retrieved along with the math.\n            //\n            blocks[i] = '@@' + math.length + '@@';\n            math.push(block);\n        }\n        else if (start !== null) {\n            //\n            //  If we are in math, look for the end delimiter,\n            //    but don't go past double line breaks, and\n            //    and balance braces within the math.\n            //\n            if (block === end) {\n                if (braces) {\n                    last = i;\n                }\n                else {\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                    start = null;\n                    end = null;\n                    last = null;\n                }\n            }\n            else if (block.match(/\\n.*\\n/)) {\n                if (last !== null) {\n                    i = last;\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                }\n                start = null;\n                end = null;\n                last = null;\n                braces = 0;\n            }\n            else if (block === '{') {\n                braces++;\n            }\n            else if (block === '}' && braces) {\n                braces--;\n            }\n        }\n        else {\n            //\n            //  Look for math start delimiters and when\n            //    found, set up the end delimiter.\n            //\n            if (block === inline || block === '$$') {\n                start = i;\n                end = block;\n                braces = 0;\n            }\n            else if (block === '\\\\\\\\(' || block === '\\\\\\\\[') {\n                start = i;\n                end = block.slice(-1) === '(' ? '\\\\\\\\)' : '\\\\\\\\]';\n                braces = 0;\n            }\n            else if (block.substr(1, 5) === 'begin') {\n                start = i;\n                end = '\\\\end' + block.substr(6);\n                braces = 0;\n            }\n        }\n    }\n    if (start !== null && last !== null) {\n        blocks = processMath(start, last, deTilde, math, blocks);\n        start = null;\n        end = null;\n        last = null;\n    }\n    return { text: deTilde(blocks.join('')), math };\n}\n/**\n * Put back the math strings that were saved,\n * and clear the math array (no need to keep it around).\n */\nexport function replaceMath(text, math) {\n    /**\n     * Replace a math placeholder with its corresponding group.\n     * The math delimiters \"\\\\(\", \"\\\\[\", \"\\\\)\" and \"\\\\]\" are replaced\n     * removing one backslash in order to be interpreted correctly by MathJax.\n     */\n    const process = (match, n) => {\n        let group = math[n];\n        if (group.substr(0, 3) === '\\\\\\\\(' &&\n            group.substr(group.length - 3) === '\\\\\\\\)') {\n            group = '\\\\(' + group.substring(3, group.length - 3) + '\\\\)';\n        }\n        else if (group.substr(0, 3) === '\\\\\\\\[' &&\n            group.substr(group.length - 3) === '\\\\\\\\]') {\n            group = '\\\\[' + group.substring(3, group.length - 3) + '\\\\]';\n        }\n        return group;\n    };\n    // Replace all the math group placeholders in the text\n    // with the saved strings.\n    return text.replace(/@@(\\d+)@@/g, process);\n}\n/**\n * Process math blocks.\n *\n * The math is in blocks i through j, so\n *   collect it into one block and clear the others.\n *  Replace &, <, and > by named entities.\n *  For IE, put <br> at the ends of comments since IE removes \\n.\n *  Clear the current math positions and store the index of the\n *   math, then push the math string onto the storage array.\n *  The preProcess function is called on all blocks if it has been passed in\n */\nfunction processMath(i, j, preProcess, math, blocks) {\n    let block = blocks\n        .slice(i, j + 1)\n        .join('')\n        .replace(/&/g, '&amp;') // use HTML entity for &\n        .replace(/</g, '&lt;') // use HTML entity for <\n        .replace(/>/g, '&gt;'); // use HTML entity for >\n    if (navigator && navigator.appName === 'Microsoft Internet Explorer') {\n        block = block.replace(/(%[^\\n]*)\\n/g, '$1<br/>\\n');\n    }\n    while (j > i) {\n        blocks[j] = '';\n        j--;\n    }\n    blocks[i] = '@@' + math.length + '@@'; // replace the current block text with a unique tag to find later\n    if (preProcess) {\n        block = preProcess(block);\n    }\n    math.push(block);\n    return blocks;\n}\n//# sourceMappingURL=latex.js.map","/**\n * The default mime model implementation.\n */\nexport class MimeModel {\n    /**\n     * Construct a new mime model.\n     */\n    constructor(options = {}) {\n        this.trusted = !!options.trusted;\n        this._data = options.data || {};\n        this._metadata = options.metadata || {};\n        this._callback = options.callback || Private.noOp;\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return this._metadata;\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        this._data = options.data || this._data;\n        this._metadata = options.metadata || this._metadata;\n        this._callback(options);\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A no-op callback function.\n     */\n    function noOp() {\n        /* no-op */\n    }\n    Private.noOp = noOp;\n})(Private || (Private = {}));\n//# sourceMappingURL=mimemodel.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableJSON } from '@jupyterlab/observables';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of a notebook output model.\n */\nexport class OutputModel {\n    /**\n     * Construct a new output model.\n     */\n    constructor(options) {\n        this._changed = new Signal(this);\n        this._raw = {};\n        const { data, metadata, trusted } = Private.getBundleOptions(options);\n        this._data = new ObservableJSON({ values: data });\n        this._rawData = data;\n        this._metadata = new ObservableJSON({ values: metadata });\n        this._rawMetadata = metadata;\n        this.trusted = trusted;\n        // Make a copy of the data.\n        const value = options.value;\n        for (const key in value) {\n            // Ignore data and metadata that were stripped.\n            switch (key) {\n                case 'data':\n                case 'metadata':\n                    break;\n                default:\n                    this._raw[key] = Private.extract(value, key);\n            }\n        }\n        this.type = value.output_type;\n        if (nbformat.isExecuteResult(value)) {\n            this.executionCount = value.execution_count;\n        }\n        else {\n            this.executionCount = null;\n        }\n    }\n    /**\n     * A signal emitted when the output model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources used by the output model.\n     */\n    dispose() {\n        this._data.dispose();\n        this._metadata.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._rawData;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return this._rawMetadata;\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        if (options.data) {\n            this._updateObservable(this._data, options.data);\n            this._rawData = options.data;\n        }\n        if (options.metadata) {\n            this._updateObservable(this._metadata, options.metadata);\n            this._rawMetadata = options.metadata;\n        }\n        this._changed.emit();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const output = {};\n        for (const key in this._raw) {\n            output[key] = Private.extract(this._raw, key);\n        }\n        switch (this.type) {\n            case 'display_data':\n            case 'execute_result':\n            case 'update_display_data':\n                output['data'] = this.data;\n                output['metadata'] = this.metadata;\n                break;\n            default:\n                break;\n        }\n        // Remove transient data.\n        delete output['transient'];\n        return output;\n    }\n    /**\n     * Update an observable JSON object using a readonly JSON object.\n     */\n    _updateObservable(observable, data) {\n        const oldKeys = observable.keys();\n        const newKeys = Object.keys(data);\n        // Handle removed keys.\n        for (const key of oldKeys) {\n            if (newKeys.indexOf(key) === -1) {\n                observable.delete(key);\n            }\n        }\n        // Handle changed data.\n        for (const key of newKeys) {\n            const oldValue = observable.get(key);\n            const newValue = data[key];\n            if (oldValue !== newValue) {\n                observable.set(key, newValue);\n            }\n        }\n    }\n}\n/**\n * The namespace for OutputModel statics.\n */\n(function (OutputModel) {\n    /**\n     * Get the data for an output.\n     *\n     * @param output - A kernel output message payload.\n     *\n     * @returns - The data for the payload.\n     */\n    function getData(output) {\n        return Private.getData(output);\n    }\n    OutputModel.getData = getData;\n    /**\n     * Get the metadata from an output message.\n     *\n     * @param output - A kernel output message payload.\n     *\n     * @returns - The metadata for the payload.\n     */\n    function getMetadata(output) {\n        return Private.getMetadata(output);\n    }\n    OutputModel.getMetadata = getMetadata;\n})(OutputModel || (OutputModel = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the data from a notebook output.\n     */\n    function getData(output) {\n        let bundle = {};\n        if (nbformat.isExecuteResult(output) ||\n            nbformat.isDisplayData(output) ||\n            nbformat.isDisplayUpdate(output)) {\n            bundle = output.data;\n        }\n        else if (nbformat.isStream(output)) {\n            if (output.name === 'stderr') {\n                bundle['application/vnd.jupyter.stderr'] = output.text;\n            }\n            else {\n                bundle['application/vnd.jupyter.stdout'] = output.text;\n            }\n        }\n        else if (nbformat.isError(output)) {\n            bundle['application/vnd.jupyter.error'] = output;\n            const traceback = output.traceback.join('\\n');\n            bundle['application/vnd.jupyter.stderr'] =\n                traceback || `${output.ename}: ${output.evalue}`;\n        }\n        return convertBundle(bundle);\n    }\n    Private.getData = getData;\n    /**\n     * Get the metadata from an output message.\n     */\n    function getMetadata(output) {\n        const value = Object.create(null);\n        if (nbformat.isExecuteResult(output) || nbformat.isDisplayData(output)) {\n            for (const key in output.metadata) {\n                value[key] = extract(output.metadata, key);\n            }\n        }\n        return value;\n    }\n    Private.getMetadata = getMetadata;\n    /**\n     * Get the bundle options given output model options.\n     */\n    function getBundleOptions(options) {\n        const data = getData(options.value);\n        const metadata = getMetadata(options.value);\n        const trusted = !!options.trusted;\n        return { data, metadata, trusted };\n    }\n    Private.getBundleOptions = getBundleOptions;\n    /**\n     * Extract a value from a JSONObject.\n     */\n    function extract(value, key) {\n        const item = value[key];\n        if (item === undefined || JSONExt.isPrimitive(item)) {\n            return item;\n        }\n        return JSON.parse(JSON.stringify(item));\n    }\n    Private.extract = extract;\n    /**\n     * Convert a mime bundle to mime data.\n     */\n    function convertBundle(bundle) {\n        const map = Object.create(null);\n        for (const mimeType in bundle) {\n            map[mimeType] = extract(bundle, mimeType);\n        }\n        return map;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=outputmodel.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Sanitizer } from '@jupyterlab/apputils';\nimport { PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { MimeModel } from './mimemodel';\n/**\n * An object which manages mime renderer factories.\n *\n * This object is used to render mime models using registered mime\n * renderers, selecting the preferred mime renderer to render the\n * model into a widget.\n *\n * #### Notes\n * This class is not intended to be subclassed.\n */\nexport class RenderMimeRegistry {\n    /**\n     * Construct a new rendermime.\n     *\n     * @param options - The options for initializing the instance.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        this._id = 0;\n        this._ranks = {};\n        this._types = null;\n        this._factories = {};\n        // Parse the options.\n        this.translator = (_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator;\n        this.resolver = (_b = options.resolver) !== null && _b !== void 0 ? _b : null;\n        this.linkHandler = (_c = options.linkHandler) !== null && _c !== void 0 ? _c : null;\n        this.latexTypesetter = (_d = options.latexTypesetter) !== null && _d !== void 0 ? _d : null;\n        this.markdownParser = (_e = options.markdownParser) !== null && _e !== void 0 ? _e : null;\n        this.sanitizer = (_f = options.sanitizer) !== null && _f !== void 0 ? _f : new Sanitizer();\n        // Add the initial factories.\n        if (options.initialFactories) {\n            for (const factory of options.initialFactories) {\n                this.addFactory(factory);\n            }\n        }\n    }\n    /**\n     * The ordered list of mimeTypes.\n     */\n    get mimeTypes() {\n        return this._types || (this._types = Private.sortedTypes(this._ranks));\n    }\n    /**\n     * Find the preferred mime type for a mime bundle.\n     *\n     * @param bundle - The bundle of mime data.\n     *\n     * @param safe - How to consider safe/unsafe factories. If 'ensure',\n     *   it will only consider safe factories. If 'any', any factory will be\n     *   considered. If 'prefer', unsafe factories will be considered, but\n     *   only after the safe options have been exhausted.\n     *\n     * @returns The preferred mime type from the available factories,\n     *   or `undefined` if the mime type cannot be rendered.\n     */\n    preferredMimeType(bundle, safe = 'ensure') {\n        // Try to find a safe factory first, if preferred.\n        if (safe === 'ensure' || safe === 'prefer') {\n            for (const mt of this.mimeTypes) {\n                if (mt in bundle && this._factories[mt].safe) {\n                    return mt;\n                }\n            }\n        }\n        if (safe !== 'ensure') {\n            // Otherwise, search for the best factory among all factories.\n            for (const mt of this.mimeTypes) {\n                if (mt in bundle) {\n                    return mt;\n                }\n            }\n        }\n        // Otherwise, no matching mime type exists.\n        return undefined;\n    }\n    /**\n     * Create a renderer for a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns A new renderer for the given mime type.\n     *\n     * @throws An error if no factory exists for the mime type.\n     */\n    createRenderer(mimeType) {\n        // Throw an error if no factory exists for the mime type.\n        if (!(mimeType in this._factories)) {\n            throw new Error(`No factory for mime type: '${mimeType}'`);\n        }\n        // Invoke the best factory for the given mime type.\n        return this._factories[mimeType].createRenderer({\n            mimeType,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            latexTypesetter: this.latexTypesetter,\n            markdownParser: this.markdownParser,\n            translator: this.translator\n        });\n    }\n    /**\n     * Create a new mime model.  This is a convenience method.\n     *\n     * @options - The options used to create the model.\n     *\n     * @returns A new mime model.\n     */\n    createModel(options = {}) {\n        return new MimeModel(options);\n    }\n    /**\n     * Create a clone of this rendermime instance.\n     *\n     * @param options - The options for configuring the clone.\n     *\n     * @returns A new independent clone of the rendermime.\n     */\n    clone(options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        // Create the clone.\n        const clone = new RenderMimeRegistry({\n            resolver: (_b = (_a = options.resolver) !== null && _a !== void 0 ? _a : this.resolver) !== null && _b !== void 0 ? _b : undefined,\n            sanitizer: (_d = (_c = options.sanitizer) !== null && _c !== void 0 ? _c : this.sanitizer) !== null && _d !== void 0 ? _d : undefined,\n            linkHandler: (_f = (_e = options.linkHandler) !== null && _e !== void 0 ? _e : this.linkHandler) !== null && _f !== void 0 ? _f : undefined,\n            latexTypesetter: (_h = (_g = options.latexTypesetter) !== null && _g !== void 0 ? _g : this.latexTypesetter) !== null && _h !== void 0 ? _h : undefined,\n            markdownParser: (_k = (_j = options.markdownParser) !== null && _j !== void 0 ? _j : this.markdownParser) !== null && _k !== void 0 ? _k : undefined,\n            translator: this.translator\n        });\n        // Clone the internal state.\n        clone._factories = { ...this._factories };\n        clone._ranks = { ...this._ranks };\n        clone._id = this._id;\n        // Return the cloned object.\n        return clone;\n    }\n    /**\n     * Get the renderer factory registered for a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns The factory for the mime type, or `undefined`.\n     */\n    getFactory(mimeType) {\n        return this._factories[mimeType];\n    }\n    /**\n     * Add a renderer factory to the rendermime.\n     *\n     * @param factory - The renderer factory of interest.\n     *\n     * @param rank - The rank of the renderer. A lower rank indicates\n     *   a higher priority for rendering. If not given, the rank will\n     *   defer to the `defaultRank` of the factory.  If no `defaultRank`\n     *   is given, it will default to 100.\n     *\n     * #### Notes\n     * The renderer will replace an existing renderer for the given\n     * mimeType.\n     */\n    addFactory(factory, rank) {\n        if (rank === undefined) {\n            rank = factory.defaultRank;\n            if (rank === undefined) {\n                rank = 100;\n            }\n        }\n        for (const mt of factory.mimeTypes) {\n            this._factories[mt] = factory;\n            this._ranks[mt] = { rank, id: this._id++ };\n        }\n        this._types = null;\n    }\n    /**\n     * Remove a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     */\n    removeMimeType(mimeType) {\n        delete this._factories[mimeType];\n        delete this._ranks[mimeType];\n        this._types = null;\n    }\n    /**\n     * Get the rank for a given mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns The rank of the mime type or undefined.\n     */\n    getRank(mimeType) {\n        const rank = this._ranks[mimeType];\n        return rank && rank.rank;\n    }\n    /**\n     * Set the rank of a given mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @param rank - The new rank to assign.\n     *\n     * #### Notes\n     * This is a no-op if the mime type is not registered.\n     */\n    setRank(mimeType, rank) {\n        if (!this._ranks[mimeType]) {\n            return;\n        }\n        const id = this._id++;\n        this._ranks[mimeType] = { rank, id };\n        this._types = null;\n    }\n}\n/**\n * The namespace for `RenderMimeRegistry` class statics.\n */\n(function (RenderMimeRegistry) {\n    /**\n     * A default resolver that uses a given reference path and a contents manager.\n     */\n    class UrlResolver {\n        /**\n         * Create a new url resolver.\n         */\n        constructor(options) {\n            this._path = options.path;\n            this._contents = options.contents;\n        }\n        /**\n         * The path of the object, from which local urls can be derived.\n         */\n        get path() {\n            return this._path;\n        }\n        set path(value) {\n            this._path = value;\n        }\n        /**\n         * Resolve a relative url to an absolute url path.\n         */\n        async resolveUrl(url) {\n            if (this.isLocal(url)) {\n                const cwd = encodeURI(PathExt.dirname(this.path));\n                url = PathExt.resolve(cwd, url);\n            }\n            return url;\n        }\n        /**\n         * Get the download url of a given absolute url path.\n         *\n         * #### Notes\n         * The returned URL may include a query parameter.\n         */\n        async getDownloadUrl(urlPath) {\n            if (this.isLocal(urlPath)) {\n                // decode url->path before passing to contents api\n                return this._contents.getDownloadUrl(decodeURIComponent(urlPath));\n            }\n            return urlPath;\n        }\n        /**\n         * Whether the URL should be handled by the resolver\n         * or not.\n         *\n         * #### Notes\n         * This is similar to the `isLocal` check in `URLExt`,\n         * but it also checks whether the path points to any\n         * of the `IDrive`s that may be registered with the contents\n         * manager.\n         */\n        isLocal(url) {\n            if (this.isMalformed(url)) {\n                return false;\n            }\n            return URLExt.isLocal(url) || !!this._contents.driveName(decodeURI(url));\n        }\n        /**\n         * Whether the URL can be decoded using `decodeURI`.\n         */\n        isMalformed(url) {\n            try {\n                decodeURI(url);\n                return false;\n            }\n            catch (error) {\n                if (error instanceof URIError) {\n                    return true;\n                }\n                throw error;\n            }\n        }\n    }\n    RenderMimeRegistry.UrlResolver = UrlResolver;\n})(RenderMimeRegistry || (RenderMimeRegistry = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the mime types in the map, ordered by rank.\n     */\n    function sortedTypes(map) {\n        return Object.keys(map).sort((a, b) => {\n            const p1 = map[a];\n            const p2 = map[b];\n            if (p1.rank !== p2.rank) {\n                return p1.rank - p2.rank;\n            }\n            return p1.id - p2.id;\n        });\n    }\n    Private.sortedTypes = sortedTypes;\n})(Private || (Private = {}));\n//# sourceMappingURL=registry.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport escape from 'lodash.escape';\nimport { removeMath, replaceMath } from './latex';\n/**\n * Render HTML into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderHTML(options) {\n    // Unpack the options.\n    let { host, source, trusted, sanitizer, resolver, linkHandler, shouldTypeset, latexTypesetter, translator } = options;\n    translator = translator || nullTranslator;\n    const trans = translator === null || translator === void 0 ? void 0 : translator.load('jupyterlab');\n    let originalSource = source;\n    // Bail early if the source is empty.\n    if (!source) {\n        host.textContent = '';\n        return Promise.resolve(undefined);\n    }\n    // Sanitize the source if it is not trusted. This removes all\n    // `<script>` tags as well as other potentially harmful HTML.\n    if (!trusted) {\n        originalSource = `${source}`;\n        source = sanitizer.sanitize(source);\n    }\n    // Set the inner HTML of the host.\n    host.innerHTML = source;\n    if (host.getElementsByTagName('script').length > 0) {\n        // If output it trusted, eval any script tags contained in the HTML.\n        // This is not done automatically by the browser when script tags are\n        // created by setting `innerHTML`.\n        if (trusted) {\n            Private.evalInnerHTMLScriptTags(host);\n        }\n        else {\n            const container = document.createElement('div');\n            const warning = document.createElement('pre');\n            warning.textContent = trans.__('This HTML output contains inline scripts. Are you sure that you want to run arbitrary Javascript within your JupyterLab session?');\n            const runButton = document.createElement('button');\n            runButton.textContent = trans.__('Run');\n            runButton.onclick = event => {\n                host.innerHTML = originalSource;\n                Private.evalInnerHTMLScriptTags(host);\n                if (host.firstChild) {\n                    host.removeChild(host.firstChild);\n                }\n            };\n            container.appendChild(warning);\n            container.appendChild(runButton);\n            host.insertBefore(container, host.firstChild);\n        }\n    }\n    // Handle default behavior of nodes.\n    Private.handleDefaults(host, resolver);\n    // Patch the urls if a resolver is available.\n    let promise;\n    if (resolver) {\n        promise = Private.handleUrls(host, resolver, linkHandler);\n    }\n    else {\n        promise = Promise.resolve(undefined);\n    }\n    // Return the final rendered promise.\n    return promise.then(() => {\n        if (shouldTypeset && latexTypesetter) {\n            latexTypesetter.typeset(host);\n        }\n    });\n}\n/**\n * Render an image into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderImage(options) {\n    // Unpack the options.\n    const { host, mimeType, source, width, height, needsBackground, unconfined } = options;\n    // Clear the content in the host.\n    host.textContent = '';\n    // Create the image element.\n    const img = document.createElement('img');\n    // Set the source of the image.\n    img.src = `data:${mimeType};base64,${source}`;\n    // Set the size of the image if provided.\n    if (typeof height === 'number') {\n        img.height = height;\n    }\n    if (typeof width === 'number') {\n        img.width = width;\n    }\n    if (needsBackground === 'light') {\n        img.classList.add('jp-needs-light-background');\n    }\n    else if (needsBackground === 'dark') {\n        img.classList.add('jp-needs-dark-background');\n    }\n    if (unconfined === true) {\n        img.classList.add('jp-mod-unconfined');\n    }\n    // Add the image to the host.\n    host.appendChild(img);\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * Render LaTeX into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderLatex(options) {\n    // Unpack the options.\n    const { host, source, shouldTypeset, latexTypesetter } = options;\n    // Set the source on the node.\n    host.textContent = source;\n    // Typeset the node if needed.\n    if (shouldTypeset && latexTypesetter) {\n        latexTypesetter.typeset(host);\n    }\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * Render Markdown into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport async function renderMarkdown(options) {\n    // Unpack the options.\n    const { host, source, markdownParser, ...others } = options;\n    // Clear the content if there is no source.\n    if (!source) {\n        host.textContent = '';\n        return;\n    }\n    let html = '';\n    if (markdownParser) {\n        // Separate math from normal markdown text.\n        const parts = removeMath(source);\n        // Convert the markdown to HTML.\n        html = await markdownParser.render(parts['text']);\n        // Replace math.\n        html = replaceMath(html, parts['math']);\n    }\n    else {\n        // Fallback if the application does not have any markdown parser.\n        html = `<pre>${source}</pre>`;\n    }\n    // Render HTML.\n    await renderHTML({\n        host,\n        source: html,\n        ...others\n    });\n    // Apply ids to the header nodes.\n    Private.headerAnchors(host);\n}\n/**\n * The namespace for the `renderMarkdown` function statics.\n */\n(function (renderMarkdown) {\n    /**\n     * Create a normalized id for a header element.\n     *\n     * @param header Header element\n     * @returns Normalized id\n     */\n    function createHeaderId(header) {\n        var _a;\n        return ((_a = header.textContent) !== null && _a !== void 0 ? _a : '').replace(/ /g, '-');\n    }\n    renderMarkdown.createHeaderId = createHeaderId;\n})(renderMarkdown || (renderMarkdown = {}));\n/**\n * Render SVG into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderSVG(options) {\n    // Unpack the options.\n    let { host, source, trusted, unconfined } = options;\n    // Clear the content if there is no source.\n    if (!source) {\n        host.textContent = '';\n        return Promise.resolve(undefined);\n    }\n    // Display a message if the source is not trusted.\n    if (!trusted) {\n        host.textContent =\n            'Cannot display an untrusted SVG. Maybe you need to run the cell?';\n        return Promise.resolve(undefined);\n    }\n    // Add missing SVG namespace (if actually missing)\n    const patt = '<svg[^>]+xmlns=[^>]+svg';\n    if (source.search(patt) < 0) {\n        source = source.replace('<svg', '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n    }\n    // Render in img so that user can save it easily\n    const img = new Image();\n    img.src = `data:image/svg+xml,${encodeURIComponent(source)}`;\n    host.appendChild(img);\n    if (unconfined === true) {\n        host.classList.add('jp-mod-unconfined');\n    }\n    return Promise.resolve();\n}\n/**\n * Replace URLs with links.\n *\n * @param content - The text content of a node.\n *\n * @returns A list of text nodes and anchor elements.\n */\nfunction autolink(content) {\n    // Taken from Visual Studio Code:\n    // https://github.com/microsoft/vscode/blob/9f709d170b06e991502153f281ec3c012add2e42/src/vs/workbench/contrib/debug/browser/linkDetector.ts#L17-L18\n    const controlCodes = '\\\\u0000-\\\\u0020\\\\u007f-\\\\u009f';\n    const webLinkRegex = new RegExp('(?:[a-zA-Z][a-zA-Z0-9+.-]{2,}:\\\\/\\\\/|data:|www\\\\.)[^\\\\s' +\n        controlCodes +\n        '\"]{2,}[^\\\\s' +\n        controlCodes +\n        '\"\\'(){}\\\\[\\\\],:;.!?]', 'ug');\n    const nodes = [];\n    let lastIndex = 0;\n    let match;\n    while (null != (match = webLinkRegex.exec(content))) {\n        if (match.index !== lastIndex) {\n            nodes.push(document.createTextNode(content.slice(lastIndex, match.index)));\n        }\n        let url = match[0];\n        // Special case when the URL ends with \">\" or \"<\"\n        const lastChars = url.slice(-1);\n        const endsWithGtLt = ['>', '<'].indexOf(lastChars) !== -1;\n        const len = endsWithGtLt ? url.length - 1 : url.length;\n        const anchor = document.createElement('a');\n        url = url.slice(0, len);\n        anchor.href = url.startsWith('www.') ? 'https://' + url : url;\n        anchor.rel = 'noopener';\n        anchor.target = '_blank';\n        anchor.appendChild(document.createTextNode(url.slice(0, len)));\n        nodes.push(anchor);\n        lastIndex = match.index + len;\n    }\n    if (lastIndex !== content.length) {\n        nodes.push(document.createTextNode(content.slice(lastIndex, content.length)));\n    }\n    return nodes;\n}\n/**\n * Split a shallow node (node without nested nodes inside) at a given text content position.\n *\n * @param node the shallow node to be split\n * @param at the position in textContent at which the split should occur\n */\nfunction splitShallowNode(node, at) {\n    var _a, _b;\n    const pre = node.cloneNode();\n    pre.textContent = (_a = node.textContent) === null || _a === void 0 ? void 0 : _a.slice(0, at);\n    const post = node.cloneNode();\n    post.textContent = (_b = node.textContent) === null || _b === void 0 ? void 0 : _b.slice(at);\n    return {\n        pre,\n        post\n    };\n}\n/**\n * Iterate over some nodes, while tracking cumulative start and end position.\n */\nfunction* nodeIter(nodes) {\n    var _a;\n    let start = 0;\n    let end;\n    for (let node of nodes) {\n        end = start + (((_a = node.textContent) === null || _a === void 0 ? void 0 : _a.length) || 0);\n        yield {\n            node,\n            start,\n            end,\n            isText: node.nodeType === Node.TEXT_NODE\n        };\n        start = end;\n    }\n}\n/**\n * Align two collections of nodes.\n *\n * If a text node in one collections spans an element in the other, yield the spanned elements.\n * Otherwise, split the nodes such that yielded pair start and stop on the same position.\n */\nfunction* alignedNodes(a, b) {\n    var _a, _b;\n    let iterA = nodeIter(a);\n    let iterB = nodeIter(b);\n    let nA = iterA.next();\n    let nB = iterB.next();\n    while (!nA.done && !nB.done) {\n        let A = nA.value;\n        let B = nB.value;\n        if (A.isText && A.start <= B.start && A.end >= B.end) {\n            // A is a text element that spans all of B, simply yield B\n            yield [null, B.node];\n            nB = iterB.next();\n        }\n        else if (B.isText && B.start <= A.start && B.end >= A.end) {\n            // B is a text element that spans all of A, simply yield A\n            yield [A.node, null];\n            nA = iterA.next();\n        }\n        else {\n            // There is some intersection, split one, unless they match exactly\n            if (A.end === B.end && A.start === B.start) {\n                yield [A.node, B.node];\n                nA = iterA.next();\n                nB = iterB.next();\n            }\n            else if (A.end > B.end) {\n                /*\n                A |-----[======]---|\n                B |--[======]------|\n                            | <- Split A here\n                        | <- trim B to start from here if needed\n                */\n                let { pre, post } = splitShallowNode(A.node, B.end - A.start);\n                if (B.start < A.start) {\n                    // this node should not be yielded anywhere else, so ok to modify in-place\n                    B.node.textContent = (_a = B.node.textContent) === null || _a === void 0 ? void 0 : _a.slice(A.start - B.start);\n                }\n                yield [pre, B.node];\n                // Modify iteration result in-place:\n                A.node = post;\n                A.start = B.end;\n                nB = iterB.next();\n            }\n            else if (B.end > A.end) {\n                let { pre, post } = splitShallowNode(B.node, A.end - B.start);\n                if (A.start < B.start) {\n                    // this node should not be yielded anywhere else, so ok to modify in-place\n                    A.node.textContent = (_b = A.node.textContent) === null || _b === void 0 ? void 0 : _b.slice(B.start - A.start);\n                }\n                yield [A.node, pre];\n                // Modify iteration result in-place:\n                B.node = post;\n                B.start = A.end;\n                nA = iterA.next();\n            }\n            else {\n                throw new Error(`Unexpected intersection: ${JSON.stringify(A)} ${JSON.stringify(B)}`);\n            }\n        }\n    }\n}\n/**\n * Render text into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderText(options) {\n    var _a, _b;\n    // Unpack the options.\n    const { host, sanitizer, source } = options;\n    // Create the HTML content.\n    const content = sanitizer.sanitize(Private.ansiSpan(source), {\n        allowedTags: ['span']\n    });\n    // Set the sanitized content for the host node.\n    const ret = document.createElement('pre');\n    const pre = document.createElement('pre');\n    pre.innerHTML = content;\n    const preTextContent = pre.textContent;\n    if (preTextContent) {\n        // Note: only text nodes and span elements should be present after sanitization in the `<pre>` element.\n        const linkedNodes = ((_b = (_a = sanitizer.getAutolink) === null || _a === void 0 ? void 0 : _a.call(sanitizer)) !== null && _b !== void 0 ? _b : true)\n            ? autolink(preTextContent)\n            : [document.createTextNode(content)];\n        let inAnchorElement = false;\n        const combinedNodes = [];\n        const preNodes = Array.from(pre.childNodes);\n        for (let nodes of alignedNodes(preNodes, linkedNodes)) {\n            if (!nodes[0]) {\n                combinedNodes.push(nodes[1]);\n                inAnchorElement = nodes[1].nodeType !== Node.TEXT_NODE;\n                continue;\n            }\n            else if (!nodes[1]) {\n                combinedNodes.push(nodes[0]);\n                inAnchorElement = false;\n                continue;\n            }\n            let [preNode, linkNode] = nodes;\n            const lastCombined = combinedNodes[combinedNodes.length - 1];\n            // If we are already in an anchor element and the anchor element did not change,\n            // we should insert the node from <pre> which is either Text node or coloured span Element\n            // into the anchor content as a child\n            if (inAnchorElement &&\n                linkNode.href ===\n                    lastCombined.href) {\n                lastCombined.appendChild(preNode);\n            }\n            else {\n                // the `linkNode` is either Text or AnchorElement;\n                const isAnchor = linkNode.nodeType !== Node.TEXT_NODE;\n                // if we are NOT about to start an anchor element, just add the pre Node\n                if (!isAnchor) {\n                    combinedNodes.push(preNode);\n                    inAnchorElement = false;\n                }\n                else {\n                    // otherwise start a new anchor; the contents of the `linkNode` and `preNode` should be the same,\n                    // so we just put the neatly formatted `preNode` inside the anchor node (`linkNode`)\n                    // and append that to combined nodes.\n                    linkNode.textContent = '';\n                    linkNode.appendChild(preNode);\n                    combinedNodes.push(linkNode);\n                    inAnchorElement = true;\n                }\n            }\n        }\n        // Do not reuse `pre` element. Clearing out previous children is too slow...\n        for (const child of combinedNodes) {\n            ret.appendChild(child);\n        }\n    }\n    host.appendChild(ret);\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * The namespace for module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Eval the script tags contained in a host populated by `innerHTML`.\n     *\n     * When script tags are created via `innerHTML`, the browser does not\n     * evaluate them when they are added to the page. This function works\n     * around that by creating new equivalent script nodes manually, and\n     * replacing the originals.\n     */\n    function evalInnerHTMLScriptTags(host) {\n        // Create a snapshot of the current script nodes.\n        const scripts = Array.from(host.getElementsByTagName('script'));\n        // Loop over each script node.\n        for (const script of scripts) {\n            // Skip any scripts which no longer have a parent.\n            if (!script.parentNode) {\n                continue;\n            }\n            // Create a new script node which will be clone.\n            const clone = document.createElement('script');\n            // Copy the attributes into the clone.\n            const attrs = script.attributes;\n            for (let i = 0, n = attrs.length; i < n; ++i) {\n                const { name, value } = attrs[i];\n                clone.setAttribute(name, value);\n            }\n            // Copy the text content into the clone.\n            clone.textContent = script.textContent;\n            // Replace the old script in the parent.\n            script.parentNode.replaceChild(clone, script);\n        }\n    }\n    Private.evalInnerHTMLScriptTags = evalInnerHTMLScriptTags;\n    /**\n     * Handle the default behavior of nodes.\n     */\n    function handleDefaults(node, resolver) {\n        // Handle anchor elements.\n        const anchors = node.getElementsByTagName('a');\n        for (let i = 0; i < anchors.length; i++) {\n            const el = anchors[i];\n            // skip when processing a elements inside svg\n            // which are of type SVGAnimatedString\n            if (!(el instanceof HTMLAnchorElement)) {\n                continue;\n            }\n            const path = el.href;\n            const isLocal = resolver && resolver.isLocal\n                ? resolver.isLocal(path)\n                : URLExt.isLocal(path);\n            // set target attribute if not already present\n            if (!el.target) {\n                el.target = isLocal ? '_self' : '_blank';\n            }\n            // set rel as 'noopener' for non-local anchors\n            if (!isLocal) {\n                el.rel = 'noopener';\n            }\n        }\n        // Handle image elements.\n        const imgs = node.getElementsByTagName('img');\n        for (let i = 0; i < imgs.length; i++) {\n            if (!imgs[i].alt) {\n                imgs[i].alt = 'Image';\n            }\n        }\n    }\n    Private.handleDefaults = handleDefaults;\n    /**\n     * Resolve the relative urls in element `src` and `href` attributes.\n     *\n     * @param node - The head html element.\n     *\n     * @param resolver - A url resolver.\n     *\n     * @param linkHandler - An optional link handler for nodes.\n     *\n     * @returns a promise fulfilled when the relative urls have been resolved.\n     */\n    function handleUrls(node, resolver, linkHandler) {\n        // Set up an array to collect promises.\n        const promises = [];\n        // Handle HTML Elements with src attributes.\n        const nodes = node.querySelectorAll('*[src]');\n        for (let i = 0; i < nodes.length; i++) {\n            promises.push(handleAttr(nodes[i], 'src', resolver));\n        }\n        // Handle anchor elements.\n        const anchors = node.getElementsByTagName('a');\n        for (let i = 0; i < anchors.length; i++) {\n            promises.push(handleAnchor(anchors[i], resolver, linkHandler));\n        }\n        // Handle link elements.\n        const links = node.getElementsByTagName('link');\n        for (let i = 0; i < links.length; i++) {\n            promises.push(handleAttr(links[i], 'href', resolver));\n        }\n        // Wait on all promises.\n        return Promise.all(promises).then(() => undefined);\n    }\n    Private.handleUrls = handleUrls;\n    /**\n     * Apply ids to headers.\n     */\n    function headerAnchors(node) {\n        const headerNames = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n        for (const headerType of headerNames) {\n            const headers = node.getElementsByTagName(headerType);\n            for (let i = 0; i < headers.length; i++) {\n                const header = headers[i];\n                header.id = renderMarkdown.createHeaderId(header);\n                const anchor = document.createElement('a');\n                anchor.target = '_self';\n                anchor.textContent = '¶';\n                anchor.href = '#' + header.id;\n                anchor.classList.add('jp-InternalAnchorLink');\n                header.appendChild(anchor);\n            }\n        }\n    }\n    Private.headerAnchors = headerAnchors;\n    /**\n     * Handle a node with a `src` or `href` attribute.\n     */\n    async function handleAttr(node, name, resolver) {\n        const source = node.getAttribute(name) || '';\n        const isLocal = resolver.isLocal\n            ? resolver.isLocal(source)\n            : URLExt.isLocal(source);\n        if (!source || !isLocal) {\n            return;\n        }\n        try {\n            const urlPath = await resolver.resolveUrl(source);\n            let url = await resolver.getDownloadUrl(urlPath);\n            if (URLExt.parse(url).protocol !== 'data:') {\n                // Bust caching for local src attrs.\n                // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n            }\n            node.setAttribute(name, url);\n        }\n        catch (err) {\n            // If there was an error getting the url,\n            // just make it an empty link and report the error.\n            node.setAttribute(name, '');\n            throw err;\n        }\n    }\n    /**\n     * Handle an anchor node.\n     */\n    function handleAnchor(anchor, resolver, linkHandler) {\n        // Get the link path without the location prepended.\n        // (e.g. \"./foo.md#Header 1\" vs \"http://localhost:8888/foo.md#Header 1\")\n        let href = anchor.getAttribute('href') || '';\n        const isLocal = resolver.isLocal\n            ? resolver.isLocal(href)\n            : URLExt.isLocal(href);\n        // Bail if it is not a file-like url.\n        if (!href || !isLocal) {\n            return Promise.resolve(undefined);\n        }\n        // Remove the hash until we can handle it.\n        const hash = anchor.hash;\n        if (hash) {\n            // Handle internal link in the file.\n            if (hash === href) {\n                anchor.target = '_self';\n                return Promise.resolve(undefined);\n            }\n            // For external links, remove the hash until we have hash handling.\n            href = href.replace(hash, '');\n        }\n        // Get the appropriate file path.\n        return resolver\n            .resolveUrl(href)\n            .then(urlPath => {\n            // decode encoded url from url to api path\n            const path = decodeURIComponent(urlPath);\n            // Handle the click override.\n            if (linkHandler) {\n                linkHandler.handleLink(anchor, path, hash);\n            }\n            // Get the appropriate file download path.\n            return resolver.getDownloadUrl(urlPath);\n        })\n            .then(url => {\n            // Set the visible anchor.\n            anchor.href = url + hash;\n        })\n            .catch(err => {\n            // If there was an error getting the url,\n            // just make it an empty link.\n            anchor.href = '';\n        });\n    }\n    const ANSI_COLORS = [\n        'ansi-black',\n        'ansi-red',\n        'ansi-green',\n        'ansi-yellow',\n        'ansi-blue',\n        'ansi-magenta',\n        'ansi-cyan',\n        'ansi-white',\n        'ansi-black-intense',\n        'ansi-red-intense',\n        'ansi-green-intense',\n        'ansi-yellow-intense',\n        'ansi-blue-intense',\n        'ansi-magenta-intense',\n        'ansi-cyan-intense',\n        'ansi-white-intense'\n    ];\n    /**\n     * Create HTML tags for a string with given foreground, background etc. and\n     * add them to the `out` array.\n     */\n    function pushColoredChunk(chunk, fg, bg, bold, underline, inverse, out) {\n        if (chunk) {\n            const classes = [];\n            const styles = [];\n            if (bold && typeof fg === 'number' && 0 <= fg && fg < 8) {\n                fg += 8; // Bold text uses \"intense\" colors\n            }\n            if (inverse) {\n                [fg, bg] = [bg, fg];\n            }\n            if (typeof fg === 'number') {\n                classes.push(ANSI_COLORS[fg] + '-fg');\n            }\n            else if (fg.length) {\n                styles.push(`color: rgb(${fg})`);\n            }\n            else if (inverse) {\n                classes.push('ansi-default-inverse-fg');\n            }\n            if (typeof bg === 'number') {\n                classes.push(ANSI_COLORS[bg] + '-bg');\n            }\n            else if (bg.length) {\n                styles.push(`background-color: rgb(${bg})`);\n            }\n            else if (inverse) {\n                classes.push('ansi-default-inverse-bg');\n            }\n            if (bold) {\n                classes.push('ansi-bold');\n            }\n            if (underline) {\n                classes.push('ansi-underline');\n            }\n            if (classes.length || styles.length) {\n                out.push('<span');\n                if (classes.length) {\n                    out.push(` class=\"${classes.join(' ')}\"`);\n                }\n                if (styles.length) {\n                    out.push(` style=\"${styles.join('; ')}\"`);\n                }\n                out.push('>');\n                out.push(chunk);\n                out.push('</span>');\n            }\n            else {\n                out.push(chunk);\n            }\n        }\n    }\n    /**\n     * Convert ANSI extended colors to R/G/B triple.\n     */\n    function getExtendedColors(numbers) {\n        let r;\n        let g;\n        let b;\n        const n = numbers.shift();\n        if (n === 2 && numbers.length >= 3) {\n            // 24-bit RGB\n            r = numbers.shift();\n            g = numbers.shift();\n            b = numbers.shift();\n            if ([r, g, b].some(c => c < 0 || 255 < c)) {\n                throw new RangeError('Invalid range for RGB colors');\n            }\n        }\n        else if (n === 5 && numbers.length >= 1) {\n            // 256 colors\n            const idx = numbers.shift();\n            if (idx < 0) {\n                throw new RangeError('Color index must be >= 0');\n            }\n            else if (idx < 16) {\n                // 16 default terminal colors\n                return idx;\n            }\n            else if (idx < 232) {\n                // 6x6x6 color cube, see https://stackoverflow.com/a/27165165/500098\n                r = Math.floor((idx - 16) / 36);\n                r = r > 0 ? 55 + r * 40 : 0;\n                g = Math.floor(((idx - 16) % 36) / 6);\n                g = g > 0 ? 55 + g * 40 : 0;\n                b = (idx - 16) % 6;\n                b = b > 0 ? 55 + b * 40 : 0;\n            }\n            else if (idx < 256) {\n                // grayscale, see https://stackoverflow.com/a/27165165/500098\n                r = g = b = (idx - 232) * 10 + 8;\n            }\n            else {\n                throw new RangeError('Color index must be < 256');\n            }\n        }\n        else {\n            throw new RangeError('Invalid extended color specification');\n        }\n        return [r, g, b];\n    }\n    /**\n     * Transform ANSI color escape codes into HTML <span> tags with CSS\n     * classes such as \"ansi-green-intense-fg\".\n     * The actual colors used are set in the CSS file.\n     * This also removes non-color escape sequences.\n     * This is supposed to have the same behavior as nbconvert.filters.ansi2html()\n     */\n    function ansiSpan(str) {\n        const ansiRe = /\\x1b\\[(.*?)([@-~])/g; // eslint-disable-line no-control-regex\n        let fg = [];\n        let bg = [];\n        let bold = false;\n        let underline = false;\n        let inverse = false;\n        let match;\n        const out = [];\n        const numbers = [];\n        let start = 0;\n        str = escape(str);\n        str += '\\x1b[m'; // Ensure markup for trailing text\n        // tslint:disable-next-line\n        while ((match = ansiRe.exec(str))) {\n            if (match[2] === 'm') {\n                const items = match[1].split(';');\n                for (let i = 0; i < items.length; i++) {\n                    const item = items[i];\n                    if (item === '') {\n                        numbers.push(0);\n                    }\n                    else if (item.search(/^\\d+$/) !== -1) {\n                        numbers.push(parseInt(item, 10));\n                    }\n                    else {\n                        // Ignored: Invalid color specification\n                        numbers.length = 0;\n                        break;\n                    }\n                }\n            }\n            else {\n                // Ignored: Not a color code\n            }\n            const chunk = str.substring(start, match.index);\n            pushColoredChunk(chunk, fg, bg, bold, underline, inverse, out);\n            start = ansiRe.lastIndex;\n            while (numbers.length) {\n                const n = numbers.shift();\n                switch (n) {\n                    case 0:\n                        fg = bg = [];\n                        bold = false;\n                        underline = false;\n                        inverse = false;\n                        break;\n                    case 1:\n                    case 5:\n                        bold = true;\n                        break;\n                    case 4:\n                        underline = true;\n                        break;\n                    case 7:\n                        inverse = true;\n                        break;\n                    case 21:\n                    case 22:\n                        bold = false;\n                        break;\n                    case 24:\n                        underline = false;\n                        break;\n                    case 27:\n                        inverse = false;\n                        break;\n                    case 30:\n                    case 31:\n                    case 32:\n                    case 33:\n                    case 34:\n                    case 35:\n                    case 36:\n                    case 37:\n                        fg = n - 30;\n                        break;\n                    case 38:\n                        try {\n                            fg = getExtendedColors(numbers);\n                        }\n                        catch (e) {\n                            numbers.length = 0;\n                        }\n                        break;\n                    case 39:\n                        fg = [];\n                        break;\n                    case 40:\n                    case 41:\n                    case 42:\n                    case 43:\n                    case 44:\n                    case 45:\n                    case 46:\n                    case 47:\n                        bg = n - 40;\n                        break;\n                    case 48:\n                        try {\n                            bg = getExtendedColors(numbers);\n                        }\n                        catch (e) {\n                            numbers.length = 0;\n                        }\n                        break;\n                    case 49:\n                        bg = [];\n                        break;\n                    case 90:\n                    case 91:\n                    case 92:\n                    case 93:\n                    case 94:\n                    case 95:\n                    case 96:\n                    case 97:\n                        fg = n - 90 + 8;\n                        break;\n                    case 100:\n                    case 101:\n                    case 102:\n                    case 103:\n                    case 104:\n                    case 105:\n                    case 106:\n                    case 107:\n                        bg = n - 100 + 8;\n                        break;\n                    default:\n                    // Unknown codes are ignored\n                }\n            }\n        }\n        return out.join('');\n    }\n    Private.ansiSpan = ansiSpan;\n})(Private || (Private = {}));\n//# sourceMappingURL=renderers.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The rendermime token.\n */\nexport const IRenderMimeRegistry = new Token('@jupyterlab/rendermime:IRenderMimeRegistry', 'A service for the rendermime registry for the application. Use this to create renderers for various mime-types in your extension. Many times it will be easier to create a \"mime renderer extension\" rather than using this service directly.');\n/**\n * The latex typesetter token.\n */\nexport const ILatexTypesetter = new Token('@jupyterlab/rendermime:ILatexTypesetter', 'A service for the LaTeX typesetter for the application. Use this if you want to typeset math in your extension.');\n/**\n * The markdown parser token.\n */\nexport const IMarkdownParser = new Token('@jupyterlab/rendermime:IMarkdownParser', 'A service for rendering markdown syntax as HTML content.');\n//# sourceMappingURL=tokens.js.map","import { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as renderers from './renderers';\n/**\n * A common base class for mime renderers.\n */\nexport class RenderedCommon extends Widget {\n    /**\n     * Construct a new rendered common widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        var _a, _b;\n        super();\n        this.mimeType = options.mimeType;\n        this.sanitizer = options.sanitizer;\n        this.resolver = options.resolver;\n        this.linkHandler = options.linkHandler;\n        this.translator = (_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator;\n        this.latexTypesetter = options.latexTypesetter;\n        this.markdownParser = (_b = options.markdownParser) !== null && _b !== void 0 ? _b : null;\n        this.node.dataset['mimeType'] = this.mimeType;\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @param keepExisting - Whether to keep the existing rendering.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     *\n     * #### Notes\n     * By default, if the DOM node for this widget already has content, it\n     * is emptied before rendering. Subclasses that do not want this behavior\n     * (if, for instance, they are using DOM diffing), should override this\n     * method or call `super.renderModel(model, true)`.\n     */\n    async renderModel(model, keepExisting) {\n        // TODO compare model against old model for early bail?\n        // Empty any existing content in the node from previous renders\n        if (!keepExisting) {\n            while (this.node.firstChild) {\n                this.node.removeChild(this.node.firstChild);\n            }\n        }\n        // Toggle the trusted class on the widget.\n        this.toggleClass('jp-mod-trusted', model.trusted);\n        // Render the actual content.\n        await this.render(model);\n        // Handle the fragment identifier if given.\n        const { fragment } = model.metadata;\n        if (fragment) {\n            this.setFragment(fragment);\n        }\n    }\n    /**\n     * Set the URI fragment identifier.\n     *\n     * @param fragment - The URI fragment identifier.\n     */\n    setFragment(fragment) {\n        /* no-op */\n    }\n}\n/**\n * A common base class for HTML mime renderers.\n */\nexport class RenderedHTMLCommon extends RenderedCommon {\n    /**\n     * Construct a new rendered HTML common widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedHTMLCommon');\n    }\n    setFragment(fragment) {\n        let el;\n        try {\n            el = this.node.querySelector(fragment.startsWith('#')\n                ? `#${CSS.escape(fragment.slice(1))}`\n                : fragment);\n        }\n        catch (error) {\n            console.warn('Unable to set URI fragment identifier.', error);\n        }\n        if (el) {\n            el.scrollIntoView();\n        }\n    }\n}\n/**\n * A mime renderer for displaying HTML and math.\n */\nexport class RenderedHTML extends RenderedHTMLCommon {\n    /**\n     * Construct a new rendered HTML widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedHTML');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderHTML({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter,\n            translator: this.translator\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A mime renderer for displaying LaTeX output.\n */\nexport class RenderedLatex extends RenderedCommon {\n    /**\n     * Construct a new rendered LaTeX widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedLatex');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderLatex({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A mime renderer for displaying images.\n */\nexport class RenderedImage extends RenderedCommon {\n    /**\n     * Construct a new rendered image widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedImage');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const metadata = model.metadata[this.mimeType];\n        return renderers.renderImage({\n            host: this.node,\n            mimeType: this.mimeType,\n            source: String(model.data[this.mimeType]),\n            width: metadata && metadata.width,\n            height: metadata && metadata.height,\n            needsBackground: model.metadata['needs_background'],\n            unconfined: metadata && metadata.unconfined\n        });\n    }\n}\n/**\n * A mime renderer for displaying Markdown with embedded latex.\n */\nexport class RenderedMarkdown extends RenderedHTMLCommon {\n    /**\n     * Construct a new rendered markdown widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedMarkdown');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderMarkdown({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter,\n            markdownParser: this.markdownParser,\n            translator: this.translator\n        });\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    async renderModel(model) {\n        await super.renderModel(model, true);\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A widget for displaying SVG content.\n */\nexport class RenderedSVG extends RenderedCommon {\n    /**\n     * Construct a new rendered SVG widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedSVG');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const metadata = model.metadata[this.mimeType];\n        return renderers.renderSVG({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            unconfined: metadata && metadata.unconfined,\n            translator: this.translator\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A widget for displaying plain text and console text.\n */\nexport class RenderedText extends RenderedCommon {\n    /**\n     * Construct a new rendered text widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedText');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderText({\n            host: this.node,\n            sanitizer: this.sanitizer,\n            source: String(model.data[this.mimeType]),\n            translator: this.translator\n        });\n    }\n}\n/**\n * A widget for displaying JavaScript output.\n */\nexport class RenderedJavaScript extends RenderedCommon {\n    /**\n     * Construct a new rendered text widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedJavaScript');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const trans = this.translator.load('jupyterlab');\n        return renderers.renderText({\n            host: this.node,\n            sanitizer: this.sanitizer,\n            source: trans.__('JavaScript output is disabled in JupyterLab'),\n            translator: this.translator\n        });\n    }\n}\n//# sourceMappingURL=widgets.js.map","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"'`]/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '`': '&#96;'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n * their corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * Backticks are escaped because in IE < 9, they can break out of\n * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n * [#133](https://html5sec.org/#133) of the\n * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nmodule.exports = escape;\n"],"names":["Private","AttachmentModel","constructor","options","this","trusted","_changed","Signal","_raw","data","getData","value","_data","ObservableJSON","values","_rawData","key","extract","changed","dispose","clearData","metadata","setData","_updateObservable","emit","toJSON","attachment","observable","oldKeys","keys","newKeys","Object","indexOf","delete","oldValue","get","newValue","set","bundle","map","create","mimeType","convertBundle","item","undefined","JSONExt","isPrimitive","deepCopy","getBundleOptions","htmlRendererFactory","safe","mimeTypes","defaultRank","createRenderer","imageRendererFactory","latexRendererFactory","markdownRendererFactory","svgRendererFactory","textRendererFactory","javaScriptRendererFactory","standardRendererFactories","inline","MATHSPLIT","removeMath","text","math","deTilde","start","end","last","braces","includes","replace","wholematch","character","blocks","split","i","m","length","block","charAt","push","processMath","match","slice","substr","join","replaceMath","n","group","substring","j","preProcess","navigator","appName","MimeModel","_metadata","_callback","callback","noOp","OutputModel","_rawMetadata","type","output_type","executionCount","execution_count","output","getMetadata","name","traceback","ename","evalue","JSON","parse","stringify","RenderMimeRegistry","_a","_b","_c","_d","_e","_f","_id","_ranks","_types","_factories","translator","nullTranslator","resolver","linkHandler","latexTypesetter","markdownParser","sanitizer","Sanitizer","initialFactories","factory","addFactory","sortedTypes","preferredMimeType","mt","Error","createModel","clone","_g","_h","_j","_k","getFactory","rank","id","removeMimeType","getRank","setRank","UrlResolver","_path","path","_contents","contents","resolveUrl","url","isLocal","cwd","encodeURI","PathExt","dirname","resolve","getDownloadUrl","urlPath","decodeURIComponent","isMalformed","URLExt","driveName","decodeURI","error","URIError","sort","a","b","p1","p2","renderHTML","host","source","shouldTypeset","trans","load","promise","originalSource","textContent","Promise","sanitize","innerHTML","getElementsByTagName","evalInnerHTMLScriptTags","container","document","createElement","warning","__","runButton","onclick","event","firstChild","removeChild","appendChild","insertBefore","handleDefaults","handleUrls","then","typeset","renderImage","width","height","needsBackground","unconfined","img","src","classList","add","renderLatex","async","renderMarkdown","others","html","parts","render","headerAnchors","renderSVG","search","Image","encodeURIComponent","splitShallowNode","node","at","pre","cloneNode","post","nodeIter","nodes","isText","nodeType","Node","TEXT_NODE","renderText","content","ansiSpan","allowedTags","ret","preTextContent","linkedNodes","getAutolink","call","controlCodes","webLinkRegex","RegExp","lastIndex","exec","index","createTextNode","lastChars","len","anchor","href","startsWith","rel","target","autolink","inAnchorElement","combinedNodes","preNodes","Array","from","childNodes","iterA","iterB","nA","next","nB","done","A","B","alignedNodes","preNode","linkNode","lastCombined","child","createHeaderId","header","handleAttr","getAttribute","protocol","test","Date","getTime","setAttribute","err","handleAnchor","hash","handleLink","catch","scripts","script","parentNode","attrs","attributes","replaceChild","anchors","el","HTMLAnchorElement","imgs","alt","promises","querySelectorAll","links","all","headerNames","headerType","headers","ANSI_COLORS","pushColoredChunk","chunk","fg","bg","bold","underline","inverse","out","classes","styles","getExtendedColors","numbers","r","g","shift","some","c","RangeError","idx","Math","floor","str","ansiRe","items","parseInt","e","IRenderMimeRegistry","Token","ILatexTypesetter","IMarkdownParser","RenderedCommon","Widget","super","dataset","renderModel","model","keepExisting","toggleClass","fragment","setFragment","RenderedHTMLCommon","addClass","querySelector","CSS","escape","console","warn","scrollIntoView","RenderedHTML","String","isAttached","onAfterAttach","msg","RenderedLatex","RenderedImage","RenderedMarkdown","RenderedSVG","RenderedText","RenderedJavaScript","object","reUnescapedHtml","reHasUnescapedHtml","freeGlobal","freeSelf","self","root","Function","escapeHtmlChar","objectToString","prototype","toString","Symbol","symbolProto","symbolToString","module","exports","string","isObjectLike","isSymbol","result","baseToString"],"sourceRoot":""}