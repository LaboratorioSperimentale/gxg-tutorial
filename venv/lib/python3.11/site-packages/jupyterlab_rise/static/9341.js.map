{"version":3,"file":"9341.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/crumbs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/listing.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/opendialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/upload.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/uploadstatus.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { renameFile } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ellipsesIcon, homeIcon as preferredIcon, folderIcon as rootIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { ElementExt } from '@lumino/domutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_CLASS = 'jp-BreadCrumbs';\n/**\n * The class name for the breadcrumbs home node\n */\nconst BREADCRUMB_ROOT_CLASS = 'jp-BreadCrumbs-home';\n/**\n * The class name for the breadcrumbs preferred node\n */\nconst BREADCRUMB_PREFERRED_CLASS = 'jp-BreadCrumbs-preferred';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_ITEM_CLASS = 'jp-BreadCrumbs-item';\n/**\n * Bread crumb paths.\n */\nconst BREAD_CRUMB_PATHS = ['/', '../../', '../', ''];\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * A class which hosts folder breadcrumbs.\n */\nexport class BreadCrumbs extends Widget {\n    /**\n     * Construct a new file browser crumb widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this.addClass(BREADCRUMB_CLASS);\n        this._crumbs = Private.createCrumbs();\n        this._crumbSeps = Private.createCrumbSeparators();\n        const hasPreferred = PageConfig.getOption('preferredPath');\n        this._hasPreferred = hasPreferred && hasPreferred !== '/' ? true : false;\n        if (this._hasPreferred) {\n            this.node.appendChild(this._crumbs[Private.Crumb.Preferred]);\n        }\n        this.node.appendChild(this._crumbs[Private.Crumb.Home]);\n        this._model.refreshed.connect(this.update, this);\n    }\n    /**\n     * Handle the DOM events for the bread crumbs.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.update();\n        const node = this.node;\n        node.addEventListener('click', this);\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        node.removeEventListener('click', this);\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        // Update the breadcrumb list.\n        const contents = this._model.manager.services.contents;\n        const localPath = contents.localPath(this._model.path);\n        Private.updateCrumbs(this._crumbs, this._crumbSeps, localPath, this._hasPreferred);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Find a valid click target.\n        let node = event.target;\n        while (node && node !== this.node) {\n            if (node.classList.contains(BREADCRUMB_PREFERRED_CLASS)) {\n                this._model\n                    .cd(PageConfig.getOption('preferredPath'))\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            if (node.classList.contains(BREADCRUMB_ITEM_CLASS) ||\n                node.classList.contains(BREADCRUMB_ROOT_CLASS)) {\n                const index = ArrayExt.findFirstIndex(this._crumbs, value => value === node);\n                this._model\n                    .cd(BREAD_CRUMB_PATHS[index])\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            node = node.parentElement;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n            if (index !== -1) {\n                if (index !== Private.Crumb.Current) {\n                    this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n        if (index !== -1) {\n            this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        event.dropAction = event.proposedAction;\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => node === target);\n        if (index === -1) {\n            return;\n        }\n        const model = this._model;\n        const path = PathExt.resolve(model.path, BREAD_CRUMB_PATHS[index]);\n        const manager = model.manager;\n        // Move all of the items.\n        const promises = [];\n        const oldPaths = event.mimeData.getData(CONTENTS_MIME);\n        for (const oldPath of oldPaths) {\n            const localOldPath = manager.services.contents.localPath(oldPath);\n            const name = PathExt.basename(localOldPath);\n            const newPath = PathExt.join(path, name);\n            promises.push(renameFile(manager, oldPath, newPath));\n        }\n        void Promise.all(promises).catch(err => {\n            return showErrorMessage(this._trans.__('Move Error'), err);\n        });\n    }\n}\n/**\n * The namespace for the crumbs private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Breadcrumb item list enum.\n     */\n    let Crumb;\n    (function (Crumb) {\n        Crumb[Crumb[\"Home\"] = 0] = \"Home\";\n        Crumb[Crumb[\"Ellipsis\"] = 1] = \"Ellipsis\";\n        Crumb[Crumb[\"Parent\"] = 2] = \"Parent\";\n        Crumb[Crumb[\"Current\"] = 3] = \"Current\";\n        Crumb[Crumb[\"Preferred\"] = 4] = \"Preferred\";\n    })(Crumb = Private.Crumb || (Private.Crumb = {}));\n    /**\n     * Populate the breadcrumb node.\n     */\n    function updateCrumbs(breadcrumbs, separators, path, hasPreferred) {\n        const node = breadcrumbs[0].parentNode;\n        // Remove all but the home or preferred node.\n        const firstChild = node.firstChild;\n        while (firstChild && firstChild.nextSibling) {\n            node.removeChild(firstChild.nextSibling);\n        }\n        if (hasPreferred) {\n            node.appendChild(breadcrumbs[Crumb.Home]);\n            node.appendChild(separators[0]);\n        }\n        else {\n            node.appendChild(separators[0]);\n        }\n        const parts = path.split('/');\n        if (parts.length > 2) {\n            node.appendChild(breadcrumbs[Crumb.Ellipsis]);\n            const grandParent = parts.slice(0, parts.length - 2).join('/');\n            breadcrumbs[Crumb.Ellipsis].title = grandParent;\n            node.appendChild(separators[1]);\n        }\n        if (path) {\n            if (parts.length >= 2) {\n                breadcrumbs[Crumb.Parent].textContent = parts[parts.length - 2];\n                node.appendChild(breadcrumbs[Crumb.Parent]);\n                const parent = parts.slice(0, parts.length - 1).join('/');\n                breadcrumbs[Crumb.Parent].title = parent;\n                node.appendChild(separators[2]);\n            }\n            breadcrumbs[Crumb.Current].textContent = parts[parts.length - 1];\n            node.appendChild(breadcrumbs[Crumb.Current]);\n            breadcrumbs[Crumb.Current].title = path;\n            node.appendChild(separators[3]);\n        }\n    }\n    Private.updateCrumbs = updateCrumbs;\n    /**\n     * Create the breadcrumb nodes.\n     */\n    function createCrumbs() {\n        const home = rootIcon.element({\n            className: BREADCRUMB_ROOT_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('serverRoot') || 'Jupyter Server Root',\n            stylesheet: 'breadCrumb'\n        });\n        const ellipsis = ellipsesIcon.element({\n            className: BREADCRUMB_ITEM_CLASS,\n            tag: 'span',\n            stylesheet: 'breadCrumb'\n        });\n        const parent = document.createElement('span');\n        parent.className = BREADCRUMB_ITEM_CLASS;\n        const current = document.createElement('span');\n        current.className = BREADCRUMB_ITEM_CLASS;\n        const preferred = preferredIcon.element({\n            className: BREADCRUMB_PREFERRED_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('preferredPath') || 'Jupyter Preferred Path',\n            stylesheet: 'breadCrumb'\n        });\n        return [home, ellipsis, parent, current, preferred];\n    }\n    Private.createCrumbs = createCrumbs;\n    /**\n     * Create the breadcrumb separator nodes.\n     */\n    function createCrumbSeparators() {\n        const items = [];\n        // The maximum number of directories that will be shown in the crumbs\n        const MAX_DIRECTORIES = 2;\n        // Make separators for after each directory, one at the beginning, and one\n        // after a possible ellipsis.\n        for (let i = 0; i < MAX_DIRECTORIES + 2; i++) {\n            const item = document.createElement('span');\n            item.textContent = '/';\n            items.push(item);\n        }\n        return items;\n    }\n    Private.createCrumbSeparators = createCrumbSeparators;\n})(Private || (Private = {}));\n//# sourceMappingURL=crumbs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, DOMUtils, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { isValidFileName, renameFile } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { caretDownIcon, caretUpIcon, classes, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, filter, StringExt } from '@lumino/algorithm';\nimport { MimeData, PromiseDelegate } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to DirListing widget.\n */\nconst DIR_LISTING_CLASS = 'jp-DirListing';\n/**\n * The class name added to a dir listing header node.\n */\nconst HEADER_CLASS = 'jp-DirListing-header';\n/**\n * The class name added to a dir listing list header cell.\n */\nconst HEADER_ITEM_CLASS = 'jp-DirListing-headerItem';\n/**\n * The class name added to a header cell text node.\n */\nconst HEADER_ITEM_TEXT_CLASS = 'jp-DirListing-headerItemText';\n/**\n * The class name added to a header cell icon node.\n */\nconst HEADER_ITEM_ICON_CLASS = 'jp-DirListing-headerItemIcon';\n/**\n * The class name added to the dir listing content node.\n */\nconst CONTENT_CLASS = 'jp-DirListing-content';\n/**\n * The class name added to dir listing content item.\n */\nconst ITEM_CLASS = 'jp-DirListing-item';\n/**\n * The class name added to the listing item text cell.\n */\nconst ITEM_TEXT_CLASS = 'jp-DirListing-itemText';\n/**\n * The class name added to the listing item icon cell.\n */\nconst ITEM_ICON_CLASS = 'jp-DirListing-itemIcon';\n/**\n * The class name added to the listing item modified cell.\n */\nconst ITEM_MODIFIED_CLASS = 'jp-DirListing-itemModified';\n/**\n * The class name added to the listing item file size cell.\n */\nconst ITEM_FILE_SIZE_CLASS = 'jp-DirListing-itemFileSize';\n/**\n * The class name added to the label element that wraps each item's checkbox and\n * the header's check-all checkbox.\n */\nconst CHECKBOX_WRAPPER_CLASS = 'jp-DirListing-checkboxWrapper';\n/**\n * The class name added to the dir listing editor node.\n */\nconst EDITOR_CLASS = 'jp-DirListing-editor';\n/**\n * The class name added to the name column header cell.\n */\nconst NAME_ID_CLASS = 'jp-id-name';\n/**\n * The class name added to the modified column header cell.\n */\nconst MODIFIED_ID_CLASS = 'jp-id-modified';\n/**\n * The class name added to the file size column header cell.\n */\nconst FILE_SIZE_ID_CLASS = 'jp-id-filesize';\n/**\n * The class name added to the narrow column header cell.\n */\nconst NARROW_ID_CLASS = 'jp-id-narrow';\n/**\n * The class name added to the modified column header cell and modified item cell when hidden.\n */\nconst MODIFIED_COLUMN_HIDDEN = 'jp-LastModified-hidden';\n/**\n * The class name added to the size column header cell and size item cell when hidden.\n */\nconst FILE_SIZE_COLUMN_HIDDEN = 'jp-FileSize-hidden';\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to selected rows.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to drag state icons to add space between the icon and the file name\n */\nconst DRAG_ICON_CLASS = 'jp-DragIcon';\n/**\n * The class name added to the widget when there are items on the clipboard.\n */\nconst CLIPBOARD_CLASS = 'jp-mod-clipboard';\n/**\n * The class name added to cut rows.\n */\nconst CUT_CLASS = 'jp-mod-cut';\n/**\n * The class name added when there are more than one selected rows.\n */\nconst MULTI_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to indicate running notebook.\n */\nconst RUNNING_CLASS = 'jp-mod-running';\n/**\n * The class name added for a descending sort.\n */\nconst DESCENDING_CLASS = 'jp-mod-descending';\n/**\n * The maximum duration between two key presses when selecting files by prefix.\n */\nconst PREFIX_APPEND_DURATION = 1000;\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * A boolean indicating whether the platform is Mac.\n */\nconst IS_MAC = !!navigator.platform.match(/Mac/i);\n/**\n * The factory MIME type supported by lumino dock panels.\n */\nconst FACTORY_MIME = 'application/vnd.lumino.widget-factory';\n/**\n * A widget which hosts a file list area.\n */\nexport class DirListing extends Widget {\n    /**\n     * Construct a new file browser directory listing widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super({\n            node: (options.renderer || DirListing.defaultRenderer).createNode()\n        });\n        this._items = [];\n        this._sortedItems = [];\n        this._sortState = {\n            direction: 'ascending',\n            key: 'name'\n        };\n        this._onItemOpened = new Signal(this);\n        this._drag = null;\n        this._dragData = null;\n        this._selectTimer = -1;\n        this._isCut = false;\n        this._prevPath = '';\n        this._clipboard = [];\n        this._softSelection = '';\n        this.selection = Object.create(null);\n        this._searchPrefix = '';\n        this._searchPrefixTimer = -1;\n        this._inRename = false;\n        this._isDirty = false;\n        this._hiddenColumns = new Set();\n        this._sortNotebooksFirst = false;\n        // _focusIndex should never be set outside the range [0, this._items.length - 1]\n        this._focusIndex = 0;\n        this.addClass(DIR_LISTING_CLASS);\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this._model.fileChanged.connect(this._onFileChanged, this);\n        this._model.refreshed.connect(this._onModelRefreshed, this);\n        this._model.pathChanged.connect(this._onPathChanged, this);\n        this._editNode = document.createElement('input');\n        this._editNode.className = EDITOR_CLASS;\n        this._manager = this._model.manager;\n        this._renderer = options.renderer || DirListing.defaultRenderer;\n        const headerNode = DOMUtils.findElement(this.node, HEADER_CLASS);\n        // hide the file size column by default\n        this._hiddenColumns.add('file_size');\n        this._renderer.populateHeaderNode(headerNode, this.translator, this._hiddenColumns);\n        this._manager.activateRequested.connect(this._onActivateRequested, this);\n    }\n    /**\n     * Dispose of the resources held by the directory listing.\n     */\n    dispose() {\n        this._items.length = 0;\n        this._sortedItems.length = 0;\n        this._clipboard.length = 0;\n        super.dispose();\n    }\n    /**\n     * Get the model used by the listing.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the dir listing header node.\n     *\n     * #### Notes\n     * This is the node which holds the header cells.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get headerNode() {\n        return DOMUtils.findElement(this.node, HEADER_CLASS);\n    }\n    /**\n     * Get the dir listing content node.\n     *\n     * #### Notes\n     * This is the node which holds the item nodes.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get contentNode() {\n        return DOMUtils.findElement(this.node, CONTENT_CLASS);\n    }\n    /**\n     * The renderer instance used by the directory listing.\n     */\n    get renderer() {\n        return this._renderer;\n    }\n    /**\n     * The current sort state.\n     */\n    get sortState() {\n        return this._sortState;\n    }\n    /**\n     * A signal fired when an item is opened.\n     */\n    get onItemOpened() {\n        return this._onItemOpened;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        const items = this._sortedItems;\n        return filter(items, item => this.selection[item.path]);\n    }\n    /**\n     * Create an iterator over the listing's sorted items.\n     *\n     * @returns A new iterator over the listing's sorted items.\n     */\n    sortedItems() {\n        return this._sortedItems[Symbol.iterator]();\n    }\n    /**\n     * Sort the items using a sort condition.\n     */\n    sort(state) {\n        this._sortedItems = Private.sort(this.model.items(), state, this._sortNotebooksFirst);\n        this._sortState = state;\n        this.update();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this._doRename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this._isCut = true;\n        this._copy();\n        this.update();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this._copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        if (!this._clipboard.length) {\n            this._isCut = false;\n            return Promise.resolve(undefined);\n        }\n        const basePath = this._model.path;\n        const promises = [];\n        for (const path of this._clipboard) {\n            if (this._isCut) {\n                const localPath = this._manager.services.contents.localPath(path);\n                const parts = localPath.split('/');\n                const name = parts[parts.length - 1];\n                const newPath = PathExt.join(basePath, name);\n                promises.push(this._model.manager.rename(path, newPath));\n            }\n            else {\n                promises.push(this._model.manager.copy(path, basePath));\n            }\n        }\n        // Remove any cut modifiers.\n        for (const item of this._items) {\n            item.classList.remove(CUT_CLASS);\n        }\n        this._clipboard.length = 0;\n        this._isCut = false;\n        this.removeClass(CLIPBOARD_CLASS);\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Paste Error'), error);\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async delete() {\n        const items = this._sortedItems.filter(item => this.selection[item.path]);\n        if (!items.length) {\n            return;\n        }\n        const message = items.length === 1\n            ? this._trans.__('Are you sure you want to permanently delete: %1?', items[0].name)\n            : this._trans._n('Are you sure you want to permanently delete the %1 selected item?', 'Are you sure you want to permanently delete the %1 selected items?', items.length);\n        const result = await showDialog({\n            title: this._trans.__('Delete'),\n            body: message,\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Delete') })\n            ],\n            // By default focus on \"Cancel\" to protect from accidental deletion\n            // (\"delete\" and \"Enter\" are next to each other on many keyboards).\n            defaultButton: 0\n        });\n        if (!this.isDisposed && result.button.accept) {\n            await this._delete(items.map(item => item.path));\n        }\n        // Re-focus\n        let focusIndex = this._focusIndex;\n        const lastIndexAfterDelete = this._sortedItems.length - items.length - 1;\n        if (focusIndex > lastIndexAfterDelete) {\n            // If the focus index after deleting items is out of bounds, set it to the\n            // last item.\n            focusIndex = Math.max(0, lastIndexAfterDelete);\n        }\n        this._focusItem(focusIndex);\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        const basePath = this._model.path;\n        const promises = [];\n        for (const item of this.selectedItems()) {\n            if (item.type !== 'directory') {\n                promises.push(this._model.manager.copy(item.path, basePath));\n            }\n        }\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Duplicate file'), error);\n        });\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    async download() {\n        await Promise.all(Array.from(this.selectedItems())\n            .filter(item => item.type !== 'directory')\n            .map(item => this._model.download(item.path)));\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        const model = this._model;\n        const items = this._sortedItems;\n        const paths = items.map(item => item.path);\n        const promises = Array.from(this._model.sessions())\n            .filter(session => {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            return this.selection[items[index].path];\n        })\n            .map(session => model.manager.services.sessions.shutdown(session.id));\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Shut down kernel'), error);\n        });\n    }\n    /**\n     * Select next item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectNext(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the next item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index += 1;\n            if (index === this._items.length) {\n                index = 0;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the first item.\n            index = 0;\n        }\n        else {\n            // Select the last selected item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select previous item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectPrevious(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the previous item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index -= 1;\n            if (index === -1) {\n                index = this._items.length - 1;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the last item.\n            index = this._items.length - 1;\n        }\n        else {\n            // Select the first selected item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select the first item that starts with prefix being typed.\n     */\n    selectByPrefix() {\n        const prefix = this._searchPrefix.toLowerCase();\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => {\n            return value.name.toLowerCase().substr(0, prefix.length) === prefix;\n        });\n        if (index !== -1) {\n            this._selectItem(index, false);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Get whether an item is selected by name.\n     *\n     * @param name - The name of of the item.\n     *\n     * @returns Whether the item is selected.\n     */\n    isSelected(name) {\n        const items = this._sortedItems;\n        return (Array.from(filter(items, item => item.name === name && this.selection[item.path])).length !== 0);\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        if (index !== -1) {\n            return items[index];\n        }\n        return undefined;\n    }\n    /**\n     * Clear the selected items.\n     */\n    clearSelectedItems() {\n        this.selection = Object.create(null);\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     * @param focus - Whether to move focus to the selected item.\n     *\n     * @returns A promise that resolves when the name is selected.\n     */\n    async selectItemByName(name, focus = false) {\n        // Make sure the file is available.\n        await this.model.refresh();\n        if (this.isDisposed) {\n            throw new Error('File browser is disposed.');\n        }\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        if (index === -1) {\n            throw new Error('Item does not exist.');\n        }\n        this._selectItem(index, false, focus);\n        MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n        ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'mouseup':\n                this._evtMouseup(event);\n                break;\n            case 'mousemove':\n                this._evtMousemove(event);\n                break;\n            case 'keydown':\n                this.evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'dblclick':\n                this.evtDblClick(event);\n                break;\n            case 'dragenter':\n            case 'dragover':\n                this.addClass('jp-mod-native-drop');\n                event.preventDefault();\n                break;\n            case 'dragleave':\n            case 'dragend':\n                this.removeClass('jp-mod-native-drop');\n                break;\n            case 'drop':\n                this.removeClass('jp-mod-native-drop');\n                this.evtNativeDrop(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            case 'lm-dragenter':\n                this.evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this.evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this.evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this.evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('click', this);\n        node.addEventListener('dblclick', this);\n        content.addEventListener('dragenter', this);\n        content.addEventListener('dragover', this);\n        content.addEventListener('dragleave', this);\n        content.addEventListener('dragend', this);\n        content.addEventListener('drop', this);\n        content.addEventListener('scroll', this);\n        content.addEventListener('lm-dragenter', this);\n        content.addEventListener('lm-dragleave', this);\n        content.addEventListener('lm-dragover', this);\n        content.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('click', this);\n        node.removeEventListener('dblclick', this);\n        content.removeEventListener('scroll', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragleave', this);\n        content.removeEventListener('dragend', this);\n        content.removeEventListener('drop', this);\n        content.removeEventListener('lm-dragenter', this);\n        content.removeEventListener('lm-dragleave', this);\n        content.removeEventListener('lm-dragover', this);\n        content.removeEventListener('lm-drop', this);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._isDirty) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n            this.update();\n        }\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        var _a;\n        this._isDirty = false;\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const nodes = this._items;\n        const content = DOMUtils.findElement(this.node, CONTENT_CLASS);\n        const renderer = this._renderer;\n        this.removeClass(MULTI_SELECTED_CLASS);\n        this.removeClass(SELECTED_CLASS);\n        // Remove any excess item nodes.\n        while (nodes.length > items.length) {\n            content.removeChild(nodes.pop());\n        }\n        // Add any missing item nodes.\n        while (nodes.length < items.length) {\n            const node = renderer.createItemNode(this._hiddenColumns);\n            node.classList.add(ITEM_CLASS);\n            nodes.push(node);\n            content.appendChild(node);\n        }\n        nodes.forEach((node, i) => {\n            // Remove extra classes from the nodes.\n            node.classList.remove(SELECTED_CLASS);\n            node.classList.remove(RUNNING_CLASS);\n            node.classList.remove(CUT_CLASS);\n            // Uncheck each file checkbox\n            const checkbox = renderer.getCheckboxNode(node);\n            if (checkbox) {\n                checkbox.checked = false;\n            }\n            // Handle `tabIndex`\n            const nameNode = renderer.getNameNode(node);\n            if (nameNode) {\n                // Must check if the name node is there because it gets replaced by the\n                // edit node when editing the name of the file or directory.\n                nameNode.tabIndex = i === this._focusIndex ? 0 : -1;\n            }\n        });\n        // Put the check-all checkbox in the header into the correct state\n        const checkAllCheckbox = renderer.getCheckboxNode(this.headerNode);\n        if (checkAllCheckbox) {\n            const totalSelected = Object.keys(this.selection).length;\n            const allSelected = items.length > 0 && totalSelected === items.length;\n            const someSelected = !allSelected && totalSelected > 0;\n            checkAllCheckbox.checked = allSelected;\n            checkAllCheckbox.indeterminate = someSelected;\n            // Stash the state in data attributes so we can access them in the click\n            // handler (because in the click handler, checkbox.checked and\n            // checkbox.indeterminate do not hold the previous value; they hold the\n            // next value).\n            checkAllCheckbox.dataset.checked = String(allSelected);\n            checkAllCheckbox.dataset.indeterminate = String(someSelected);\n            const trans = this.translator.load('jupyterlab');\n            checkAllCheckbox === null || checkAllCheckbox === void 0 ? void 0 : checkAllCheckbox.setAttribute('aria-label', allSelected || someSelected\n                ? trans.__('Deselect all files and directories')\n                : trans.__('Select all files and directories'));\n        }\n        // Update item nodes based on widget state.\n        items.forEach((item, i) => {\n            const node = nodes[i];\n            const ft = this._manager.registry.getFileTypeForModel(item);\n            renderer.updateItemNode(node, item, ft, this.translator, this._hiddenColumns, this.selection[item.path]);\n            if (this.selection[item.path] &&\n                this._isCut &&\n                this._model.path === this._prevPath) {\n                node.classList.add(CUT_CLASS);\n            }\n            // add metadata to the node\n            node.setAttribute('data-isdir', item.type === 'directory' ? 'true' : 'false');\n        });\n        // Handle the selectors on the widget node.\n        const selected = Object.keys(this.selection).length;\n        if (selected) {\n            this.addClass(SELECTED_CLASS);\n            if (selected > 1) {\n                this.addClass(MULTI_SELECTED_CLASS);\n            }\n        }\n        // Handle file session statuses.\n        const paths = items.map(item => item.path);\n        for (const session of this._model.sessions()) {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            const node = nodes[index];\n            // Node may have been filtered out.\n            if (node) {\n                let name = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.name;\n                const specs = this._model.specs;\n                node.classList.add(RUNNING_CLASS);\n                if (specs && name) {\n                    const spec = specs.kernelspecs[name];\n                    name = spec ? spec.display_name : this._trans.__('unknown');\n                }\n                node.title = this._trans.__('%1\\nKernel: %2', node.title, name);\n            }\n        }\n        this._prevPath = this._model.path;\n    }\n    onResize(msg) {\n        const { width } = msg.width === -1 ? this.node.getBoundingClientRect() : msg;\n        this.toggleClass('jp-DirListing-narrow', width < 250);\n    }\n    setColumnVisibility(name, visible) {\n        if (visible) {\n            this._hiddenColumns.delete(name);\n        }\n        else {\n            this._hiddenColumns.add(name);\n        }\n        this.headerNode.innerHTML = '';\n        this._renderer.populateHeaderNode(this.headerNode, this.translator, this._hiddenColumns);\n    }\n    /**\n     * Update the setting to sort notebooks above files.\n     * This sorts the items again if the internal value is modified.\n     */\n    setNotebooksFirstSorting(isEnabled) {\n        let previousValue = this._sortNotebooksFirst;\n        this._sortNotebooksFirst = isEnabled;\n        if (this._sortNotebooksFirst !== previousValue) {\n            this.sort(this._sortState);\n        }\n    }\n    /**\n     * Would this click (or other event type) hit the checkbox by default?\n     */\n    isWithinCheckboxHitArea(event) {\n        let element = event.target;\n        while (element) {\n            if (element.classList.contains(CHECKBOX_WRAPPER_CLASS)) {\n                return true;\n            }\n            element = element.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        const header = this.headerNode;\n        const renderer = this._renderer;\n        if (header.contains(target)) {\n            const checkbox = renderer.getCheckboxNode(header);\n            if (checkbox && this.isWithinCheckboxHitArea(event)) {\n                const previouslyUnchecked = checkbox.dataset.indeterminate === 'false' &&\n                    checkbox.dataset.checked === 'false';\n                // The only time a click on the check-all checkbox should check all is\n                // when it was previously unchecked; otherwise, if the checkbox was\n                // either checked (all selected) or indeterminate (some selected), the\n                // click should clear all.\n                if (previouslyUnchecked) {\n                    // Select all items\n                    this._sortedItems.forEach((item) => (this.selection[item.path] = true));\n                }\n                else {\n                    // Unselect all items\n                    this.clearSelectedItems();\n                }\n                this.update();\n            }\n            else {\n                const state = this.renderer.handleHeaderClick(header, event);\n                if (state) {\n                    this.sort(state);\n                }\n            }\n            return;\n        }\n        else {\n            // Focus the selected file on click to ensure a couple of things:\n            // 1. If a user clicks on the item node, its name node will receive focus.\n            // 2. If a user clicks on blank space in the directory listing, the\n            //    previously focussed item will be focussed.\n            this._focusItem(this._focusIndex);\n        }\n    }\n    /**\n     * Handle the `'scroll'` event for the widget.\n     */\n    _evtScroll(event) {\n        this.headerNode.scrollLeft = this.contentNode.scrollLeft;\n    }\n    /**\n     * Handle the `'mousedown'` event for the widget.\n     */\n    _evtMousedown(event) {\n        // Bail if clicking within the edit node\n        if (event.target === this._editNode) {\n            return;\n        }\n        // Blur the edit node if necessary.\n        if (this._editNode.parentNode) {\n            if (this._editNode !== event.target) {\n                this._editNode.focus();\n                this._editNode.blur();\n                clearTimeout(this._selectTimer);\n            }\n            else {\n                return;\n            }\n        }\n        let index = Private.hitTestNodes(this._items, event);\n        if (index === -1) {\n            return;\n        }\n        this.handleFileSelect(event);\n        if (event.button !== 0) {\n            clearTimeout(this._selectTimer);\n        }\n        // Check for clearing a context menu.\n        const newContext = (IS_MAC && event.ctrlKey) || event.button === 2;\n        if (newContext) {\n            return;\n        }\n        // Left mouse press for drag start.\n        if (event.button === 0) {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: index\n            };\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseup(event) {\n        // Handle any soft selection from the previous mouse down.\n        if (this._softSelection) {\n            const altered = event.metaKey || event.shiftKey || event.ctrlKey;\n            // See if we need to clear the other selection.\n            if (!altered && event.button === 0) {\n                this.clearSelectedItems();\n                this.selection[this._softSelection] = true;\n                this.update();\n            }\n            this._softSelection = '';\n        }\n        // Re-focus. This is needed because nodes corresponding to files selected in\n        // mousedown handler will not retain the focus as mousedown event is always\n        // followed by a blur/focus event.\n        if (event.button === 0) {\n            this._focusItem(this._focusIndex);\n        }\n        // Remove the drag listeners if necessary.\n        if (event.button !== 0 || !this._drag) {\n            document.removeEventListener('mousemove', this, true);\n            document.removeEventListener('mouseup', this, true);\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Bail if we are the one dragging.\n        if (this._drag || !this._dragData) {\n            return;\n        }\n        // Check for a drag initialization.\n        const data = this._dragData;\n        const dx = Math.abs(event.clientX - data.pressX);\n        const dy = Math.abs(event.clientY - data.pressY);\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\n            return;\n        }\n        this._startDrag(data.index, event.clientX, event.clientY);\n    }\n    /**\n     * Handle the opening of an item.\n     */\n    handleOpen(item) {\n        this._onItemOpened.emit(item);\n        if (item.type === 'directory') {\n            const localPath = this._manager.services.contents.localPath(item.path);\n            this._model\n                .cd(`/${localPath}`)\n                .catch(error => showErrorMessage(this._trans._p('showErrorMessage', 'Open directory'), error));\n        }\n        else {\n            const path = item.path;\n            this._manager.openOrReveal(path);\n        }\n    }\n    /**\n     * Calculate the next focus index, given the current focus index and a\n     * direction, keeping within the bounds of the directory listing.\n     *\n     * @param index Current focus index\n     * @param direction -1 (up) or 1 (down)\n     * @returns The next focus index, which could be the same as the current focus\n     * index if at the boundary.\n     */\n    _getNextFocusIndex(index, direction) {\n        const nextIndex = index + direction;\n        if (nextIndex === -1 || nextIndex === this._items.length) {\n            // keep focus index within bounds\n            return index;\n        }\n        else {\n            return nextIndex;\n        }\n    }\n    /**\n     * Handle the up or down arrow key.\n     *\n     * @param event The keyboard event\n     * @param direction -1 (up) or 1 (down)\n     */\n    _handleArrowY(event, direction) {\n        // We only handle the `ctrl` and `shift` modifiers. If other modifiers are\n        // present, then do nothing.\n        if (event.altKey || event.metaKey) {\n            return;\n        }\n        // If folder is empty, there's nothing to do with the up/down key.\n        if (!this._items.length) {\n            return;\n        }\n        // Don't handle the arrow key press if it's not on directory item. This\n        // avoids a confusing user experience that can result from when the user\n        // moves the selection and focus index apart (via ctrl + up/down). The last\n        // selected item remains highlighted but the last focussed item loses its\n        // focus ring if it's not actively focussed.  This forces the user to\n        // visibly reveal the last focussed item before moving the focus.\n        if (!event.target.classList.contains(ITEM_TEXT_CLASS)) {\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        const focusIndex = this._focusIndex;\n        let nextFocusIndex = this._getNextFocusIndex(focusIndex, direction);\n        // The following if-block allows the first press of the down arrow to select\n        // the first (rather than the second) file/directory in the list. This is\n        // the situation when the page first loads or when a user changes directory.\n        if (direction > 0 &&\n            focusIndex === 0 &&\n            !event.ctrlKey &&\n            Object.keys(this.selection).length === 0) {\n            nextFocusIndex = 0;\n        }\n        // Shift key indicates multi-selection. Either the user is trying to grow\n        // the selection, or shrink it.\n        if (event.shiftKey) {\n            this._handleMultiSelect(nextFocusIndex);\n        }\n        else if (!event.ctrlKey) {\n            // If neither the shift nor ctrl keys were used with the up/down arrow,\n            // then we treat it as a normal, unmodified key press and select the\n            // next item.\n            this._selectItem(nextFocusIndex, event.shiftKey, false /* focus = false because we call focus method directly following this */);\n        }\n        this._focusItem(nextFocusIndex);\n        this.update();\n    }\n    /**\n     * cd ..\n     *\n     * Go up one level in the directory tree.\n     */\n    async goUp() {\n        const model = this.model;\n        if (model.path === model.rootPath) {\n            return;\n        }\n        try {\n            await model.cd('..');\n        }\n        catch (reason) {\n            console.warn(`Failed to go to parent directory of ${model.path}`, reason);\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    evtKeydown(event) {\n        // Do not handle any keydown events here if in the middle of a file rename.\n        if (this._inRename) {\n            return;\n        }\n        switch (event.keyCode) {\n            case 13: {\n                // Enter\n                // Do nothing if any modifier keys are pressed.\n                if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n                for (const item of this.selectedItems()) {\n                    this.handleOpen(item);\n                }\n                return;\n            }\n            case 38:\n                // Up arrow\n                this._handleArrowY(event, -1);\n                return;\n            case 40:\n                // Down arrow\n                this._handleArrowY(event, 1);\n                return;\n            case 32: {\n                // Space\n                if (event.ctrlKey) {\n                    // Follow the Windows and Ubuntu convention: you must press `ctrl` +\n                    // `space` in order to toggle whether an item is selected.\n                    // However, do not handle if any other modifiers were pressed.\n                    if (event.metaKey || event.shiftKey || event.altKey) {\n                        return;\n                    }\n                    // Make sure the ctrl+space key stroke was on a valid, focussed target.\n                    const node = this._items[this._focusIndex];\n                    if (!(\n                    // Event must have occurred within a node whose item can be toggled.\n                    (node.contains(event.target) &&\n                        // That node must also contain the currently focussed element.\n                        node.contains(document.activeElement)))) {\n                        return;\n                    }\n                    event.stopPropagation();\n                    // Prevent default, otherwise the container will scroll.\n                    event.preventDefault();\n                    // Toggle item selected\n                    const { path } = this._sortedItems[this._focusIndex];\n                    if (this.selection[path]) {\n                        delete this.selection[path];\n                    }\n                    else {\n                        this.selection[path] = true;\n                    }\n                    this.update();\n                    // Key was handled, so return.\n                    return;\n                }\n                break;\n            }\n        }\n        // Detects printable characters typed by the user.\n        // Not all browsers support .key, but it discharges us from reconstructing\n        // characters from key codes.\n        if (event.key !== undefined &&\n            event.key.length === 1 &&\n            // Don't gobble up the space key on the check-all checkbox (which the\n            // browser treats as a click event).\n            !((event.key === ' ' || event.keyCode === 32) &&\n                event.target.type === 'checkbox')) {\n            if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                return;\n            }\n            this._searchPrefix += event.key;\n            clearTimeout(this._searchPrefixTimer);\n            this._searchPrefixTimer = window.setTimeout(() => {\n                this._searchPrefix = '';\n            }, PREFIX_APPEND_DURATION);\n            this.selectByPrefix();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle the `'dblclick'` event for the widget.\n     */\n    evtDblClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Do nothing if any modifier keys are pressed.\n        if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n            return;\n        }\n        // Do nothing if the double click is on a checkbox. (Otherwise a rapid\n        // check-uncheck on the checkbox will cause the adjacent file/folder to\n        // open, which is probably not what the user intended.)\n        if (this.isWithinCheckboxHitArea(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        this._editNode.blur();\n        // Find a valid double click target.\n        const target = event.target;\n        const i = ArrayExt.findFirstIndex(this._items, node => node.contains(target));\n        if (i === -1) {\n            return;\n        }\n        const item = this._sortedItems[i];\n        this.handleOpen(item);\n    }\n    /**\n     * Handle the `drop` event for the widget.\n     */\n    evtNativeDrop(event) {\n        var _a, _b, _c;\n        const files = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;\n        if (!files || files.length === 0) {\n            return;\n        }\n        const length = (_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.items.length;\n        if (!length) {\n            return;\n        }\n        for (let i = 0; i < length; i++) {\n            let entry = (_c = event.dataTransfer) === null || _c === void 0 ? void 0 : _c.items[i].webkitGetAsEntry();\n            if (entry === null || entry === void 0 ? void 0 : entry.isDirectory) {\n                console.log('currently not supporting drag + drop for folders');\n                void showDialog({\n                    title: this._trans.__('Error Uploading Folder'),\n                    body: this._trans.__('Drag and Drop is currently not supported for folders'),\n                    buttons: [Dialog.cancelButton({ label: this._trans.__('Close') })]\n                });\n            }\n        }\n        event.preventDefault();\n        for (let i = 0; i < files.length; i++) {\n            void this._model.upload(files[i]);\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = Private.hitTestNodes(this._items, event);\n            if (index === -1) {\n                return;\n            }\n            const item = this._sortedItems[index];\n            if (item.type !== 'directory' || this.selection[item.path]) {\n                return;\n            }\n            const target = event.target;\n            target.classList.add(DROP_TARGET_CLASS);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = Private.hitTestNodes(this._items, event);\n        this._items[index].classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.firstIndexOf(this._items, target);\n        const items = this._sortedItems;\n        let basePath = this._model.path;\n        if (items[index].type === 'directory') {\n            basePath = PathExt.join(basePath, items[index].name);\n        }\n        const manager = this._manager;\n        // Handle the items.\n        const promises = [];\n        const paths = event.mimeData.getData(CONTENTS_MIME);\n        if (event.ctrlKey && event.proposedAction === 'move') {\n            event.dropAction = 'copy';\n        }\n        else {\n            event.dropAction = event.proposedAction;\n        }\n        for (const path of paths) {\n            const localPath = manager.services.contents.localPath(path);\n            const name = PathExt.basename(localPath);\n            const newPath = PathExt.join(basePath, name);\n            // Skip files that are not moving.\n            if (newPath === path) {\n                continue;\n            }\n            if (event.dropAction === 'copy') {\n                promises.push(manager.copy(path, basePath));\n            }\n            else {\n                promises.push(renameFile(manager, path, newPath));\n            }\n        }\n        Promise.all(promises).catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Error while copying/moving files'), error);\n        });\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        let selectedPaths = Object.keys(this.selection);\n        const source = this._items[index];\n        const items = this._sortedItems;\n        let selectedItems;\n        let item;\n        // If the source node is not selected, use just that node.\n        if (!source.classList.contains(SELECTED_CLASS)) {\n            item = items[index];\n            selectedPaths = [item.path];\n            selectedItems = [item];\n        }\n        else {\n            const path = selectedPaths[0];\n            item = items.find(value => value.path === path);\n            selectedItems = this.selectedItems();\n        }\n        if (!item) {\n            return;\n        }\n        // Create the drag image.\n        const ft = this._manager.registry.getFileTypeForModel(item);\n        const dragImage = this.renderer.createDragImage(source, selectedPaths.length, this._trans, ft);\n        // Set up the drag event.\n        this._drag = new Drag({\n            dragImage,\n            mimeData: new MimeData(),\n            supportedActions: 'move',\n            proposedAction: 'move'\n        });\n        this._drag.mimeData.setData(CONTENTS_MIME, selectedPaths);\n        // Add thunks for getting mime data content.\n        // We thunk the content so we don't try to make a network call\n        // when it's not needed. E.g. just moving files around\n        // in a filebrowser\n        const services = this.model.manager.services;\n        for (const item of selectedItems) {\n            this._drag.mimeData.setData(CONTENTS_MIME_RICH, {\n                model: item,\n                withContent: async () => {\n                    return await services.contents.get(item.path);\n                }\n            });\n        }\n        if (item && item.type !== 'directory') {\n            const otherPaths = selectedPaths.slice(1).reverse();\n            this._drag.mimeData.setData(FACTORY_MIME, () => {\n                if (!item) {\n                    return;\n                }\n                const path = item.path;\n                let widget = this._manager.findWidget(path);\n                if (!widget) {\n                    widget = this._manager.open(item.path);\n                }\n                if (otherPaths.length) {\n                    const firstWidgetPlaced = new PromiseDelegate();\n                    void firstWidgetPlaced.promise.then(() => {\n                        let prevWidget = widget;\n                        otherPaths.forEach(path => {\n                            const options = {\n                                ref: prevWidget === null || prevWidget === void 0 ? void 0 : prevWidget.id,\n                                mode: 'tab-after'\n                            };\n                            prevWidget = this._manager.openOrReveal(path, void 0, void 0, options);\n                            this._manager.openOrReveal(item.path);\n                        });\n                    });\n                    firstWidgetPlaced.resolve(void 0);\n                }\n                return widget;\n            });\n        }\n        // Start the drag and remove the mousemove and mouseup listeners.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        clearTimeout(this._selectTimer);\n        void this._drag.start(clientX, clientY).then(action => {\n            this._drag = null;\n            clearTimeout(this._selectTimer);\n        });\n    }\n    /**\n     * Handle selection on a file node.\n     */\n    handleFileSelect(event) {\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        clearTimeout(this._selectTimer);\n        if (index === -1) {\n            return;\n        }\n        // Clear any existing soft selection.\n        this._softSelection = '';\n        const path = items[index].path;\n        const selected = Object.keys(this.selection);\n        const isLeftClickOnCheckbox = event.button === 0 &&\n            // On Mac, a left-click with the ctrlKey is treated as a right-click.\n            !(IS_MAC && event.ctrlKey) &&\n            this.isWithinCheckboxHitArea(event);\n        // Handle toggling.\n        if ((IS_MAC && event.metaKey) ||\n            (!IS_MAC && event.ctrlKey) ||\n            isLeftClickOnCheckbox) {\n            if (this.selection[path]) {\n                delete this.selection[path];\n            }\n            else {\n                this.selection[path] = true;\n            }\n            this._focusItem(index);\n            // Handle multiple select.\n        }\n        else if (event.shiftKey) {\n            this._handleMultiSelect(index);\n            this._focusItem(index);\n            // Handle a 'soft' selection\n        }\n        else if (path in this.selection && selected.length > 1) {\n            this._softSelection = path;\n            // Default to selecting the only the item.\n        }\n        else {\n            // Select only the given item.\n            return this._selectItem(index, false, true);\n        }\n        this.update();\n    }\n    /**\n     * (Re-)focus an item in the directory listing.\n     *\n     * @param index The index of the item node to focus\n     */\n    _focusItem(index) {\n        const items = this._items;\n        if (items.length === 0) {\n            // Focus the top node if the folder is empty and therefore there are no\n            // items inside the folder to focus.\n            this._focusIndex = 0;\n            this.node.focus();\n            return;\n        }\n        this._focusIndex = index;\n        const node = items[index];\n        const nameNode = this.renderer.getNameNode(node);\n        if (nameNode) {\n            // Make the filename text node focusable so that it receives keyboard\n            // events; text node was specifically chosen to receive shortcuts because\n            // it gets substituted with input element during file name edits which\n            // conveniently deactivates irrelevant shortcuts.\n            nameNode.tabIndex = 0;\n            nameNode.focus();\n        }\n    }\n    /**\n     * Are all of the items between two provided indices selected?\n     *\n     * The items at the indices are not considered.\n     *\n     * @param j Index of one item.\n     * @param k Index of another item. Note: may be less or greater than first\n     *          index.\n     * @returns True if and only if all items between the j and k are selected.\n     *          Returns undefined if j and k are the same.\n     */\n    _allSelectedBetween(j, k) {\n        if (j === k) {\n            return;\n        }\n        const [start, end] = j < k ? [j + 1, k] : [k + 1, j];\n        return this._sortedItems\n            .slice(start, end)\n            .reduce((result, item) => result && this.selection[item.path], true);\n    }\n    /**\n     * Handle a multiple select on a file item node.\n     */\n    _handleMultiSelect(index) {\n        const items = this._sortedItems;\n        const fromIndex = this._focusIndex;\n        const target = items[index];\n        let shouldAdd = true;\n        if (index === fromIndex) {\n            // This follows the convention in Ubuntu and Windows, which is to allow\n            // the focussed item to gain but not lose selected status on shift-click.\n            // (MacOS is irrelevant here because MacOS Finder has no notion of a\n            // focused-but-not-selected state.)\n            this.selection[target.path] = true;\n            return;\n        }\n        // If the target and all items in-between are selected, then we assume that\n        // the user is trying to shrink rather than grow the group of selected\n        // items.\n        if (this.selection[target.path]) {\n            // However, there is a special case when the distance between the from-\n            // and to- index is just one (for example, when the user is pressing the\n            // shift key plus arrow-up/down). If and only if the situation looks like\n            // the following when going down (or reverse when going up) ...\n            //\n            // - [ante-anchor / previous item] unselected (or boundary)\n            // - [anchor / currently focussed item / item at from-index] selected\n            // - [target / next item / item at to-index] selected\n            //\n            // ... then we shrink the selection / unselect the currently focussed\n            // item.\n            if (Math.abs(index - fromIndex) === 1) {\n                const anchor = items[fromIndex];\n                const anteAnchor = items[fromIndex + (index < fromIndex ? 1 : -1)];\n                if (\n                // Currently focussed item is selected\n                this.selection[anchor.path] &&\n                    // Item on other side of focussed item (away from target) is either a\n                    // boundary or unselected\n                    (!anteAnchor || !this.selection[anteAnchor.path])) {\n                    delete this.selection[anchor.path];\n                }\n            }\n            else if (this._allSelectedBetween(fromIndex, index)) {\n                shouldAdd = false;\n            }\n        }\n        // Select (or unselect) the rows between chosen index (target) and the last\n        // focussed.\n        const step = fromIndex < index ? 1 : -1;\n        for (let i = fromIndex; i !== index + step; i += step) {\n            if (shouldAdd) {\n                if (i === fromIndex) {\n                    // Do not change the selection state of the starting (fromIndex) item.\n                    continue;\n                }\n                this.selection[items[i].path] = true;\n            }\n            else {\n                if (i === index) {\n                    // Do not unselect the target item.\n                    continue;\n                }\n                delete this.selection[items[i].path];\n            }\n        }\n    }\n    /**\n     * Copy the selected items, and optionally cut as well.\n     */\n    _copy() {\n        this._clipboard.length = 0;\n        for (const item of this.selectedItems()) {\n            this._clipboard.push(item.path);\n        }\n    }\n    /**\n     * Delete the files with the given paths.\n     */\n    async _delete(paths) {\n        await Promise.all(paths.map(path => this._model.manager.deleteFile(path).catch(err => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Delete Failed'), err);\n        })));\n    }\n    /**\n     * Allow the user to rename item on a given row.\n     */\n    async _doRename() {\n        this._inRename = true;\n        const selectedPaths = Object.keys(this.selection);\n        // Bail out if nothing has been selected.\n        if (selectedPaths.length === 0) {\n            this._inRename = false;\n            return Promise.resolve('');\n        }\n        // Figure out which selected path to use for the rename.\n        const items = this._sortedItems;\n        let { path } = items[this._focusIndex];\n        if (!this.selection[path]) {\n            // If the currently focused item is not selected, then choose the last\n            // selected item.\n            path = selectedPaths.slice(-1)[0];\n        }\n        // Get the corresponding model, nodes, and file name.\n        const index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        const row = this._items[index];\n        const item = items[index];\n        const nameNode = this.renderer.getNameNode(row);\n        const original = item.name;\n        // Seed the text input with current file name, and select and focus it.\n        this._editNode.value = original;\n        this._selectItem(index, false, true);\n        // Wait for user input\n        const newName = await Private.userInputForRename(nameNode, this._editNode, original);\n        // Check if the widget was disposed during the `await`.\n        if (this.isDisposed) {\n            this._inRename = false;\n            throw new Error('File browser is disposed.');\n        }\n        let finalFilename = newName;\n        if (!newName || newName === original) {\n            finalFilename = original;\n        }\n        else if (!isValidFileName(newName)) {\n            void showErrorMessage(this._trans.__('Rename Error'), Error(this._trans._p('showErrorMessage', '\"%1\" is not a valid name for a file. Names must have nonzero length, and cannot include \"/\", \"\\\\\", or \":\"', newName)));\n            finalFilename = original;\n        }\n        else {\n            // Attempt rename at the file system level.\n            const manager = this._manager;\n            const oldPath = PathExt.join(this._model.path, original);\n            const newPath = PathExt.join(this._model.path, newName);\n            try {\n                await renameFile(manager, oldPath, newPath);\n            }\n            catch (error) {\n                if (error !== 'File not renamed') {\n                    void showErrorMessage(this._trans._p('showErrorMessage', 'Rename Error'), error);\n                }\n                finalFilename = original;\n            }\n            // Check if the widget was disposed during the `await`.\n            if (this.isDisposed) {\n                this._inRename = false;\n                throw new Error('File browser is disposed.');\n            }\n        }\n        // If nothing else has been selected, then select the renamed file. In\n        // other words, don't select the renamed file if the user has clicked\n        // away to some other file.\n        if (!this.isDisposed &&\n            Object.keys(this.selection).length === 1 &&\n            // We haven't updated the instance yet to reflect the rename, so unless\n            // the user or something else has updated the selection, the original file\n            // path and not the new file path will be in `this.selection`.\n            this.selection[item.path]) {\n            try {\n                await this.selectItemByName(finalFilename, true);\n            }\n            catch (_a) {\n                // do nothing\n                console.warn('After rename, failed to select file', finalFilename);\n            }\n        }\n        this._inRename = false;\n        return finalFilename;\n    }\n    /**\n     * Select a given item.\n     */\n    _selectItem(index, keepExisting, focus = true) {\n        // Selected the given row(s)\n        const items = this._sortedItems;\n        if (!keepExisting) {\n            this.clearSelectedItems();\n        }\n        const path = items[index].path;\n        this.selection[path] = true;\n        if (focus) {\n            this._focusItem(index);\n        }\n        this.update();\n    }\n    /**\n     * Handle the `refreshed` signal from the model.\n     */\n    _onModelRefreshed() {\n        // Update the selection.\n        const existing = Object.keys(this.selection);\n        this.clearSelectedItems();\n        for (const item of this._model.items()) {\n            const path = item.path;\n            if (existing.indexOf(path) !== -1) {\n                this.selection[path] = true;\n            }\n        }\n        if (this.isVisible) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n        }\n        else {\n            this._isDirty = true;\n        }\n    }\n    /**\n     * Handle a `pathChanged` signal from the model.\n     */\n    _onPathChanged() {\n        // Reset the selection.\n        this.clearSelectedItems();\n        // Update the sorted items.\n        this.sort(this.sortState);\n        // Reset focus. But wait until the DOM has been updated (hence\n        // `requestAnimationFrame`).\n        requestAnimationFrame(() => {\n            this._focusItem(0);\n        });\n    }\n    /**\n     * Handle a `fileChanged` signal from the model.\n     */\n    _onFileChanged(sender, args) {\n        const newValue = args.newValue;\n        if (!newValue) {\n            return;\n        }\n        const name = newValue.name;\n        if (args.type !== 'new' || !name) {\n            return;\n        }\n        void this.selectItemByName(name).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n    /**\n     * Handle an `activateRequested` signal from the manager.\n     */\n    _onActivateRequested(sender, args) {\n        const dirname = PathExt.dirname(args);\n        if (dirname !== this._model.path) {\n            return;\n        }\n        const basename = PathExt.basename(args);\n        this.selectItemByName(basename).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n}\n/**\n * The namespace for the `DirListing` class statics.\n */\n(function (DirListing) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        /**\n         * Create the DOM node for a dir listing.\n         */\n        createNode() {\n            const node = document.createElement('div');\n            const header = document.createElement('div');\n            const content = document.createElement('ul');\n            content.className = CONTENT_CLASS;\n            header.className = HEADER_CLASS;\n            node.appendChild(header);\n            node.appendChild(content);\n            // Set to -1 to allow calling this.node.focus().\n            node.tabIndex = -1;\n            return node;\n        }\n        /**\n         * Populate and empty header node for a dir listing.\n         *\n         * @param node - The header node to populate.\n         */\n        populateHeaderNode(node, translator, hiddenColumns) {\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const name = this.createHeaderItemNode(trans.__('Name'));\n            const narrow = document.createElement('div');\n            const modified = this.createHeaderItemNode(trans.__('Last Modified'));\n            const fileSize = this.createHeaderItemNode(trans.__('File Size'));\n            name.classList.add(NAME_ID_CLASS);\n            name.classList.add(SELECTED_CLASS);\n            modified.classList.add(MODIFIED_ID_CLASS);\n            fileSize.classList.add(FILE_SIZE_ID_CLASS);\n            narrow.classList.add(NARROW_ID_CLASS);\n            narrow.textContent = '...';\n            if (!(hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('is_selected'))) {\n                const checkboxWrapper = this.createCheckboxWrapperNode({\n                    alwaysVisible: true\n                });\n                node.appendChild(checkboxWrapper);\n            }\n            node.appendChild(name);\n            node.appendChild(narrow);\n            node.appendChild(modified);\n            node.appendChild(fileSize);\n            if (hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            if (hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('file_size')) {\n                fileSize.classList.add(FILE_SIZE_COLUMN_HIDDEN);\n            }\n            else {\n                fileSize.classList.remove(FILE_SIZE_COLUMN_HIDDEN);\n            }\n            // set the initial caret icon\n            Private.updateCaret(DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS), 'right', 'up');\n        }\n        /**\n         * Handle a header click.\n         *\n         * @param node - A node populated by [[populateHeaderNode]].\n         *\n         * @param event - A click event on the node.\n         *\n         * @returns The sort state of the header after the click event.\n         */\n        handleHeaderClick(node, event) {\n            const name = DOMUtils.findElement(node, NAME_ID_CLASS);\n            const modified = DOMUtils.findElement(node, MODIFIED_ID_CLASS);\n            const fileSize = DOMUtils.findElement(node, FILE_SIZE_ID_CLASS);\n            const state = { direction: 'ascending', key: 'name' };\n            const target = event.target;\n            const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n            const fileSizeIcon = DOMUtils.findElement(fileSize, HEADER_ITEM_ICON_CLASS);\n            const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n            if (name.contains(target)) {\n                if (name.classList.contains(SELECTED_CLASS)) {\n                    if (!name.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        name.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'down');\n                    }\n                    else {\n                        name.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'up');\n                    }\n                }\n                else {\n                    name.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(nameIcon, 'right', 'up');\n                }\n                name.classList.add(SELECTED_CLASS);\n                modified.classList.remove(SELECTED_CLASS);\n                modified.classList.remove(DESCENDING_CLASS);\n                fileSize.classList.remove(SELECTED_CLASS);\n                fileSize.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(modifiedIcon, 'left');\n                Private.updateCaret(fileSizeIcon, 'left');\n                return state;\n            }\n            if (modified.contains(target)) {\n                state.key = 'last_modified';\n                if (modified.classList.contains(SELECTED_CLASS)) {\n                    if (!modified.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        modified.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'down');\n                    }\n                    else {\n                        modified.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'up');\n                    }\n                }\n                else {\n                    modified.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(modifiedIcon, 'left', 'up');\n                }\n                modified.classList.add(SELECTED_CLASS);\n                name.classList.remove(SELECTED_CLASS);\n                name.classList.remove(DESCENDING_CLASS);\n                fileSize.classList.remove(SELECTED_CLASS);\n                fileSize.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(nameIcon, 'right');\n                Private.updateCaret(fileSizeIcon, 'left');\n                return state;\n            }\n            if (fileSize.contains(target)) {\n                state.key = 'file_size';\n                if (fileSize.classList.contains(SELECTED_CLASS)) {\n                    if (!fileSize.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        fileSize.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(fileSizeIcon, 'left', 'down');\n                    }\n                    else {\n                        fileSize.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(fileSizeIcon, 'left', 'up');\n                    }\n                }\n                else {\n                    fileSize.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(fileSizeIcon, 'left', 'up');\n                }\n                fileSize.classList.add(SELECTED_CLASS);\n                name.classList.remove(SELECTED_CLASS);\n                name.classList.remove(DESCENDING_CLASS);\n                modified.classList.remove(SELECTED_CLASS);\n                modified.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(nameIcon, 'right');\n                Private.updateCaret(modifiedIcon, 'left');\n                return state;\n            }\n            return state;\n        }\n        /**\n         * Create a new item node for a dir listing.\n         *\n         * @returns A new DOM node to use as a content item.\n         */\n        createItemNode(hiddenColumns) {\n            const node = document.createElement('li');\n            const icon = document.createElement('span');\n            const text = document.createElement('span');\n            const modified = document.createElement('span');\n            const fileSize = document.createElement('span');\n            icon.className = ITEM_ICON_CLASS;\n            text.className = ITEM_TEXT_CLASS;\n            modified.className = ITEM_MODIFIED_CLASS;\n            fileSize.className = ITEM_FILE_SIZE_CLASS;\n            if (!(hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('is_selected'))) {\n                const checkboxWrapper = this.createCheckboxWrapperNode();\n                node.appendChild(checkboxWrapper);\n            }\n            node.appendChild(icon);\n            node.appendChild(text);\n            node.appendChild(modified);\n            node.appendChild(fileSize);\n            if (hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            if (hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('file_size')) {\n                fileSize.classList.add(FILE_SIZE_COLUMN_HIDDEN);\n            }\n            else {\n                fileSize.classList.remove(FILE_SIZE_COLUMN_HIDDEN);\n            }\n            return node;\n        }\n        /**\n         * Creates a node containing a checkbox.\n         *\n         * We wrap the checkbox in a label element in order to increase its hit\n         * area. This is because the padding of the checkbox itself cannot be\n         * increased via CSS, as the CSS/form compatibility table at the following\n         * url from MDN shows:\n         * https://developer.mozilla.org/en-US/docs/Learn/Forms/Property_compatibility_table_for_form_controls#check_boxes_and_radio_buttons\n         *\n         * @param [options]\n         * @params options.alwaysVisible Should the checkbox be visible even when\n         * not hovered?\n         * @returns A new DOM node that contains a checkbox.\n         */\n        createCheckboxWrapperNode(options) {\n            // Wrap the checkbox in a label element in order to increase its hit area.\n            const labelWrapper = document.createElement('label');\n            labelWrapper.classList.add(CHECKBOX_WRAPPER_CLASS);\n            const checkbox = document.createElement('input');\n            checkbox.type = 'checkbox';\n            // Prevent the user from clicking (via mouse, keyboard, or touch) the\n            // checkbox since other code handles the mouse and keyboard events and\n            // controls the checked state of the checkbox.\n            checkbox.addEventListener('click', event => {\n                event.preventDefault();\n            });\n            // The individual file checkboxes are visible on hover, but the header\n            // check-all checkbox is always visible.\n            if (options === null || options === void 0 ? void 0 : options.alwaysVisible) {\n                labelWrapper.classList.add('jp-mod-visible');\n            }\n            else {\n                // Disable tabbing to all other checkboxes.\n                checkbox.tabIndex = -1;\n            }\n            labelWrapper.appendChild(checkbox);\n            return labelWrapper;\n        }\n        /**\n         * Update an item node to reflect the current state of a model.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param model - The model object to use for the item state.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         */\n        updateItemNode(node, model, fileType, translator, hiddenColumns, selected) {\n            if (selected) {\n                node.classList.add(SELECTED_CLASS);\n            }\n            fileType =\n                fileType || DocumentRegistry.getDefaultTextFileType(translator);\n            const { icon, iconClass, name } = fileType;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const iconContainer = DOMUtils.findElement(node, ITEM_ICON_CLASS);\n            const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n            const modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n            const fileSize = DOMUtils.findElement(node, ITEM_FILE_SIZE_CLASS);\n            const checkboxWrapper = DOMUtils.findElement(node, CHECKBOX_WRAPPER_CLASS);\n            const showFileCheckboxes = !(hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('is_selected'));\n            if (checkboxWrapper && !showFileCheckboxes) {\n                node.removeChild(checkboxWrapper);\n            }\n            else if (showFileCheckboxes && !checkboxWrapper) {\n                const checkboxWrapper = this.createCheckboxWrapperNode();\n                node.insertBefore(checkboxWrapper, iconContainer);\n            }\n            if (hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            if (hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('file_size')) {\n                fileSize.classList.add(FILE_SIZE_COLUMN_HIDDEN);\n            }\n            else {\n                fileSize.classList.remove(FILE_SIZE_COLUMN_HIDDEN);\n            }\n            // render the file item's icon\n            LabIcon.resolveElement({\n                icon,\n                iconClass: classes(iconClass, 'jp-Icon'),\n                container: iconContainer,\n                className: ITEM_ICON_CLASS,\n                stylesheet: 'listing'\n            });\n            let hoverText = trans.__('Name: %1', model.name);\n            // add file size to pop up if its available\n            if (model.size !== null && model.size !== undefined) {\n                const fileSizeText = Private.formatFileSize(model.size, 1, 1024);\n                fileSize.textContent = fileSizeText;\n                hoverText += trans.__('\\nSize: %1', Private.formatFileSize(model.size, 1, 1024));\n            }\n            else {\n                fileSize.textContent = '';\n            }\n            if (model.path) {\n                const dirname = PathExt.dirname(model.path);\n                if (dirname) {\n                    hoverText += trans.__('\\nPath: %1', dirname.substr(0, 50));\n                    if (dirname.length > 50) {\n                        hoverText += '...';\n                    }\n                }\n            }\n            if (model.created) {\n                hoverText += trans.__('\\nCreated: %1', Time.format(new Date(model.created)));\n            }\n            if (model.last_modified) {\n                hoverText += trans.__('\\nModified: %1', Time.format(new Date(model.last_modified)));\n            }\n            hoverText += trans.__('\\nWritable: %1', model.writable);\n            node.title = hoverText;\n            node.setAttribute('data-file-type', name);\n            if (model.name.startsWith('.')) {\n                node.setAttribute('data-is-dot', 'true');\n            }\n            else {\n                node.removeAttribute('data-is-dot');\n            }\n            // If an item is being edited currently, its text node is unavailable.\n            const indices = !model.indices ? [] : model.indices;\n            let highlightedName = StringExt.highlight(model.name, indices, h.mark);\n            if (text) {\n                VirtualDOM.render(h.span(highlightedName), text);\n            }\n            // Adds an aria-label to the checkbox element.\n            const checkbox = checkboxWrapper === null || checkboxWrapper === void 0 ? void 0 : checkboxWrapper.querySelector('input[type=\"checkbox\"]');\n            if (checkbox) {\n                let ariaLabel;\n                if (fileType.contentType === 'directory') {\n                    ariaLabel = selected\n                        ? trans.__('Deselect directory \"%1\"', highlightedName)\n                        : trans.__('Select directory \"%1\"', highlightedName);\n                }\n                else {\n                    ariaLabel = selected\n                        ? trans.__('Deselect file \"%1\"', highlightedName)\n                        : trans.__('Select file \"%1\"', highlightedName);\n                }\n                checkbox.setAttribute('aria-label', ariaLabel);\n                checkbox.checked = selected !== null && selected !== void 0 ? selected : false;\n            }\n            let modText = '';\n            let modTitle = '';\n            if (model.last_modified) {\n                modText = Time.formatHuman(new Date(model.last_modified));\n                modTitle = Time.format(new Date(model.last_modified));\n            }\n            modified.textContent = modText;\n            modified.title = modTitle;\n        }\n        /**\n         * Get the node containing the file name.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @returns The node containing the file name.\n         */\n        getNameNode(node) {\n            return DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        }\n        /**\n         * Get the checkbox input element node.\n         *\n         * @param node A node created by [[createItemNode]] or\n         * [[createHeaderItemNode]]\n         *\n         * @returns The checkbox node.\n         */\n        getCheckboxNode(node) {\n            return node.querySelector(`.${CHECKBOX_WRAPPER_CLASS} input[type=checkbox]`);\n        }\n        /**\n         * Create a drag image for an item.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param count - The number of items being dragged.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         * @returns An element to use as the drag image.\n         */\n        createDragImage(node, count, trans, fileType) {\n            const dragImage = node.cloneNode(true);\n            const modified = DOMUtils.findElement(dragImage, ITEM_MODIFIED_CLASS);\n            const icon = DOMUtils.findElement(dragImage, ITEM_ICON_CLASS);\n            dragImage.removeChild(modified);\n            if (!fileType) {\n                icon.textContent = '';\n                icon.className = '';\n            }\n            else {\n                icon.textContent = fileType.iconLabel || '';\n                icon.className = fileType.iconClass || '';\n            }\n            icon.classList.add(DRAG_ICON_CLASS);\n            if (count > 1) {\n                const nameNode = DOMUtils.findElement(dragImage, ITEM_TEXT_CLASS);\n                nameNode.textContent = trans._n('%1 Item', '%1 Items', count);\n            }\n            return dragImage;\n        }\n        /**\n         * Create a node for a header item.\n         */\n        createHeaderItemNode(label) {\n            const node = document.createElement('div');\n            const text = document.createElement('span');\n            const icon = document.createElement('span');\n            node.className = HEADER_ITEM_CLASS;\n            text.className = HEADER_ITEM_TEXT_CLASS;\n            icon.className = HEADER_ITEM_ICON_CLASS;\n            text.textContent = label;\n            node.appendChild(text);\n            node.appendChild(icon);\n            return node;\n        }\n    }\n    DirListing.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    DirListing.defaultRenderer = new Renderer();\n})(DirListing || (DirListing = {}));\n/**\n * The namespace for the listing private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle editing text on a node.\n     *\n     * @returns Boolean indicating whether the name changed.\n     */\n    function userInputForRename(text, edit, original) {\n        const parent = text.parentElement;\n        parent.replaceChild(edit, text);\n        edit.focus();\n        const index = edit.value.lastIndexOf('.');\n        if (index === -1) {\n            edit.setSelectionRange(0, edit.value.length);\n        }\n        else {\n            edit.setSelectionRange(0, index);\n        }\n        return new Promise(resolve => {\n            edit.onblur = () => {\n                parent.replaceChild(text, edit);\n                resolve(edit.value);\n            };\n            edit.onkeydown = (event) => {\n                switch (event.keyCode) {\n                    case 13: // Enter\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.blur();\n                        break;\n                    case 27: // Escape\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.value = original;\n                        edit.blur();\n                        // Put focus back on the text node. That way the user can, for\n                        // example, press the keyboard shortcut to go back into edit mode,\n                        // and it will work.\n                        text.focus();\n                        break;\n                    default:\n                        break;\n                }\n            };\n        });\n    }\n    Private.userInputForRename = userInputForRename;\n    /**\n     * Sort a list of items by sort state as a new array.\n     */\n    function sort(items, state, sortNotebooksFirst = false) {\n        const copy = Array.from(items);\n        const reverse = state.direction === 'descending' ? 1 : -1;\n        /**\n         * Compares two items and returns whether they should have a fixed priority.\n         * The fixed priority enables to always sort the directories above the other files. And to sort the notebook above other files if the `sortNotebooksFirst` is true.\n         */\n        function isPriorityOverridden(a, b) {\n            if (sortNotebooksFirst) {\n                return a.type !== b.type;\n            }\n            return (a.type === 'directory') !== (b.type === 'directory');\n        }\n        /**\n         * Returns the priority of a file.\n         */\n        function getPriority(item) {\n            if (item.type === 'directory') {\n                return 2;\n            }\n            if (item.type === 'notebook' && sortNotebooksFirst) {\n                return 1;\n            }\n            return 0;\n        }\n        function compare(compare) {\n            return (a, b) => {\n                // Group directory first, then notebooks, then files\n                if (isPriorityOverridden(a, b)) {\n                    return getPriority(b) - getPriority(a);\n                }\n                const compared = compare(a, b);\n                if (compared !== 0) {\n                    return compared * reverse;\n                }\n                // Default sorting is alphabetical ascending\n                return a.name.localeCompare(b.name);\n            };\n        }\n        if (state.key === 'last_modified') {\n            // Sort by last modified\n            copy.sort(compare((a, b) => {\n                return (new Date(a.last_modified).getTime() -\n                    new Date(b.last_modified).getTime());\n            }));\n        }\n        else if (state.key === 'file_size') {\n            // Sort by size\n            copy.sort(compare((a, b) => {\n                var _a, _b;\n                return ((_a = a.size) !== null && _a !== void 0 ? _a : 0) - ((_b = b.size) !== null && _b !== void 0 ? _b : 0);\n            }));\n        }\n        else {\n            // Sort by name\n            copy.sort(compare((a, b) => {\n                return b.name.localeCompare(a.name);\n            }));\n        }\n        return copy;\n    }\n    Private.sort = sort;\n    /**\n     * Get the index of the node at a client position, or `-1`.\n     */\n    function hitTestNodes(nodes, event) {\n        return ArrayExt.findFirstIndex(nodes, node => ElementExt.hitTest(node, event.clientX, event.clientY) ||\n            event.target === node);\n    }\n    Private.hitTestNodes = hitTestNodes;\n    /**\n     * Format bytes to human readable string.\n     */\n    function formatFileSize(bytes, decimalPoint, k) {\n        // https://www.codexworld.com/how-to/convert-file-size-bytes-kb-mb-gb-javascript/\n        if (bytes === 0) {\n            return '0 B';\n        }\n        const dm = decimalPoint || 2;\n        const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        if (i >= 0 && i < sizes.length) {\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n        }\n        else {\n            return String(bytes);\n        }\n    }\n    Private.formatFileSize = formatFileSize;\n    /**\n     * Update an inline svg caret icon in a node.\n     */\n    function updateCaret(container, float, state) {\n        if (state) {\n            (state === 'down' ? caretDownIcon : caretUpIcon).element({\n                container,\n                tag: 'span',\n                stylesheet: 'listingHeaderItem',\n                float\n            });\n        }\n        else {\n            LabIcon.remove(container);\n            container.className = HEADER_ITEM_ICON_CLASS;\n        }\n    }\n    Private.updateCaret = updateCaret;\n})(Private || (Private = {}));\n//# sourceMappingURL=listing.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { SidePanel } from '@jupyterlab/ui-components';\nimport { Panel } from '@lumino/widgets';\nimport { BreadCrumbs } from './crumbs';\nimport { DirListing } from './listing';\n/**\n * The class name added to file browsers.\n */\nconst FILE_BROWSER_CLASS = 'jp-FileBrowser';\n/**\n * The class name added to file browser panel (gather filter, breadcrumbs and listing).\n */\nconst FILE_BROWSER_PANEL_CLASS = 'jp-FileBrowser-Panel';\n/**\n * The class name added to the filebrowser crumbs node.\n */\nconst CRUMBS_CLASS = 'jp-FileBrowser-crumbs';\n/**\n * The class name added to the filebrowser toolbar node.\n */\nconst TOOLBAR_CLASS = 'jp-FileBrowser-toolbar';\n/**\n * The class name added to the filebrowser listing node.\n */\nconst LISTING_CLASS = 'jp-FileBrowser-listing';\n/**\n * A widget which hosts a file browser.\n *\n * The widget uses the Jupyter Contents API to retrieve contents,\n * and presents itself as a flat list of files and directories with\n * breadcrumbs.\n */\nexport class FileBrowser extends SidePanel {\n    /**\n     * Construct a new file browser.\n     *\n     * @param options - The file browser options.\n     */\n    constructor(options) {\n        var _a;\n        super({ content: new Panel(), translator: options.translator });\n        this._directoryPending = null;\n        this._filePending = null;\n        this._showLastModifiedColumn = true;\n        this._showFileSizeColumn = false;\n        this._showHiddenFiles = false;\n        this._showFileCheckboxes = false;\n        this._sortNotebooksFirst = false;\n        this.addClass(FILE_BROWSER_CLASS);\n        this.toolbar.addClass(TOOLBAR_CLASS);\n        this.id = options.id;\n        const translator = (this.translator = (_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator);\n        const model = (this.model = options.model);\n        const renderer = options.renderer;\n        model.connectionFailure.connect(this._onConnectionFailure, this);\n        this._manager = model.manager;\n        // a11y\n        this.toolbar.node.setAttribute('role', 'navigation');\n        this.toolbar.node.setAttribute('aria-label', this._trans.__('file browser'));\n        // File browser widgets container\n        this.mainPanel = new Panel();\n        this.mainPanel.addClass(FILE_BROWSER_PANEL_CLASS);\n        this.mainPanel.title.label = this._trans.__('File Browser');\n        this.crumbs = new BreadCrumbs({ model, translator });\n        this.crumbs.addClass(CRUMBS_CLASS);\n        this.listing = this.createDirListing({\n            model,\n            renderer,\n            translator\n        });\n        this.listing.addClass(LISTING_CLASS);\n        this.mainPanel.addWidget(this.crumbs);\n        this.mainPanel.addWidget(this.listing);\n        this.addWidget(this.mainPanel);\n        if (options.restore !== false) {\n            void model.restore(this.id);\n        }\n    }\n    /**\n     * Whether to show active file in file browser\n     */\n    get navigateToCurrentDirectory() {\n        return this._navigateToCurrentDirectory;\n    }\n    set navigateToCurrentDirectory(value) {\n        this._navigateToCurrentDirectory = value;\n    }\n    /**\n     * Whether to show the last modified column\n     */\n    get showLastModifiedColumn() {\n        return this._showLastModifiedColumn;\n    }\n    set showLastModifiedColumn(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('last_modified', value);\n            this._showLastModifiedColumn = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to show the file size column\n     */\n    get showFileSizeColumn() {\n        return this._showFileSizeColumn;\n    }\n    set showFileSizeColumn(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('file_size', value);\n            this._showFileSizeColumn = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to show hidden files\n     */\n    get showHiddenFiles() {\n        return this._showHiddenFiles;\n    }\n    set showHiddenFiles(value) {\n        this.model.showHiddenFiles(value);\n        this._showHiddenFiles = value;\n    }\n    /**\n     * Whether to show checkboxes next to files and folders\n     */\n    get showFileCheckboxes() {\n        return this._showFileCheckboxes;\n    }\n    set showFileCheckboxes(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('is_selected', value);\n            this._showFileCheckboxes = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to sort notebooks above other files\n     */\n    get sortNotebooksFirst() {\n        return this._sortNotebooksFirst;\n    }\n    set sortNotebooksFirst(value) {\n        if (this.listing.setNotebooksFirstSorting) {\n            this.listing.setNotebooksFirstSorting(value);\n            this._sortNotebooksFirst = value;\n        }\n        else {\n            console.warn('Listing does not support sorting notebooks first');\n        }\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        return this.listing.selectedItems();\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     */\n    async selectItemByName(name) {\n        await this.listing.selectItemByName(name);\n    }\n    clearSelectedItems() {\n        this.listing.clearSelectedItems();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this.listing.rename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this.listing.cut();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this.listing.copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        return this.listing.paste();\n    }\n    async _createNew(options) {\n        try {\n            const model = await this._manager.newUntitled(options);\n            await this.listing.selectItemByName(model.name, true);\n            await this.rename();\n            return model;\n        }\n        catch (err) {\n            void showErrorMessage(this._trans.__('Error'), err);\n            throw err;\n        }\n    }\n    /**\n     * Create a new directory\n     */\n    async createNewDirectory() {\n        if (this._directoryPending) {\n            return this._directoryPending;\n        }\n        this._directoryPending = this._createNew({\n            path: this.model.path,\n            type: 'directory'\n        });\n        try {\n            return await this._directoryPending;\n        }\n        finally {\n            this._directoryPending = null;\n        }\n    }\n    /**\n     * Create a new file\n     */\n    async createNewFile(options) {\n        if (this._filePending) {\n            return this._filePending;\n        }\n        this._filePending = this._createNew({\n            path: this.model.path,\n            type: 'file',\n            ext: options.ext\n        });\n        try {\n            return await this._filePending;\n        }\n        finally {\n            this._filePending = null;\n        }\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    delete() {\n        return this.listing.delete();\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        return this.listing.duplicate();\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    download() {\n        return this.listing.download();\n    }\n    /**\n     * cd ..\n     *\n     * Go up one level in the directory tree.\n     */\n    async goUp() {\n        return this.listing.goUp();\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        return this.listing.shutdownKernels();\n    }\n    /**\n     * Select next item.\n     */\n    selectNext() {\n        this.listing.selectNext();\n    }\n    /**\n     * Select previous item.\n     */\n    selectPrevious() {\n        this.listing.selectPrevious();\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        return this.listing.modelForClick(event);\n    }\n    /**\n     * Create the underlying DirListing instance.\n     *\n     * @param options - The DirListing constructor options.\n     *\n     * @returns The created DirListing instance.\n     */\n    createDirListing(options) {\n        return new DirListing(options);\n    }\n    /**\n     * Handle a connection lost signal from the model.\n     */\n    _onConnectionFailure(sender, args) {\n        if (args instanceof ServerConnection.ResponseError &&\n            args.response.status === 404) {\n            const title = this._trans.__('Directory not found');\n            args.message = this._trans.__('Directory not found: \"%1\"', this.model.path);\n            void showErrorMessage(title, args);\n        }\n    }\n}\n//# sourceMappingURL=browser.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { shouldOverwrite } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, filter } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default duration of the auto-refresh in ms\n */\nconst DEFAULT_REFRESH_INTERVAL = 10000;\n/**\n * The maximum upload size (in bytes) for notebook version < 5.1.0\n */\nexport const LARGE_FILE_SIZE = 15 * 1024 * 1024;\n/**\n * The size (in bytes) of the biggest chunk we should upload at once.\n */\nexport const CHUNK_SIZE = 1024 * 1024;\n/**\n * An implementation of a file browser model.\n *\n * #### Notes\n * All paths parameters without a leading `'/'` are interpreted as relative to\n * the current directory.  Supports `'../'` syntax.\n */\nexport class FileBrowserModel {\n    /**\n     * Construct a new file browser model.\n     */\n    constructor(options) {\n        var _a;\n        this._connectionFailure = new Signal(this);\n        this._fileChanged = new Signal(this);\n        this._items = [];\n        this._key = '';\n        this._pathChanged = new Signal(this);\n        this._paths = new Set();\n        this._pending = null;\n        this._pendingPath = null;\n        this._refreshed = new Signal(this);\n        this._sessions = [];\n        this._state = null;\n        this._isDisposed = false;\n        this._restored = new PromiseDelegate();\n        this._uploads = [];\n        this._uploadChanged = new Signal(this);\n        this.manager = options.manager;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._driveName = options.driveName || '';\n        this._model = {\n            path: this.rootPath,\n            name: PathExt.basename(this.rootPath),\n            type: 'directory',\n            content: undefined,\n            writable: false,\n            created: 'unknown',\n            last_modified: 'unknown',\n            mimetype: 'text/plain',\n            format: 'text'\n        };\n        this._state = options.state || null;\n        const refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        const { services } = options.manager;\n        services.contents.fileChanged.connect(this.onFileChanged, this);\n        services.sessions.runningChanged.connect(this.onRunningChanged, this);\n        this._unloadEventListener = (e) => {\n            if (this._uploads.length > 0) {\n                const confirmationMessage = this._trans.__('Files still uploading');\n                e.returnValue = confirmationMessage;\n                return confirmationMessage;\n            }\n        };\n        window.addEventListener('beforeunload', this._unloadEventListener);\n        this._poll = new Poll({\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            name: '@jupyterlab/filebrowser:Model',\n            factory: () => this.cd('.'),\n            frequency: {\n                interval: refreshInterval,\n                backoff: true,\n                max: 300 * 1000\n            },\n            standby: options.refreshStandby || 'when-hidden'\n        });\n    }\n    /**\n     * A signal emitted when the file browser model loses connection.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * The drive name that gets prepended to the path.\n     */\n    get driveName() {\n        return this._driveName;\n    }\n    /**\n     * A promise that resolves when the model is first restored.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Get the file path changed signal.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Get the current path.\n     */\n    get path() {\n        return this._model ? this._model.path : '';\n    }\n    /**\n     * Get the root path\n     */\n    get rootPath() {\n        return this._driveName ? this._driveName + ':' : '';\n    }\n    /**\n     * A signal emitted when the path changes.\n     */\n    get pathChanged() {\n        return this._pathChanged;\n    }\n    /**\n     * A signal emitted when the directory listing is refreshed.\n     */\n    get refreshed() {\n        return this._refreshed;\n    }\n    /**\n     * Get the kernel spec models.\n     */\n    get specs() {\n        return this.manager.services.kernelspecs.specs;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when an upload progresses.\n     */\n    get uploadChanged() {\n        return this._uploadChanged;\n    }\n    /**\n     * Create an iterator over the status of all in progress uploads.\n     */\n    uploads() {\n        return this._uploads[Symbol.iterator]();\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        window.removeEventListener('beforeunload', this._unloadEventListener);\n        this._isDisposed = true;\n        this._poll.dispose();\n        this._sessions.length = 0;\n        this._items.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Create an iterator over the model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return this._items[Symbol.iterator]();\n    }\n    /**\n     * Create an iterator over the active sessions in the directory.\n     *\n     * @returns A new iterator over the model's active sessions.\n     */\n    sessions() {\n        return this._sessions[Symbol.iterator]();\n    }\n    /**\n     * Force a refresh of the directory contents.\n     */\n    async refresh() {\n        await this._poll.refresh();\n        await this._poll.tick;\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Change directory.\n     *\n     * @param path - The path to the file or directory.\n     *\n     * @returns A promise with the contents of the directory.\n     */\n    async cd(newValue = '.') {\n        if (newValue !== '.') {\n            newValue = this.manager.services.contents.resolvePath(this._model.path, newValue);\n        }\n        else {\n            newValue = this._pendingPath || this._model.path;\n        }\n        if (this._pending) {\n            // Collapse requests to the same directory.\n            if (newValue === this._pendingPath) {\n                return this._pending;\n            }\n            // Otherwise wait for the pending request to complete before continuing.\n            await this._pending;\n        }\n        const oldValue = this.path;\n        const options = { content: true };\n        this._pendingPath = newValue;\n        if (oldValue !== newValue) {\n            this._sessions.length = 0;\n        }\n        const services = this.manager.services;\n        this._pending = services.contents\n            .get(newValue, options)\n            .then(contents => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.handleContents(contents);\n            this._pendingPath = null;\n            this._pending = null;\n            if (oldValue !== newValue) {\n                // If there is a state database and a unique key, save the new path.\n                // We don't need to wait on the save to continue.\n                if (this._state && this._key) {\n                    void this._state.save(this._key, { path: newValue });\n                }\n                this._pathChanged.emit({\n                    name: 'path',\n                    oldValue,\n                    newValue\n                });\n            }\n            this.onRunningChanged(services.sessions, services.sessions.running());\n            this._refreshed.emit(void 0);\n        })\n            .catch(error => {\n            this._pendingPath = null;\n            this._pending = null;\n            if (error.response &&\n                error.response.status === 404 &&\n                newValue !== '/') {\n                error.message = this._trans.__('Directory not found: \"%1\"', this._model.path);\n                console.error(error);\n                this._connectionFailure.emit(error);\n                return this.cd('/');\n            }\n            else {\n                this._connectionFailure.emit(error);\n            }\n        });\n        return this._pending;\n    }\n    /**\n     * Download a file.\n     *\n     * @param path - The path of the file to be downloaded.\n     *\n     * @returns A promise which resolves when the file has begun\n     *   downloading.\n     */\n    async download(path) {\n        const url = await this.manager.services.contents.getDownloadUrl(path);\n        const element = document.createElement('a');\n        element.href = url;\n        element.download = '';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        return void 0;\n    }\n    /**\n     * Restore the state of the file browser.\n     *\n     * @param id - The unique ID that is used to construct a state database key.\n     *\n     * @param populate - If `false`, the restoration ID will be set but the file\n     * browser state will not be fetched from the state database.\n     *\n     * @returns A promise when restoration is complete.\n     *\n     * #### Notes\n     * This function will only restore the model *once*. If it is called multiple\n     * times, all subsequent invocations are no-ops.\n     */\n    async restore(id, populate = true) {\n        const { manager } = this;\n        const key = `file-browser-${id}:cwd`;\n        const state = this._state;\n        const restored = !!this._key;\n        if (restored) {\n            return;\n        }\n        // Set the file browser key for state database fetch/save.\n        this._key = key;\n        if (!populate || !state) {\n            this._restored.resolve(undefined);\n            return;\n        }\n        await manager.services.ready;\n        try {\n            const value = await state.fetch(key);\n            if (!value) {\n                this._restored.resolve(undefined);\n                return;\n            }\n            const path = value['path'];\n            // need to return to root path if preferred dir is set\n            if (path) {\n                await this.cd('/');\n            }\n            const localPath = manager.services.contents.localPath(path);\n            await manager.services.contents.get(path);\n            await this.cd(localPath);\n        }\n        catch (error) {\n            await state.remove(key);\n        }\n        this._restored.resolve(undefined);\n    }\n    /**\n     * Upload a `File` object.\n     *\n     * @param file - The `File` object to upload.\n     *\n     * @returns A promise containing the new file contents model.\n     *\n     * #### Notes\n     * On Notebook version < 5.1.0, this will fail to upload files that are too\n     * big to be sent in one request to the server. On newer versions, or on\n     * Jupyter Server, it will ask for confirmation then upload the file in 1 MB\n     * chunks.\n     */\n    async upload(file) {\n        // We do not support Jupyter Notebook version less than 4, and Jupyter\n        // Server advertises itself as version 1 and supports chunked\n        // uploading. We assume any version less than 4.0.0 to be Jupyter Server\n        // instead of Jupyter Notebook.\n        const serverVersion = PageConfig.getNotebookVersion();\n        const supportsChunked = serverVersion < [4, 0, 0] /* Jupyter Server */ ||\n            serverVersion >= [5, 1, 0]; /* Jupyter Notebook >= 5.1.0 */\n        const largeFile = file.size > LARGE_FILE_SIZE;\n        if (largeFile && !supportsChunked) {\n            const msg = this._trans.__('Cannot upload file (>%1 MB). %2', LARGE_FILE_SIZE / (1024 * 1024), file.name);\n            console.warn(msg);\n            throw msg;\n        }\n        const err = 'File not uploaded';\n        if (largeFile && !(await this._shouldUploadLarge(file))) {\n            throw 'Cancelled large file upload';\n        }\n        await this._uploadCheckDisposed();\n        await this.refresh();\n        await this._uploadCheckDisposed();\n        if (this._items.find(i => i.name === file.name) &&\n            !(await shouldOverwrite(file.name))) {\n            throw err;\n        }\n        await this._uploadCheckDisposed();\n        const chunkedUpload = supportsChunked && file.size > CHUNK_SIZE;\n        return await this._upload(file, chunkedUpload);\n    }\n    async _shouldUploadLarge(file) {\n        const { button } = await showDialog({\n            title: this._trans.__('Large file size warning'),\n            body: this._trans.__('The file size is %1 MB. Do you still want to upload it?', Math.round(file.size / (1024 * 1024))),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Upload') })\n            ]\n        });\n        return button.accept;\n    }\n    /**\n     * Perform the actual upload.\n     */\n    async _upload(file, chunked) {\n        // Gather the file model parameters.\n        let path = this._model.path;\n        path = path ? path + '/' + file.name : file.name;\n        const name = file.name;\n        const type = 'file';\n        const format = 'base64';\n        const uploadInner = async (blob, chunk) => {\n            await this._uploadCheckDisposed();\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            await new Promise((resolve, reject) => {\n                reader.onload = resolve;\n                reader.onerror = event => reject(`Failed to upload \"${file.name}\":` + event);\n            });\n            await this._uploadCheckDisposed();\n            // remove header https://stackoverflow.com/a/24289420/907060\n            const content = reader.result.split(',')[1];\n            const model = {\n                type,\n                format,\n                name,\n                chunk,\n                content\n            };\n            return await this.manager.services.contents.save(path, model);\n        };\n        if (!chunked) {\n            try {\n                return await uploadInner(file);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                throw err;\n            }\n        }\n        let finalModel;\n        let upload = { path, progress: 0 };\n        this._uploadChanged.emit({\n            name: 'start',\n            newValue: upload,\n            oldValue: null\n        });\n        for (let start = 0; !finalModel; start += CHUNK_SIZE) {\n            const end = start + CHUNK_SIZE;\n            const lastChunk = end >= file.size;\n            const chunk = lastChunk ? -1 : end / CHUNK_SIZE;\n            const newUpload = { path, progress: start / file.size };\n            this._uploads.splice(this._uploads.indexOf(upload));\n            this._uploads.push(newUpload);\n            this._uploadChanged.emit({\n                name: 'update',\n                newValue: newUpload,\n                oldValue: upload\n            });\n            upload = newUpload;\n            let currentModel;\n            try {\n                currentModel = await uploadInner(file.slice(start, end), chunk);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                this._uploadChanged.emit({\n                    name: 'failure',\n                    newValue: upload,\n                    oldValue: null\n                });\n                throw err;\n            }\n            if (lastChunk) {\n                finalModel = currentModel;\n            }\n        }\n        this._uploads.splice(this._uploads.indexOf(upload));\n        this._uploadChanged.emit({\n            name: 'finish',\n            newValue: null,\n            oldValue: upload\n        });\n        return finalModel;\n    }\n    _uploadCheckDisposed() {\n        if (this.isDisposed) {\n            return Promise.reject('Filemanager disposed. File upload canceled');\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Handle an updated contents model.\n     */\n    handleContents(contents) {\n        // Update our internal data.\n        this._model = {\n            name: contents.name,\n            path: contents.path,\n            type: contents.type,\n            content: undefined,\n            writable: contents.writable,\n            created: contents.created,\n            last_modified: contents.last_modified,\n            size: contents.size,\n            mimetype: contents.mimetype,\n            format: contents.format\n        };\n        this._items = contents.content;\n        this._paths.clear();\n        contents.content.forEach((model) => {\n            this._paths.add(model.path);\n        });\n    }\n    /**\n     * Handle a change to the running sessions.\n     */\n    onRunningChanged(sender, models) {\n        this._populateSessions(models);\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Handle a change on the contents manager.\n     */\n    onFileChanged(sender, change) {\n        const path = this._model.path;\n        const { sessions } = this.manager.services;\n        const { oldValue, newValue } = change;\n        const value = oldValue && oldValue.path && PathExt.dirname(oldValue.path) === path\n            ? oldValue\n            : newValue && newValue.path && PathExt.dirname(newValue.path) === path\n                ? newValue\n                : undefined;\n        // If either the old value or the new value is in the current path, update.\n        if (value) {\n            void this._poll.refresh();\n            this._populateSessions(sessions.running());\n            this._fileChanged.emit(change);\n            return;\n        }\n    }\n    /**\n     * Populate the model's sessions collection.\n     */\n    _populateSessions(models) {\n        this._sessions.length = 0;\n        for (const model of models) {\n            if (this._paths.has(model.path)) {\n                this._sessions.push(model);\n            }\n        }\n    }\n}\n/**\n * File browser model where hidden files inclusion can be toggled on/off.\n */\nexport class TogglableHiddenFileBrowserModel extends FileBrowserModel {\n    constructor(options) {\n        super(options);\n        this._includeHiddenFiles = options.includeHiddenFiles || false;\n    }\n    /**\n     * Create an iterator over the model's items filtering hidden files out if necessary.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return this._includeHiddenFiles\n            ? super.items()\n            : filter(super.items(), value => !value.name.startsWith('.'));\n    }\n    /**\n     * Set the inclusion of hidden files. Triggers a model refresh.\n     */\n    showHiddenFiles(value) {\n        this._includeHiddenFiles = value;\n        void this.refresh();\n    }\n}\n/**\n * File browser model with optional filter on element.\n */\nexport class FilterFileBrowserModel extends TogglableHiddenFileBrowserModel {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        this._filter =\n            (_a = options.filter) !== null && _a !== void 0 ? _a : (model => {\n                return {};\n            });\n        this._filterDirectories = (_b = options.filterDirectories) !== null && _b !== void 0 ? _b : true;\n    }\n    /**\n     * Whether to filter directories.\n     */\n    get filterDirectories() {\n        return this._filterDirectories;\n    }\n    set filterDirectories(value) {\n        this._filterDirectories = value;\n    }\n    /**\n     * Create an iterator over the filtered model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return filter(super.items(), value => {\n            if (!this._filterDirectories && value.type === 'directory') {\n                return true;\n            }\n            else {\n                const filtered = this._filter(value);\n                value.indices = filtered === null || filtered === void 0 ? void 0 : filtered.indices;\n                return !!filtered;\n            }\n        });\n    }\n    setFilter(filter) {\n        this._filter = filter;\n        void this.refresh();\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, setToolbar, ToolbarButton } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { newFolderIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { FileBrowser } from './browser';\nimport { FilterFileBrowserModel } from './model';\n/**\n * The class name added to open file dialog\n */\nconst OPEN_DIALOG_CLASS = 'jp-Open-Dialog';\n/**\n * Namespace for file dialog\n */\nexport var FileDialog;\n(function (FileDialog) {\n    /**\n     * Create and show a open files dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getOpenFiles(options) {\n        const translator = options.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const dialogOptions = {\n            title: options.title,\n            buttons: [\n                Dialog.cancelButton(),\n                Dialog.okButton({\n                    label: trans.__('Select')\n                })\n            ],\n            focusNodeSelector: options.focusNodeSelector,\n            host: options.host,\n            renderer: options.renderer,\n            body: new OpenDialog(options.manager, options.filter, translator)\n        };\n        const dialog = new Dialog(dialogOptions);\n        return dialog.launch();\n    }\n    FileDialog.getOpenFiles = getOpenFiles;\n    /**\n     * Create and show a open directory dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getExistingDirectory(options) {\n        return getOpenFiles({\n            ...options,\n            filter: model => {\n                return model.type === 'directory' ? {} : null;\n            }\n        });\n    }\n    FileDialog.getExistingDirectory = getExistingDirectory;\n})(FileDialog || (FileDialog = {}));\n/**\n * Open dialog widget\n */\nclass OpenDialog extends Widget {\n    constructor(manager, filter, translator, filterDirectories) {\n        super();\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        this.addClass(OPEN_DIALOG_CLASS);\n        this._browser = Private.createFilteredFileBrowser('filtered-file-browser-dialog', manager, filter, {}, translator, filterDirectories);\n        // Add toolbar items\n        setToolbar(this._browser, (browser) => [\n            {\n                name: 'new-folder',\n                widget: new ToolbarButton({\n                    icon: newFolderIcon,\n                    onClick: () => {\n                        void browser.createNewDirectory();\n                    },\n                    tooltip: trans.__('New Folder')\n                })\n            },\n            {\n                name: 'refresher',\n                widget: new ToolbarButton({\n                    icon: refreshIcon,\n                    onClick: () => {\n                        browser.model.refresh().catch(reason => {\n                            console.error('Failed to refresh file browser in open dialog.', reason);\n                        });\n                    },\n                    tooltip: trans.__('Refresh File List')\n                })\n            }\n        ]);\n        // Build the sub widgets\n        const layout = new PanelLayout();\n        layout.addWidget(this._browser);\n        // Set Widget content\n        this.layout = layout;\n    }\n    /**\n     * Get the selected items.\n     */\n    getValue() {\n        const selection = Array.from(this._browser.selectedItems());\n        if (selection.length === 0) {\n            // Return current path\n            return [\n                {\n                    path: this._browser.model.path,\n                    name: PathExt.basename(this._browser.model.path),\n                    type: 'directory',\n                    content: undefined,\n                    writable: false,\n                    created: 'unknown',\n                    last_modified: 'unknown',\n                    mimetype: 'text/plain',\n                    format: 'text'\n                }\n            ];\n        }\n        else {\n            return selection;\n        }\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * Create a new file browser instance.\n     *\n     * @param id - The widget/DOM id of the file browser.\n     *\n     * @param manager - A document manager instance.\n     *\n     * @param filter - function to filter file browser item.\n     *\n     * @param options - The optional file browser configuration object.\n     *\n     * #### Notes\n     * The ID parameter is used to set the widget ID. It is also used as part of\n     * the unique key necessary to store the file browser's restoration data in\n     * the state database if that functionality is enabled.\n     *\n     * If, after the file browser has been generated by the factory, the ID of the\n     * resulting widget is changed by client code, the restoration functionality\n     * will not be disrupted as long as there are no ID collisions, i.e., as long\n     * as the initial ID passed into the factory is used for only one file browser\n     * instance.\n     */\n    Private.createFilteredFileBrowser = (id, manager, filter, options = {}, translator, filterDirectories) => {\n        translator = translator || nullTranslator;\n        const model = new FilterFileBrowserModel({\n            manager,\n            filter,\n            translator,\n            driveName: options.driveName,\n            refreshInterval: options.refreshInterval,\n            filterDirectories\n        });\n        const widget = new FileBrowser({\n            id,\n            model,\n            translator\n        });\n        return widget;\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=opendialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The file browser factory token.\n */\nexport const IFileBrowserFactory = new Token('@jupyterlab/filebrowser:IFileBrowserFactory', `A factory object that creates file browsers.\n  Use this if you want to create your own file browser (e.g., for a custom storage backend),\n  or to interact with other file browsers that have been created by extensions.`);\n/**\n * The default file browser token.\n */\nexport const IDefaultFileBrowser = new Token('@jupyterlab/filebrowser:IDefaultFileBrowser', 'A service for the default file browser.');\n/**\n * The token that indicates the default file browser commands are loaded.\n */\nexport const IFileBrowserCommands = new Token('@jupyterlab/filebrowser:IFileBrowserCommands', 'A token to ensure file browser commands are loaded.');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { fileUploadIcon, ToolbarButton } from '@jupyterlab/ui-components';\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n    /**\n     * Construct a new file browser buttons widget.\n     */\n    constructor(options) {\n        super({\n            icon: fileUploadIcon,\n            label: options.label,\n            onClick: () => {\n                this._input.click();\n            },\n            tooltip: Private.translateToolTip(options.translator)\n        });\n        /**\n         * The 'change' handler for the input field.\n         */\n        this._onInputChanged = () => {\n            const files = Array.prototype.slice.call(this._input.files);\n            const pending = files.map(file => this.fileBrowserModel.upload(file));\n            void Promise.all(pending).catch(error => {\n                void showErrorMessage(this._trans._p('showErrorMessage', 'Upload Error'), error);\n            });\n        };\n        /**\n         * The 'click' handler for the input field.\n         */\n        this._onInputClicked = () => {\n            // In order to allow repeated uploads of the same file (with delete in between),\n            // we need to clear the input value to trigger a change event.\n            this._input.value = '';\n        };\n        this._input = Private.createUploadInput();\n        this.fileBrowserModel = options.model;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._input.onclick = this._onInputClicked;\n        this._input.onchange = this._onInputChanged;\n        this.addClass('jp-id-upload');\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the upload input node for a file buttons widget.\n     */\n    function createUploadInput() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = true;\n        return input;\n    }\n    Private.createUploadInput = createUploadInput;\n    /**\n     * Translate upload tooltip.\n     */\n    function translateToolTip(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return trans.__('Upload Files');\n    }\n    Private.translateToolTip = translateToolTip;\n})(Private || (Private = {}));\n//# sourceMappingURL=upload.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n//\nimport { GroupItem, ProgressBar, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { VDomModel, VDomRenderer } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport React from 'react';\n/**\n * Half-spacing between items in the overall status item.\n */\nconst HALF_SPACING = 4;\n/**\n * A pure function component for a FileUpload status item.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for the file upload status.\n */\nfunction FileUploadComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING },\n        React.createElement(TextItem, { source: trans.__('Uploading…') }),\n        React.createElement(ProgressBar, { percentage: props.upload })));\n}\n/**\n * The time for which to show the \"Complete!\" message after uploading.\n */\nconst UPLOAD_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * Status bar item to display file upload progress.\n */\nexport class FileUploadStatus extends VDomRenderer {\n    /**\n     * Construct a new FileUpload status item.\n     */\n    constructor(opts) {\n        super(new FileUploadStatus.Model(opts.tracker.currentWidget && opts.tracker.currentWidget.model));\n        this._onBrowserChange = (tracker, browser) => {\n            if (browser === null) {\n                this.model.browserModel = null;\n            }\n            else {\n                this.model.browserModel = browser.model;\n            }\n        };\n        this.translator = opts.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._tracker = opts.tracker;\n        this._tracker.currentChanged.connect(this._onBrowserChange);\n    }\n    /**\n     * Render the FileUpload status.\n     */\n    render() {\n        const uploadPaths = this.model.items;\n        if (uploadPaths.length > 0) {\n            const item = this.model.items[0];\n            if (item.complete) {\n                return React.createElement(TextItem, { source: this._trans.__('Complete!') });\n            }\n            else {\n                return (React.createElement(FileUploadComponent, { upload: this.model.items[0].progress, translator: this.translator }));\n            }\n        }\n        else {\n            return React.createElement(FileUploadComponent, { upload: 100, translator: this.translator });\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._tracker.currentChanged.disconnect(this._onBrowserChange);\n    }\n}\n/**\n * A namespace for FileUpload class statics.\n */\n(function (FileUploadStatus) {\n    /**\n     * The VDomModel for the FileUpload renderer.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         */\n        constructor(browserModel) {\n            super();\n            /**\n             * Handle an uploadChanged event in the filebrowser model.\n             */\n            this._uploadChanged = (browse, uploads) => {\n                if (uploads.name === 'start') {\n                    this._items.push({\n                        path: uploads.newValue.path,\n                        progress: uploads.newValue.progress * 100,\n                        complete: false\n                    });\n                }\n                else if (uploads.name === 'update') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].progress = uploads.newValue.progress * 100;\n                    }\n                }\n                else if (uploads.name === 'finish') {\n                    const finishedItem = ArrayExt.findFirstValue(this._items, val => val.path === uploads.oldValue.path);\n                    if (finishedItem) {\n                        finishedItem.complete = true;\n                        setTimeout(() => {\n                            ArrayExt.removeFirstOf(this._items, finishedItem);\n                            this.stateChanged.emit(void 0);\n                        }, UPLOAD_COMPLETE_MESSAGE_MILLIS);\n                    }\n                }\n                else if (uploads.name === 'failure') {\n                    ArrayExt.removeFirstWhere(this._items, val => val.path === uploads.newValue.path);\n                }\n                this.stateChanged.emit(void 0);\n            };\n            this._items = [];\n            this._browserModel = null;\n            this.browserModel = browserModel;\n        }\n        /**\n         * The currently uploading items.\n         */\n        get items() {\n            return this._items;\n        }\n        /**\n         * The current file browser model.\n         */\n        get browserModel() {\n            return this._browserModel;\n        }\n        set browserModel(browserModel) {\n            const oldBrowserModel = this._browserModel;\n            if (oldBrowserModel) {\n                oldBrowserModel.uploadChanged.disconnect(this._uploadChanged);\n            }\n            this._browserModel = browserModel;\n            this._items = [];\n            if (this._browserModel !== null) {\n                this._browserModel.uploadChanged.connect(this._uploadChanged);\n            }\n            this.stateChanged.emit(void 0);\n        }\n    }\n    FileUploadStatus.Model = Model;\n})(FileUploadStatus || (FileUploadStatus = {}));\n//# sourceMappingURL=uploadstatus.js.map"],"names":["BREADCRUMB_ROOT_CLASS","BREADCRUMB_PREFERRED_CLASS","BREADCRUMB_ITEM_CLASS","BREAD_CRUMB_PATHS","CONTENTS_MIME","DROP_TARGET_CLASS","BreadCrumbs","Widget","constructor","options","super","this","translator","nullTranslator","_trans","load","_model","model","addClass","_crumbs","Private","createCrumbs","_crumbSeps","createCrumbSeparators","hasPreferred","PageConfig","getOption","_hasPreferred","node","appendChild","Crumb","Preferred","Home","refreshed","connect","update","handleEvent","event","type","_evtClick","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","onUpdateRequest","localPath","manager","services","contents","path","updateCrumbs","button","target","classList","contains","cd","catch","error","showErrorMessage","__","preventDefault","stopPropagation","index","ArrayExt","findFirstIndex","value","parentElement","mimeData","hasData","ElementExt","hitTest","clientX","clientY","Current","add","dropTarget","DOMUtils","findElement","remove","dropAction","proposedAction","PathExt","resolve","promises","oldPaths","getData","oldPath","localOldPath","name","basename","newPath","join","push","renameFile","Promise","all","err","breadcrumbs","separators","parentNode","firstChild","nextSibling","removeChild","parts","split","length","Ellipsis","grandParent","slice","title","Parent","textContent","parent","home","element","className","tag","stylesheet","ellipsis","ellipsesIcon","document","createElement","current","items","i","MAX_DIRECTORIES","item","HEADER_CLASS","HEADER_ITEM_ICON_CLASS","CONTENT_CLASS","ITEM_TEXT_CLASS","ITEM_ICON_CLASS","ITEM_MODIFIED_CLASS","ITEM_FILE_SIZE_CLASS","CHECKBOX_WRAPPER_CLASS","NAME_ID_CLASS","MODIFIED_ID_CLASS","FILE_SIZE_ID_CLASS","MODIFIED_COLUMN_HIDDEN","FILE_SIZE_COLUMN_HIDDEN","SELECTED_CLASS","CUT_CLASS","MULTI_SELECTED_CLASS","RUNNING_CLASS","DESCENDING_CLASS","IS_MAC","navigator","platform","match","DirListing","renderer","defaultRenderer","createNode","_items","_sortedItems","_sortState","direction","key","_onItemOpened","Signal","_drag","_dragData","_selectTimer","_isCut","_prevPath","_clipboard","_softSelection","selection","Object","create","_searchPrefix","_searchPrefixTimer","_inRename","_isDirty","_hiddenColumns","Set","_sortNotebooksFirst","_focusIndex","fileChanged","_onFileChanged","_onModelRefreshed","pathChanged","_onPathChanged","_editNode","_manager","_renderer","headerNode","populateHeaderNode","activateRequested","_onActivateRequested","dispose","contentNode","sortState","onItemOpened","selectedItems","filter","sortedItems","Symbol","iterator","sort","state","rename","_doRename","cut","_copy","copy","paste","undefined","basePath","removeClass","then","_p","message","_n","result","showDialog","body","buttons","Dialog","cancelButton","label","warnButton","defaultButton","isDisposed","accept","_delete","map","focusIndex","lastIndexAfterDelete","Math","max","_focusItem","duplicate","download","Array","from","shutdownKernels","paths","sessions","session","firstIndexOf","shutdown","id","selectNext","keepExisting","selected","keys","_selectItem","scrollIntoViewIfNeeded","selectPrevious","selectByPrefix","prefix","toLowerCase","substr","isSelected","modelForClick","hitTestNodes","clearSelectedItems","selectItemByName","focus","refresh","Error","MessageLoop","sendMessage","Msg","UpdateRequest","_evtMousedown","_evtMouseup","_evtMousemove","evtKeydown","evtDblClick","evtNativeDrop","_evtScroll","evtDragEnter","evtDragLeave","evtDragOver","evtDrop","content","onAfterShow","_a","nodes","pop","createItemNode","forEach","checkbox","getCheckboxNode","checked","nameNode","getNameNode","tabIndex","checkAllCheckbox","totalSelected","allSelected","someSelected","indeterminate","dataset","String","trans","setAttribute","ft","registry","getFileTypeForModel","updateItemNode","kernel","specs","spec","kernelspecs","display_name","onResize","width","getBoundingClientRect","toggleClass","setColumnVisibility","visible","delete","innerHTML","setNotebooksFirstSorting","isEnabled","previousValue","isWithinCheckboxHitArea","header","handleHeaderClick","scrollLeft","blur","clearTimeout","handleFileSelect","ctrlKey","pressX","pressY","metaKey","shiftKey","data","dx","abs","dy","_startDrag","handleOpen","emit","openOrReveal","_getNextFocusIndex","nextIndex","_handleArrowY","altKey","nextFocusIndex","_handleMultiSelect","goUp","rootPath","reason","console","warn","keyCode","activeElement","window","setTimeout","_b","_c","files","dataTransfer","entry","webkitGetAsEntry","isDirectory","log","upload","selectedPaths","source","find","dragImage","createDragImage","Drag","MimeData","supportedActions","setData","withContent","async","get","otherPaths","reverse","widget","findWidget","open","firstWidgetPlaced","PromiseDelegate","promise","prevWidget","ref","mode","start","action","isLeftClickOnCheckbox","_allSelectedBetween","j","k","end","reduce","fromIndex","shouldAdd","anchor","anteAnchor","step","deleteFile","row","original","newName","userInputForRename","finalFilename","isValidFileName","existing","indexOf","isVisible","requestAnimationFrame","sender","args","newValue","dirname","Renderer","hiddenColumns","createHeaderItemNode","narrow","modified","fileSize","has","checkboxWrapper","createCheckboxWrapperNode","alwaysVisible","updateCaret","modifiedIcon","fileSizeIcon","nameIcon","icon","text","labelWrapper","fileType","DocumentRegistry","getDefaultTextFileType","iconClass","iconContainer","showFileCheckboxes","insertBefore","LabIcon","resolveElement","classes","container","hoverText","size","fileSizeText","formatFileSize","created","Time","format","Date","last_modified","writable","startsWith","removeAttribute","indices","highlightedName","StringExt","highlight","h","mark","VirtualDOM","render","span","querySelector","ariaLabel","contentType","modText","modTitle","formatHuman","count","cloneNode","iconLabel","edit","replaceChild","lastIndexOf","setSelectionRange","onblur","onkeydown","sortNotebooksFirst","getPriority","compare","a","b","isPriorityOverridden","compared","localeCompare","getTime","bytes","decimalPoint","dm","sizes","floor","parseFloat","pow","toFixed","float","caretDownIcon","caretUpIcon","FileBrowser","SidePanel","Panel","_directoryPending","_filePending","_showLastModifiedColumn","_showFileSizeColumn","_showHiddenFiles","_showFileCheckboxes","toolbar","connectionFailure","_onConnectionFailure","mainPanel","crumbs","listing","createDirListing","addWidget","restore","navigateToCurrentDirectory","_navigateToCurrentDirectory","showLastModifiedColumn","showFileSizeColumn","showHiddenFiles","_createNew","newUntitled","createNewDirectory","createNewFile","ext","ServerConnection","ResponseError","response","status","LARGE_FILE_SIZE","CHUNK_SIZE","FileBrowserModel","_connectionFailure","_fileChanged","_key","_pathChanged","_paths","_pending","_pendingPath","_refreshed","_sessions","_state","_isDisposed","_restored","_uploads","_uploadChanged","_driveName","driveName","mimetype","refreshInterval","onFileChanged","runningChanged","onRunningChanged","_unloadEventListener","e","confirmationMessage","returnValue","_poll","Poll","auto","factory","frequency","interval","backoff","standby","refreshStandby","restored","uploadChanged","uploads","clearData","tick","resolvePath","oldValue","handleContents","save","running","url","getDownloadUrl","href","click","populate","ready","fetch","file","serverVersion","getNotebookVersion","supportsChunked","largeFile","_shouldUploadLarge","_uploadCheckDisposed","shouldOverwrite","chunkedUpload","_upload","round","chunked","uploadInner","blob","chunk","reader","FileReader","readAsDataURL","reject","onload","onerror","removeFirstWhere","uploadIndex","finalModel","progress","lastChunk","newUpload","currentModel","splice","clear","models","_populateSessions","change","TogglableHiddenFileBrowserModel","_includeHiddenFiles","includeHiddenFiles","FilterFileBrowserModel","_filter","_filterDirectories","filterDirectories","filtered","setFilter","FileDialog","getOpenFiles","dialogOptions","okButton","focusNodeSelector","host","OpenDialog","launch","getExistingDirectory","_browser","createFilteredFileBrowser","setToolbar","browser","ToolbarButton","newFolderIcon","onClick","tooltip","refreshIcon","layout","PanelLayout","getValue","IFileBrowserFactory","Token","IDefaultFileBrowser","IFileBrowserCommands","Uploader","fileUploadIcon","_input","translateToolTip","_onInputChanged","pending","prototype","call","fileBrowserModel","_onInputClicked","createUploadInput","onclick","onchange","input","multiple","FileUploadComponent","props","GroupItem","spacing","TextItem","ProgressBar","percentage","FileUploadStatus","VDomRenderer","opts","Model","tracker","currentWidget","_onBrowserChange","browserModel","_tracker","currentChanged","complete","disconnect","VDomModel","browse","idx","val","finishedItem","findFirstValue","removeFirstOf","stateChanged","_browserModel","oldBrowserModel"],"sourceRoot":""}