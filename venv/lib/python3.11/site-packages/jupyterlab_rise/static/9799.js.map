{"version":3,"file":"9799.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/autocomplete/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lezer/lr/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/process/browser.js"],"sourcesContent":["import { Annotation, StateEffect, EditorSelection, codePointAt, codePointSize, fromCodePoint, Facet, combineConfig, StateField, Prec, Text, MapMode, RangeValue, RangeSet, CharCategory } from '@codemirror/state';\nimport { Direction, logException, showTooltip, EditorView, ViewPlugin, getTooltip, Decoration, WidgetType, keymap } from '@codemirror/view';\nimport { syntaxTree, indentUnit } from '@codemirror/language';\n\n/**\nAn instance of this is passed to completion source functions.\n*/\nclass CompletionContext {\n    /**\n    Create a new completion context. (Mostly useful for testing\n    completion sources—in the editor, the extension will create\n    these for you.)\n    */\n    constructor(\n    /**\n    The editor state that the completion happens in.\n    */\n    state, \n    /**\n    The position at which the completion is happening.\n    */\n    pos, \n    /**\n    Indicates whether completion was activated explicitly, or\n    implicitly by typing. The usual way to respond to this is to\n    only return completions when either there is part of a\n    completable entity before the cursor, or `explicit` is true.\n    */\n    explicit) {\n        this.state = state;\n        this.pos = pos;\n        this.explicit = explicit;\n        /**\n        @internal\n        */\n        this.abortListeners = [];\n    }\n    /**\n    Get the extent, content, and (if there is a token) type of the\n    token before `this.pos`.\n    */\n    tokenBefore(types) {\n        let token = syntaxTree(this.state).resolveInner(this.pos, -1);\n        while (token && types.indexOf(token.name) < 0)\n            token = token.parent;\n        return token ? { from: token.from, to: this.pos,\n            text: this.state.sliceDoc(token.from, this.pos),\n            type: token.type } : null;\n    }\n    /**\n    Get the match of the given expression directly before the\n    cursor.\n    */\n    matchBefore(expr) {\n        let line = this.state.doc.lineAt(this.pos);\n        let start = Math.max(line.from, this.pos - 250);\n        let str = line.text.slice(start - line.from, this.pos - line.from);\n        let found = str.search(ensureAnchor(expr, false));\n        return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };\n    }\n    /**\n    Yields true when the query has been aborted. Can be useful in\n    asynchronous queries to avoid doing work that will be ignored.\n    */\n    get aborted() { return this.abortListeners == null; }\n    /**\n    Allows you to register abort handlers, which will be called when\n    the query is\n    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n    */\n    addEventListener(type, listener) {\n        if (type == \"abort\" && this.abortListeners)\n            this.abortListeners.push(listener);\n    }\n}\nfunction toSet(chars) {\n    let flat = Object.keys(chars).join(\"\");\n    let words = /\\w/.test(flat);\n    if (words)\n        flat = flat.replace(/\\w/g, \"\");\n    return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction prefixMatch(options) {\n    let first = Object.create(null), rest = Object.create(null);\n    for (let { label } of options) {\n        first[label[0]] = true;\n        for (let i = 1; i < label.length; i++)\n            rest[label[i]] = true;\n    }\n    let source = toSet(first) + toSet(rest) + \"*$\";\n    return [new RegExp(\"^\" + source), new RegExp(source)];\n}\n/**\nGiven a a fixed array of options, return an autocompleter that\ncompletes them.\n*/\nfunction completeFromList(list) {\n    let options = list.map(o => typeof o == \"string\" ? { label: o } : o);\n    let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\n    return (context) => {\n        let token = context.matchBefore(match);\n        return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;\n    };\n}\n/**\nWrap the given completion source so that it will only fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n            if (nodes.indexOf(pos.name) > -1)\n                return source(context);\n            if (pos.type.isTop)\n                break;\n        }\n        return null;\n    };\n}\n/**\nWrap the given completion source so that it will not fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifNotIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n            if (nodes.indexOf(pos.name) > -1)\n                return null;\n            if (pos.type.isTop)\n                break;\n        }\n        return source(context);\n    };\n}\nclass Option {\n    constructor(completion, source, match, score) {\n        this.completion = completion;\n        this.source = source;\n        this.match = match;\n        this.score = score;\n    }\n}\nfunction cur(state) { return state.selection.main.from; }\n// Make sure the given regexp has a $ at its end and, if `start` is\n// true, a ^ at its start.\nfunction ensureAnchor(expr, start) {\n    var _a;\n    let { source } = expr;\n    let addStart = start && source[0] != \"^\", addEnd = source[source.length - 1] != \"$\";\n    if (!addStart && !addEnd)\n        return expr;\n    return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? \"i\" : \"\"));\n}\n/**\nThis annotation is added to transactions that are produced by\npicking a completion.\n*/\nconst pickedCompletion = /*@__PURE__*/Annotation.define();\n/**\nHelper function that returns a transaction spec which inserts a\ncompletion's text in the main selection range, and any other\nselection range that has the same text in front of it.\n*/\nfunction insertCompletionText(state, text, from, to) {\n    let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;\n    return Object.assign(Object.assign({}, state.changeByRange(range => {\n        if (range != main && from != to &&\n            state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))\n            return { range };\n        return {\n            changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: text },\n            range: EditorSelection.cursor(range.from + fromOff + text.length)\n        };\n    })), { userEvent: \"input.complete\" });\n}\nconst SourceCache = /*@__PURE__*/new WeakMap();\nfunction asSource(source) {\n    if (!Array.isArray(source))\n        return source;\n    let known = SourceCache.get(source);\n    if (!known)\n        SourceCache.set(source, known = completeFromList(source));\n    return known;\n}\nconst startCompletionEffect = /*@__PURE__*/StateEffect.define();\nconst closeCompletionEffect = /*@__PURE__*/StateEffect.define();\n\n// A pattern matcher for fuzzy completion matching. Create an instance\n// once for a pattern, and then use that to match any number of\n// completions.\nclass FuzzyMatcher {\n    constructor(pattern) {\n        this.pattern = pattern;\n        this.chars = [];\n        this.folded = [];\n        // Buffers reused by calls to `match` to track matched character\n        // positions.\n        this.any = [];\n        this.precise = [];\n        this.byWord = [];\n        this.score = 0;\n        this.matched = [];\n        for (let p = 0; p < pattern.length;) {\n            let char = codePointAt(pattern, p), size = codePointSize(char);\n            this.chars.push(char);\n            let part = pattern.slice(p, p + size), upper = part.toUpperCase();\n            this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));\n            p += size;\n        }\n        this.astral = pattern.length != this.chars.length;\n    }\n    ret(score, matched) {\n        this.score = score;\n        this.matched = matched;\n        return true;\n    }\n    // Matches a given word (completion) against the pattern (input).\n    // Will return a boolean indicating whether there was a match and,\n    // on success, set `this.score` to the score, `this.matched` to an\n    // array of `from, to` pairs indicating the matched parts of `word`.\n    //\n    // The score is a number that is more negative the worse the match\n    // is. See `Penalty` above.\n    match(word) {\n        if (this.pattern.length == 0)\n            return this.ret(-100 /* NotFull */, []);\n        if (word.length < this.pattern.length)\n            return false;\n        let { chars, folded, any, precise, byWord } = this;\n        // For single-character queries, only match when they occur right\n        // at the start\n        if (chars.length == 1) {\n            let first = codePointAt(word, 0), firstSize = codePointSize(first);\n            let score = firstSize == word.length ? 0 : -100 /* NotFull */;\n            if (first == chars[0]) ;\n            else if (first == folded[0])\n                score += -200 /* CaseFold */;\n            else\n                return false;\n            return this.ret(score, [0, firstSize]);\n        }\n        let direct = word.indexOf(this.pattern);\n        if (direct == 0)\n            return this.ret(word.length == this.pattern.length ? 0 : -100 /* NotFull */, [0, this.pattern.length]);\n        let len = chars.length, anyTo = 0;\n        if (direct < 0) {\n            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\n                let next = codePointAt(word, i);\n                if (next == chars[anyTo] || next == folded[anyTo])\n                    any[anyTo++] = i;\n                i += codePointSize(next);\n            }\n            // No match, exit immediately\n            if (anyTo < len)\n                return false;\n        }\n        // This tracks the extent of the precise (non-folded, not\n        // necessarily adjacent) match\n        let preciseTo = 0;\n        // Tracks whether there is a match that hits only characters that\n        // appear to be starting words. `byWordFolded` is set to true when\n        // a case folded character is encountered in such a match\n        let byWordTo = 0, byWordFolded = false;\n        // If we've found a partial adjacent match, these track its state\n        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;\n        let hasLower = /[a-z]/.test(word), wordAdjacent = true;\n        // Go over the option's text, scanning for the various kinds of matches\n        for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {\n            let next = codePointAt(word, i);\n            if (direct < 0) {\n                if (preciseTo < len && next == chars[preciseTo])\n                    precise[preciseTo++] = i;\n                if (adjacentTo < len) {\n                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\n                        if (adjacentTo == 0)\n                            adjacentStart = i;\n                        adjacentEnd = i + 1;\n                        adjacentTo++;\n                    }\n                    else {\n                        adjacentTo = 0;\n                    }\n                }\n            }\n            let ch, type = next < 0xff\n                ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)\n                : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);\n            if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {\n                if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))\n                    byWord[byWordTo++] = i;\n                else if (byWord.length)\n                    wordAdjacent = false;\n            }\n            prevType = type;\n            i += codePointSize(next);\n        }\n        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);\n        if (adjacentTo == len && adjacentStart == 0)\n            return this.ret(-200 /* CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* NotFull */), [0, adjacentEnd]);\n        if (direct > -1)\n            return this.ret(-700 /* NotStart */ - word.length, [direct, direct + this.pattern.length]);\n        if (adjacentTo == len)\n            return this.ret(-200 /* CaseFold */ + -700 /* NotStart */ - word.length, [adjacentStart, adjacentEnd]);\n        if (byWordTo == len)\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ +\n                (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);\n        return chars.length == 2 ? false\n            : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);\n    }\n    result(score, positions, word) {\n        let result = [], i = 0;\n        for (let pos of positions) {\n            let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);\n            if (i && result[i - 1] == pos)\n                result[i - 1] = to;\n            else {\n                result[i++] = pos;\n                result[i++] = to;\n            }\n        }\n        return this.ret(score - word.length, result);\n    }\n}\n\nconst completionConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            activateOnTyping: true,\n            selectOnOpen: true,\n            override: null,\n            closeOnBlur: true,\n            maxRenderedOptions: 100,\n            defaultKeymap: true,\n            tooltipClass: () => \"\",\n            optionClass: () => \"\",\n            aboveCursor: false,\n            icons: true,\n            addToOptions: [],\n            positionInfo: defaultPositionInfo,\n            compareCompletions: (a, b) => a.label.localeCompare(b.label),\n            interactionDelay: 75\n        }, {\n            defaultKeymap: (a, b) => a && b,\n            closeOnBlur: (a, b) => a && b,\n            icons: (a, b) => a && b,\n            tooltipClass: (a, b) => c => joinClass(a(c), b(c)),\n            optionClass: (a, b) => c => joinClass(a(c), b(c)),\n            addToOptions: (a, b) => a.concat(b)\n        });\n    }\n});\nfunction joinClass(a, b) {\n    return a ? b ? a + \" \" + b : a : b;\n}\nfunction defaultPositionInfo(view, list, option, info, space) {\n    let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;\n    let side = \"top\", offset, maxWidth;\n    let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;\n    let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;\n    if (left && spaceLeft < Math.min(infoWidth, spaceRight))\n        left = false;\n    else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))\n        left = true;\n    if (infoWidth <= (left ? spaceLeft : spaceRight)) {\n        offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;\n        maxWidth = Math.min(400 /* Width */, left ? spaceLeft : spaceRight);\n    }\n    else {\n        narrow = true;\n        maxWidth = Math.min(400 /* Width */, (rtl ? list.right : space.right - list.left) - 30 /* Margin */);\n        let spaceBelow = space.bottom - list.bottom;\n        if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion\n            offset = option.bottom - list.top;\n        }\n        else { // Above it\n            side = \"bottom\";\n            offset = list.bottom - option.top;\n        }\n    }\n    return {\n        style: `${side}: ${offset}px; max-width: ${maxWidth}px`,\n        class: \"cm-completionInfo-\" + (narrow ? (rtl ? \"left-narrow\" : \"right-narrow\") : left ? \"left\" : \"right\")\n    };\n}\n\nfunction optionContent(config) {\n    let content = config.addToOptions.slice();\n    if (config.icons)\n        content.push({\n            render(completion) {\n                let icon = document.createElement(\"div\");\n                icon.classList.add(\"cm-completionIcon\");\n                if (completion.type)\n                    icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\n                icon.setAttribute(\"aria-hidden\", \"true\");\n                return icon;\n            },\n            position: 20\n        });\n    content.push({\n        render(completion, _s, match) {\n            let labelElt = document.createElement(\"span\");\n            labelElt.className = \"cm-completionLabel\";\n            let label = completion.displayLabel || completion.label, off = 0;\n            for (let j = 0; j < match.length;) {\n                let from = match[j++], to = match[j++];\n                if (from > off)\n                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));\n                let span = labelElt.appendChild(document.createElement(\"span\"));\n                span.appendChild(document.createTextNode(label.slice(from, to)));\n                span.className = \"cm-completionMatchedText\";\n                off = to;\n            }\n            if (off < label.length)\n                labelElt.appendChild(document.createTextNode(label.slice(off)));\n            return labelElt;\n        },\n        position: 50\n    }, {\n        render(completion) {\n            if (!completion.detail)\n                return null;\n            let detailElt = document.createElement(\"span\");\n            detailElt.className = \"cm-completionDetail\";\n            detailElt.textContent = completion.detail;\n            return detailElt;\n        },\n        position: 80\n    });\n    return content.sort((a, b) => a.position - b.position).map(a => a.render);\n}\nfunction rangeAroundSelected(total, selected, max) {\n    if (total <= max)\n        return { from: 0, to: total };\n    if (selected < 0)\n        selected = 0;\n    if (selected <= (total >> 1)) {\n        let off = Math.floor(selected / max);\n        return { from: off * max, to: (off + 1) * max };\n    }\n    let off = Math.floor((total - selected) / max);\n    return { from: total - (off + 1) * max, to: total - off * max };\n}\nclass CompletionTooltip {\n    constructor(view, stateField, applyCompletion) {\n        this.view = view;\n        this.stateField = stateField;\n        this.applyCompletion = applyCompletion;\n        this.info = null;\n        this.infoDestroy = null;\n        this.placeInfoReq = {\n            read: () => this.measureInfo(),\n            write: (pos) => this.placeInfo(pos),\n            key: this\n        };\n        this.space = null;\n        this.currentClass = \"\";\n        let cState = view.state.field(stateField);\n        let { options, selected } = cState.open;\n        let config = view.state.facet(completionConfig);\n        this.optionContent = optionContent(config);\n        this.optionClass = config.optionClass;\n        this.tooltipClass = config.tooltipClass;\n        this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-tooltip-autocomplete\";\n        this.updateTooltipClass(view.state);\n        this.dom.addEventListener(\"mousedown\", (e) => {\n            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\n                if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\n                    this.applyCompletion(view, options[+match[1]]);\n                    e.preventDefault();\n                    return;\n                }\n            }\n        });\n        this.dom.addEventListener(\"focusout\", (e) => {\n            let state = view.state.field(this.stateField, false);\n            if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&\n                e.relatedTarget != view.contentDOM)\n                view.dispatch({ effects: closeCompletionEffect.of(null) });\n        });\n        this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));\n        this.list.addEventListener(\"scroll\", () => {\n            if (this.info)\n                this.view.requestMeasure(this.placeInfoReq);\n        });\n    }\n    mount() { this.updateSel(); }\n    update(update) {\n        var _a, _b, _c;\n        let cState = update.state.field(this.stateField);\n        let prevState = update.startState.field(this.stateField);\n        this.updateTooltipClass(update.state);\n        if (cState != prevState) {\n            this.updateSel();\n            if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled))\n                this.dom.classList.toggle(\"cm-tooltip-autocomplete-disabled\", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));\n        }\n    }\n    updateTooltipClass(state) {\n        let cls = this.tooltipClass(state);\n        if (cls != this.currentClass) {\n            for (let c of this.currentClass.split(\" \"))\n                if (c)\n                    this.dom.classList.remove(c);\n            for (let c of cls.split(\" \"))\n                if (c)\n                    this.dom.classList.add(c);\n            this.currentClass = cls;\n        }\n    }\n    positioned(space) {\n        this.space = space;\n        if (this.info)\n            this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSel() {\n        let cState = this.view.state.field(this.stateField), open = cState.open;\n        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {\n            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);\n            this.list.remove();\n            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));\n            this.list.addEventListener(\"scroll\", () => {\n                if (this.info)\n                    this.view.requestMeasure(this.placeInfoReq);\n            });\n        }\n        if (this.updateSelectedOption(open.selected)) {\n            this.destroyInfo();\n            let { completion } = open.options[open.selected];\n            let { info } = completion;\n            if (!info)\n                return;\n            let infoResult = typeof info === \"string\" ? document.createTextNode(info) : info(completion);\n            if (!infoResult)\n                return;\n            if (\"then\" in infoResult) {\n                infoResult.then(obj => {\n                    if (obj && this.view.state.field(this.stateField, false) == cState)\n                        this.addInfoPane(obj, completion);\n                }).catch(e => logException(this.view.state, e, \"completion info\"));\n            }\n            else {\n                this.addInfoPane(infoResult, completion);\n            }\n        }\n    }\n    addInfoPane(content, completion) {\n        this.destroyInfo();\n        let wrap = this.info = document.createElement(\"div\");\n        wrap.className = \"cm-tooltip cm-completionInfo\";\n        if (content.nodeType != null) {\n            wrap.appendChild(content);\n            this.infoDestroy = null;\n        }\n        else {\n            let { dom, destroy } = content;\n            wrap.appendChild(dom);\n            this.infoDestroy = destroy || null;\n        }\n        this.dom.appendChild(wrap);\n        this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSelectedOption(selected) {\n        let set = null;\n        for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\n            if (opt.nodeName != \"LI\" || !opt.id) {\n                i--; // A section header\n            }\n            else if (i == selected) {\n                if (!opt.hasAttribute(\"aria-selected\")) {\n                    opt.setAttribute(\"aria-selected\", \"true\");\n                    set = opt;\n                }\n            }\n            else {\n                if (opt.hasAttribute(\"aria-selected\"))\n                    opt.removeAttribute(\"aria-selected\");\n            }\n        }\n        if (set)\n            scrollIntoView(this.list, set);\n        return set;\n    }\n    measureInfo() {\n        let sel = this.dom.querySelector(\"[aria-selected]\");\n        if (!sel || !this.info)\n            return null;\n        let listRect = this.dom.getBoundingClientRect();\n        let infoRect = this.info.getBoundingClientRect();\n        let selRect = sel.getBoundingClientRect();\n        let space = this.space;\n        if (!space) {\n            let win = this.dom.ownerDocument.defaultView || window;\n            space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };\n        }\n        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||\n            selRect.bottom < Math.max(space.top, listRect.top) + 10)\n            return null;\n        return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space);\n    }\n    placeInfo(pos) {\n        if (this.info) {\n            if (pos) {\n                if (pos.style)\n                    this.info.style.cssText = pos.style;\n                this.info.className = \"cm-tooltip cm-completionInfo \" + (pos.class || \"\");\n            }\n            else {\n                this.info.style.cssText = \"top: -1e6px\";\n            }\n        }\n    }\n    createListBox(options, id, range) {\n        const ul = document.createElement(\"ul\");\n        ul.id = id;\n        ul.setAttribute(\"role\", \"listbox\");\n        ul.setAttribute(\"aria-expanded\", \"true\");\n        ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n        let curSection = null;\n        for (let i = range.from; i < range.to; i++) {\n            let { completion, match } = options[i], { section } = completion;\n            if (section) {\n                let name = typeof section == \"string\" ? section : section.name;\n                if (name != curSection && (i > range.from || range.from == 0)) {\n                    curSection = name;\n                    if (typeof section != \"string\" && section.header) {\n                        ul.appendChild(section.header(section));\n                    }\n                    else {\n                        let header = ul.appendChild(document.createElement(\"completion-section\"));\n                        header.textContent = name;\n                    }\n                }\n            }\n            const li = ul.appendChild(document.createElement(\"li\"));\n            li.id = id + \"-\" + i;\n            li.setAttribute(\"role\", \"option\");\n            let cls = this.optionClass(completion);\n            if (cls)\n                li.className = cls;\n            for (let source of this.optionContent) {\n                let node = source(completion, this.view.state, match);\n                if (node)\n                    li.appendChild(node);\n            }\n        }\n        if (range.from)\n            ul.classList.add(\"cm-completionListIncompleteTop\");\n        if (range.to < options.length)\n            ul.classList.add(\"cm-completionListIncompleteBottom\");\n        return ul;\n    }\n    destroyInfo() {\n        if (this.info) {\n            if (this.infoDestroy)\n                this.infoDestroy();\n            this.info.remove();\n            this.info = null;\n        }\n    }\n    destroy() {\n        this.destroyInfo();\n    }\n}\n// We allocate a new function instance every time the completion\n// changes to force redrawing/repositioning of the tooltip\nfunction completionTooltip(stateField, applyCompletion) {\n    return (view) => new CompletionTooltip(view, stateField, applyCompletion);\n}\nfunction scrollIntoView(container, element) {\n    let parent = container.getBoundingClientRect();\n    let self = element.getBoundingClientRect();\n    if (self.top < parent.top)\n        container.scrollTop -= parent.top - self.top;\n    else if (self.bottom > parent.bottom)\n        container.scrollTop += self.bottom - parent.bottom;\n}\n\n// Used to pick a preferred option when two options with the same\n// label occur in the result.\nfunction score(option) {\n    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +\n        (option.type ? 1 : 0);\n}\nfunction sortOptions(active, state) {\n    let options = [];\n    let sections = null;\n    let addOption = (option) => {\n        options.push(option);\n        let { section } = option.completion;\n        if (section) {\n            if (!sections)\n                sections = [];\n            let name = typeof section == \"string\" ? section : section.name;\n            if (!sections.some(s => s.name == name))\n                sections.push(typeof section == \"string\" ? { name } : section);\n        }\n    };\n    for (let a of active)\n        if (a.hasResult()) {\n            let getMatch = a.result.getMatch;\n            if (a.result.filter === false) {\n                for (let option of a.result.options) {\n                    addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));\n                }\n            }\n            else {\n                let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to));\n                for (let option of a.result.options)\n                    if (matcher.match(option.label)) {\n                        let matched = !option.displayLabel ? matcher.matched : getMatch ? getMatch(option, matcher.matched) : [];\n                        addOption(new Option(option, a.source, matched, matcher.score + (option.boost || 0)));\n                    }\n            }\n        }\n    if (sections) {\n        let sectionOrder = Object.create(null), pos = 0;\n        let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };\n        for (let s of sections.sort(cmp)) {\n            pos -= 1e5;\n            sectionOrder[s.name] = pos;\n        }\n        for (let option of options) {\n            let { section } = option.completion;\n            if (section)\n                option.score += sectionOrder[typeof section == \"string\" ? section : section.name];\n        }\n    }\n    let result = [], prev = null;\n    let compare = state.facet(completionConfig).compareCompletions;\n    for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {\n        let cur = opt.completion;\n        if (!prev || prev.label != cur.label || prev.detail != cur.detail ||\n            (prev.type != null && cur.type != null && prev.type != cur.type) ||\n            prev.apply != cur.apply || prev.boost != cur.boost)\n            result.push(opt);\n        else if (score(opt.completion) > score(prev))\n            result[result.length - 1] = opt;\n        prev = opt.completion;\n    }\n    return result;\n}\nclass CompletionDialog {\n    constructor(options, attrs, tooltip, timestamp, selected, disabled) {\n        this.options = options;\n        this.attrs = attrs;\n        this.tooltip = tooltip;\n        this.timestamp = timestamp;\n        this.selected = selected;\n        this.disabled = disabled;\n    }\n    setSelected(selected, id) {\n        return selected == this.selected || selected >= this.options.length ? this\n            : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);\n    }\n    static build(active, state, id, prev, conf) {\n        let options = sortOptions(active, state);\n        if (!options.length) {\n            return prev && active.some(a => a.state == 1 /* Pending */) ?\n                new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;\n        }\n        let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;\n        if (prev && prev.selected != selected && prev.selected != -1) {\n            let selectedValue = prev.options[prev.selected].completion;\n            for (let i = 0; i < options.length; i++)\n                if (options[i].completion == selectedValue) {\n                    selected = i;\n                    break;\n                }\n        }\n        return new CompletionDialog(options, makeAttrs(id, selected), {\n            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\n            create: completionTooltip(completionState, applyCompletion),\n            above: conf.aboveCursor,\n        }, prev ? prev.timestamp : Date.now(), selected, false);\n    }\n    map(changes) {\n        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);\n    }\n}\nclass CompletionState {\n    constructor(active, id, open) {\n        this.active = active;\n        this.id = id;\n        this.open = open;\n    }\n    static start() {\n        return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n    }\n    update(tr) {\n        let { state } = tr, conf = state.facet(completionConfig);\n        let sources = conf.override ||\n            state.languageDataAt(\"autocomplete\", cur(state)).map(asSource);\n        let active = sources.map(source => {\n            let value = this.active.find(s => s.source == source) ||\n                new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);\n            return value.update(tr, conf);\n        });\n        if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))\n            active = this.active;\n        let open = this.open;\n        if (open && tr.docChanged)\n            open = open.map(tr.changes);\n        if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||\n            !sameResults(active, this.active))\n            open = CompletionDialog.build(active, state, this.id, open, conf);\n        else if (open && open.disabled && !active.some(a => a.state == 1 /* Pending */))\n            open = null;\n        if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))\n            active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);\n        for (let effect of tr.effects)\n            if (effect.is(setSelectedEffect))\n                open = open && open.setSelected(effect.value, this.id);\n        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\n    }\n    get tooltip() { return this.open ? this.open.tooltip : null; }\n    get attrs() { return this.open ? this.open.attrs : baseAttrs; }\n}\nfunction sameResults(a, b) {\n    if (a == b)\n        return true;\n    for (let iA = 0, iB = 0;;) {\n        while (iA < a.length && !a[iA].hasResult)\n            iA++;\n        while (iB < b.length && !b[iB].hasResult)\n            iB++;\n        let endA = iA == a.length, endB = iB == b.length;\n        if (endA || endB)\n            return endA == endB;\n        if (a[iA++].result != b[iB++].result)\n            return false;\n    }\n}\nconst baseAttrs = {\n    \"aria-autocomplete\": \"list\"\n};\nfunction makeAttrs(id, selected) {\n    let result = {\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-controls\": id\n    };\n    if (selected > -1)\n        result[\"aria-activedescendant\"] = id + \"-\" + selected;\n    return result;\n}\nconst none = [];\nfunction getUserEvent(tr) {\n    return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass ActiveSource {\n    constructor(source, state, explicitPos = -1) {\n        this.source = source;\n        this.state = state;\n        this.explicitPos = explicitPos;\n    }\n    hasResult() { return false; }\n    update(tr, conf) {\n        let event = getUserEvent(tr), value = this;\n        if (event)\n            value = value.handleUserEvent(tr, event, conf);\n        else if (tr.docChanged)\n            value = value.handleChange(tr);\n        else if (tr.selection && value.state != 0 /* Inactive */)\n            value = new ActiveSource(value.source, 0 /* Inactive */);\n        for (let effect of tr.effects) {\n            if (effect.is(startCompletionEffect))\n                value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);\n            else if (effect.is(closeCompletionEffect))\n                value = new ActiveSource(value.source, 0 /* Inactive */);\n            else if (effect.is(setActiveEffect))\n                for (let active of effect.value)\n                    if (active.source == value.source)\n                        value = active;\n        }\n        return value;\n    }\n    handleUserEvent(tr, type, conf) {\n        return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n    }\n    map(changes) {\n        return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\n    }\n}\nclass ActiveResult extends ActiveSource {\n    constructor(source, explicitPos, result, from, to) {\n        super(source, 2 /* Result */, explicitPos);\n        this.result = result;\n        this.from = from;\n        this.to = to;\n    }\n    hasResult() { return true; }\n    handleUserEvent(tr, type, conf) {\n        var _a;\n        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);\n        let pos = cur(tr.state);\n        if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||\n            pos > to ||\n            type == \"delete\" && cur(tr.startState) == this.from)\n            return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);\n        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;\n        if (checkValid(this.result.validFor, tr.state, from, to))\n            return new ActiveResult(this.source, explicitPos, this.result, from, to);\n        if (this.result.update &&\n            (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))\n            return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));\n        return new ActiveSource(this.source, 1 /* Pending */, explicitPos);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n    }\n    map(mapping) {\n        return mapping.empty ? this :\n            new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\n    }\n}\nfunction checkValid(validFor, state, from, to) {\n    if (!validFor)\n        return false;\n    let text = state.sliceDoc(from, to);\n    return typeof validFor == \"function\" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);\n}\nconst setActiveEffect = /*@__PURE__*/StateEffect.define({\n    map(sources, mapping) { return sources.map(s => s.map(mapping)); }\n});\nconst setSelectedEffect = /*@__PURE__*/StateEffect.define();\nconst completionState = /*@__PURE__*/StateField.define({\n    create() { return CompletionState.start(); },\n    update(value, tr) { return value.update(tr); },\n    provide: f => [\n        showTooltip.from(f, val => val.tooltip),\n        EditorView.contentAttributes.from(f, state => state.attrs)\n    ]\n});\nfunction applyCompletion(view, option) {\n    const apply = option.completion.apply || option.completion.label;\n    let result = view.state.field(completionState).active.find(a => a.source == option.source);\n    if (!(result instanceof ActiveResult))\n        return false;\n    if (typeof apply == \"string\")\n        view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));\n    else\n        apply(view, option.completion, result.from, result.to);\n    return true;\n}\n\n/**\nReturns a command that moves the completion selection forward or\nbackward by the given amount.\n*/\nfunction moveCompletionSelection(forward, by = \"option\") {\n    return (view) => {\n        let cState = view.state.field(completionState, false);\n        if (!cState || !cState.open || cState.open.disabled ||\n            Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\n            return false;\n        let step = 1, tooltip;\n        if (by == \"page\" && (tooltip = getTooltip(view, cState.open.tooltip)))\n            step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /\n                tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\n        let { length } = cState.open.options;\n        let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;\n        if (selected < 0)\n            selected = by == \"page\" ? 0 : length - 1;\n        else if (selected >= length)\n            selected = by == \"page\" ? length - 1 : 0;\n        view.dispatch({ effects: setSelectedEffect.of(selected) });\n        return true;\n    };\n}\n/**\nAccept the current completion.\n*/\nconst acceptCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||\n        Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\n        return false;\n    return applyCompletion(view, cState.open.options[cState.open.selected]);\n};\n/**\nExplicitly start autocompletion.\n*/\nconst startCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState)\n        return false;\n    view.dispatch({ effects: startCompletionEffect.of(true) });\n    return true;\n};\n/**\nClose the currently active completion.\n*/\nconst closeCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))\n        return false;\n    view.dispatch({ effects: closeCompletionEffect.of(null) });\n    return true;\n};\nclass RunningQuery {\n    constructor(active, context) {\n        this.active = active;\n        this.context = context;\n        this.time = Date.now();\n        this.updates = [];\n        // Note that 'undefined' means 'not done yet', whereas 'null' means\n        // 'query returned null'.\n        this.done = undefined;\n    }\n}\nconst DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;\nconst completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.debounceUpdate = -1;\n        this.running = [];\n        this.debounceAccept = -1;\n        this.composing = 0 /* None */;\n        for (let active of view.state.field(completionState).active)\n            if (active.state == 1 /* Pending */)\n                this.startQuery(active);\n    }\n    update(update) {\n        let cState = update.state.field(completionState);\n        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)\n            return;\n        let doesReset = update.transactions.some(tr => {\n            return (tr.selection || tr.docChanged) && !getUserEvent(tr);\n        });\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (doesReset ||\n                query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\n                for (let handler of query.context.abortListeners) {\n                    try {\n                        handler();\n                    }\n                    catch (e) {\n                        logException(this.view.state, e);\n                    }\n                }\n                query.context.abortListeners = null;\n                this.running.splice(i--, 1);\n            }\n            else {\n                query.updates.push(...update.transactions);\n            }\n        }\n        if (this.debounceUpdate > -1)\n            clearTimeout(this.debounceUpdate);\n        this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source))\n            ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;\n        if (this.composing != 0 /* None */)\n            for (let tr of update.transactions) {\n                if (getUserEvent(tr) == \"input\")\n                    this.composing = 2 /* Changed */;\n                else if (this.composing == 2 /* Changed */ && tr.selection)\n                    this.composing = 3 /* ChangedAndMoved */;\n            }\n    }\n    startUpdate() {\n        this.debounceUpdate = -1;\n        let { state } = this.view, cState = state.field(completionState);\n        for (let active of cState.active) {\n            if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))\n                this.startQuery(active);\n        }\n    }\n    startQuery(active) {\n        let { state } = this.view, pos = cur(state);\n        let context = new CompletionContext(state, pos, active.explicitPos == pos);\n        let pending = new RunningQuery(active, context);\n        this.running.push(pending);\n        Promise.resolve(active.source(context)).then(result => {\n            if (!pending.context.aborted) {\n                pending.done = result || null;\n                this.scheduleAccept();\n            }\n        }, err => {\n            this.view.dispatch({ effects: closeCompletionEffect.of(null) });\n            logException(this.view.state, err);\n        });\n    }\n    scheduleAccept() {\n        if (this.running.every(q => q.done !== undefined))\n            this.accept();\n        else if (this.debounceAccept < 0)\n            this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);\n    }\n    // For each finished query in this.running, try to create a result\n    // or, if appropriate, restart the query.\n    accept() {\n        var _a;\n        if (this.debounceAccept > -1)\n            clearTimeout(this.debounceAccept);\n        this.debounceAccept = -1;\n        let updated = [];\n        let conf = this.view.state.facet(completionConfig);\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (query.done === undefined)\n                continue;\n            this.running.splice(i--, 1);\n            if (query.done) {\n                let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));\n                // Replay the transactions that happened since the start of\n                // the request and see if that preserves the result\n                for (let tr of query.updates)\n                    active = active.update(tr, conf);\n                if (active.hasResult()) {\n                    updated.push(active);\n                    continue;\n                }\n            }\n            let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);\n            if (current && current.state == 1 /* Pending */) {\n                if (query.done == null) {\n                    // Explicitly failed. Should clear the pending status if it\n                    // hasn't been re-set in the meantime.\n                    let active = new ActiveSource(query.active.source, 0 /* Inactive */);\n                    for (let tr of query.updates)\n                        active = active.update(tr, conf);\n                    if (active.state != 1 /* Pending */)\n                        updated.push(active);\n                }\n                else {\n                    // Cleared by subsequent transactions. Restart.\n                    this.startQuery(current);\n                }\n            }\n        }\n        if (updated.length)\n            this.view.dispatch({ effects: setActiveEffect.of(updated) });\n    }\n}, {\n    eventHandlers: {\n        blur(event) {\n            let state = this.view.state.field(completionState, false);\n            if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {\n                let dialog = state.open && getTooltip(this.view, state.open.tooltip);\n                if (!dialog || !dialog.dom.contains(event.relatedTarget))\n                    this.view.dispatch({ effects: closeCompletionEffect.of(null) });\n            }\n        },\n        compositionstart() {\n            this.composing = 1 /* Started */;\n        },\n        compositionend() {\n            if (this.composing == 3 /* ChangedAndMoved */) {\n                // Safari fires compositionend events synchronously, possibly\n                // from inside an update, so dispatch asynchronously to avoid reentrancy\n                setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);\n            }\n            this.composing = 0 /* None */;\n        }\n    }\n});\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-tooltip.cm-tooltip-autocomplete\": {\n        \"& > ul\": {\n            fontFamily: \"monospace\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden auto\",\n            maxWidth_fallback: \"700px\",\n            maxWidth: \"min(700px, 95vw)\",\n            minWidth: \"250px\",\n            maxHeight: \"10em\",\n            height: \"100%\",\n            listStyle: \"none\",\n            margin: 0,\n            padding: 0,\n            \"& > li, & > completion-section\": {\n                padding: \"1px 3px\",\n                lineHeight: 1.2\n            },\n            \"& > li\": {\n                overflowX: \"hidden\",\n                textOverflow: \"ellipsis\",\n                cursor: \"pointer\"\n            },\n            \"& > completion-section\": {\n                display: \"list-item\",\n                borderBottom: \"1px solid silver\",\n                paddingLeft: \"0.5em\",\n                opacity: 0.7\n            }\n        }\n    },\n    \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#17c\",\n        color: \"white\",\n    },\n    \"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#777\",\n    },\n    \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#347\",\n        color: \"white\",\n    },\n    \"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#444\",\n    },\n    \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n        content: '\"···\"',\n        opacity: 0.5,\n        display: \"block\",\n        textAlign: \"center\"\n    },\n    \".cm-tooltip.cm-completionInfo\": {\n        position: \"absolute\",\n        padding: \"3px 9px\",\n        width: \"max-content\",\n        maxWidth: `${400 /* Width */}px`,\n        boxSizing: \"border-box\"\n    },\n    \".cm-completionInfo.cm-completionInfo-left\": { right: \"100%\" },\n    \".cm-completionInfo.cm-completionInfo-right\": { left: \"100%\" },\n    \".cm-completionInfo.cm-completionInfo-left-narrow\": { right: `${30 /* Margin */}px` },\n    \".cm-completionInfo.cm-completionInfo-right-narrow\": { left: `${30 /* Margin */}px` },\n    \"&light .cm-snippetField\": { backgroundColor: \"#00000022\" },\n    \"&dark .cm-snippetField\": { backgroundColor: \"#ffffff22\" },\n    \".cm-snippetFieldPosition\": {\n        verticalAlign: \"text-top\",\n        width: 0,\n        height: \"1.15em\",\n        display: \"inline-block\",\n        margin: \"0 -0.7px -.7em\",\n        borderLeft: \"1.4px dotted #888\"\n    },\n    \".cm-completionMatchedText\": {\n        textDecoration: \"underline\"\n    },\n    \".cm-completionDetail\": {\n        marginLeft: \"0.5em\",\n        fontStyle: \"italic\"\n    },\n    \".cm-completionIcon\": {\n        fontSize: \"90%\",\n        width: \".8em\",\n        display: \"inline-block\",\n        textAlign: \"center\",\n        paddingRight: \".6em\",\n        opacity: \"0.6\",\n        boxSizing: \"content-box\"\n    },\n    \".cm-completionIcon-function, .cm-completionIcon-method\": {\n        \"&:after\": { content: \"'ƒ'\" }\n    },\n    \".cm-completionIcon-class\": {\n        \"&:after\": { content: \"'○'\" }\n    },\n    \".cm-completionIcon-interface\": {\n        \"&:after\": { content: \"'◌'\" }\n    },\n    \".cm-completionIcon-variable\": {\n        \"&:after\": { content: \"'𝑥'\" }\n    },\n    \".cm-completionIcon-constant\": {\n        \"&:after\": { content: \"'𝐶'\" }\n    },\n    \".cm-completionIcon-type\": {\n        \"&:after\": { content: \"'𝑡'\" }\n    },\n    \".cm-completionIcon-enum\": {\n        \"&:after\": { content: \"'∪'\" }\n    },\n    \".cm-completionIcon-property\": {\n        \"&:after\": { content: \"'□'\" }\n    },\n    \".cm-completionIcon-keyword\": {\n        \"&:after\": { content: \"'🔑\\uFE0E'\" } // Disable emoji rendering\n    },\n    \".cm-completionIcon-namespace\": {\n        \"&:after\": { content: \"'▢'\" }\n    },\n    \".cm-completionIcon-text\": {\n        \"&:after\": { content: \"'abc'\", fontSize: \"50%\", verticalAlign: \"middle\" }\n    }\n});\n\nclass FieldPos {\n    constructor(field, line, from, to) {\n        this.field = field;\n        this.line = line;\n        this.from = from;\n        this.to = to;\n    }\n}\nclass FieldRange {\n    constructor(field, from, to) {\n        this.field = field;\n        this.from = from;\n        this.to = to;\n    }\n    map(changes) {\n        let from = changes.mapPos(this.from, -1, MapMode.TrackDel);\n        let to = changes.mapPos(this.to, 1, MapMode.TrackDel);\n        return from == null || to == null ? null : new FieldRange(this.field, from, to);\n    }\n}\nclass Snippet {\n    constructor(lines, fieldPositions) {\n        this.lines = lines;\n        this.fieldPositions = fieldPositions;\n    }\n    instantiate(state, pos) {\n        let text = [], lineStart = [pos];\n        let lineObj = state.doc.lineAt(pos), baseIndent = /^\\s*/.exec(lineObj.text)[0];\n        for (let line of this.lines) {\n            if (text.length) {\n                let indent = baseIndent, tabs = /^\\t*/.exec(line)[0].length;\n                for (let i = 0; i < tabs; i++)\n                    indent += state.facet(indentUnit);\n                lineStart.push(pos + indent.length - tabs);\n                line = indent + line.slice(tabs);\n            }\n            text.push(line);\n            pos += line.length + 1;\n        }\n        let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\n        return { text, ranges };\n    }\n    static parse(template) {\n        let fields = [];\n        let lines = [], positions = [], m;\n        for (let line of template.split(/\\r\\n?|\\n/)) {\n            while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)) {\n                let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || \"\", found = -1;\n                for (let i = 0; i < fields.length; i++) {\n                    if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)\n                        found = i;\n                }\n                if (found < 0) {\n                    let i = 0;\n                    while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))\n                        i++;\n                    fields.splice(i, 0, { seq, name });\n                    found = i;\n                    for (let pos of positions)\n                        if (pos.field >= found)\n                            pos.field++;\n                }\n                positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\n                line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\n            }\n            for (let esc; esc = /\\\\([{}])/.exec(line);) {\n                line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);\n                for (let pos of positions)\n                    if (pos.line == lines.length && pos.from > esc.index) {\n                        pos.from--;\n                        pos.to--;\n                    }\n            }\n            lines.push(line);\n        }\n        return new Snippet(lines, positions);\n    }\n}\nlet fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM() {\n            let span = document.createElement(\"span\");\n            span.className = \"cm-snippetFieldPosition\";\n            return span;\n        }\n        ignoreEvent() { return false; }\n    } });\nlet fieldRange = /*@__PURE__*/Decoration.mark({ class: \"cm-snippetField\" });\nclass ActiveSnippet {\n    constructor(ranges, active) {\n        this.ranges = ranges;\n        this.active = active;\n        this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\n    }\n    map(changes) {\n        let ranges = [];\n        for (let r of this.ranges) {\n            let mapped = r.map(changes);\n            if (!mapped)\n                return null;\n            ranges.push(mapped);\n        }\n        return new ActiveSnippet(ranges, this.active);\n    }\n    selectionInsideField(sel) {\n        return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\n    }\n}\nconst setActive = /*@__PURE__*/StateEffect.define({\n    map(value, changes) { return value && value.map(changes); }\n});\nconst moveToField = /*@__PURE__*/StateEffect.define();\nconst snippetState = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setActive))\n                return effect.value;\n            if (effect.is(moveToField) && value)\n                return new ActiveSnippet(value.ranges, effect.value);\n        }\n        if (value && tr.docChanged)\n            value = value.map(tr.changes);\n        if (value && tr.selection && !value.selectionInsideField(tr.selection))\n            value = null;\n        return value;\n    },\n    provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)\n});\nfunction fieldSelection(ranges, field) {\n    return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));\n}\n/**\nConvert a snippet template to a function that can\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\nusing syntax like this:\n\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\n\nEach `${}` placeholder (you may also use `#{}`) indicates a field\nthat the user can fill in. Its name, if any, will be the default\ncontent for the field.\n\nWhen the snippet is activated by calling the returned function,\nthe code is inserted at the given position. Newlines in the\ntemplate are indented by the indentation of the start line, plus\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\nthe newline.\n\nOn activation, (all instances of) the first field are selected.\nThe user can move between fields with Tab and Shift-Tab as long as\nthe fields are active. Moving to the last field or moving the\ncursor out of the current field deactivates the fields.\n\nThe order of fields defaults to textual order, but you can add\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\na custom order.\n\nTo include a literal `{` or `}` in your template, put a backslash\nin front of it. This will be removed and the brace will not be\ninterpreted as indicating a placeholder.\n*/\nfunction snippet(template) {\n    let snippet = Snippet.parse(template);\n    return (editor, completion, from, to) => {\n        let { text, ranges } = snippet.instantiate(editor.state, from);\n        let spec = {\n            changes: { from, to, insert: Text.of(text) },\n            scrollIntoView: true,\n            annotations: completion ? pickedCompletion.of(completion) : undefined\n        };\n        if (ranges.length)\n            spec.selection = fieldSelection(ranges, 0);\n        if (ranges.length > 1) {\n            let active = new ActiveSnippet(ranges, 0);\n            let effects = spec.effects = [setActive.of(active)];\n            if (editor.state.field(snippetState, false) === undefined)\n                effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));\n        }\n        editor.dispatch(editor.state.update(spec));\n    };\n}\nfunction moveField(dir) {\n    return ({ state, dispatch }) => {\n        let active = state.field(snippetState, false);\n        if (!active || dir < 0 && active.active == 0)\n            return false;\n        let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\n        dispatch(state.update({\n            selection: fieldSelection(active.ranges, next),\n            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))\n        }));\n        return true;\n    };\n}\n/**\nA command that clears the active snippet, if any.\n*/\nconst clearSnippet = ({ state, dispatch }) => {\n    let active = state.field(snippetState, false);\n    if (!active)\n        return false;\n    dispatch(state.update({ effects: setActive.of(null) }));\n    return true;\n};\n/**\nMove to the next snippet field, if available.\n*/\nconst nextSnippetField = /*@__PURE__*/moveField(1);\n/**\nMove to the previous snippet field, if available.\n*/\nconst prevSnippetField = /*@__PURE__*/moveField(-1);\n/**\nCheck if there is an active snippet with a next field for\n`nextSnippetField` to move to.\n*/\nfunction hasNextSnippetField(state) {\n    let active = state.field(snippetState, false);\n    return !!(active && active.ranges.some(r => r.field == active.active + 1));\n}\n/**\nReturns true if there is an active snippet and a previous field\nfor `prevSnippetField` to move to.\n*/\nfunction hasPrevSnippetField(state) {\n    let active = state.field(snippetState, false);\n    return !!(active && active.active > 0);\n}\nconst defaultSnippetKeymap = [\n    { key: \"Tab\", run: nextSnippetField, shift: prevSnippetField },\n    { key: \"Escape\", run: clearSnippet }\n];\n/**\nA facet that can be used to configure the key bindings used by\nsnippets. The default binds Tab to\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\n*/\nconst snippetKeymap = /*@__PURE__*/Facet.define({\n    combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }\n});\nconst addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\n/**\nCreate a completion from a snippet. Returns an object with the\nproperties from `completion`, plus an `apply` function that\napplies the snippet.\n*/\nfunction snippetCompletion(template, completion) {\n    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });\n}\nconst snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({\n    mousedown(event, view) {\n        let active = view.state.field(snippetState, false), pos;\n        if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)\n            return false;\n        let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\n        if (!match || match.field == active.active)\n            return false;\n        view.dispatch({\n            selection: fieldSelection(active.ranges, match.field),\n            effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)\n        });\n        return true;\n    }\n});\n\nfunction wordRE(wordChars) {\n    let escaped = wordChars.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\n    try {\n        return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\n    }\n    catch (_a) {\n        return new RegExp(`[\\w${escaped}]`, \"g\");\n    }\n}\nfunction mapRE(re, f) {\n    return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\n}\nconst wordCaches = /*@__PURE__*/Object.create(null);\nfunction wordCache(wordChars) {\n    return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap);\n}\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\n    for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\n        let { value } = lines, m;\n        wordRE.lastIndex = 0;\n        while (m = wordRE.exec(value)) {\n            if (!seen[m[0]] && pos + m.index != ignoreAt) {\n                result.push({ type: \"text\", label: m[0] });\n                seen[m[0]] = true;\n                if (result.length >= 2000 /* MaxList */)\n                    return;\n            }\n        }\n        pos += value.length + 1;\n    }\n}\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\n    let big = doc.length >= 1000 /* MinCacheLen */;\n    let cached = big && cache.get(doc);\n    if (cached)\n        return cached;\n    let result = [], seen = Object.create(null);\n    if (doc.children) {\n        let pos = 0;\n        for (let ch of doc.children) {\n            if (ch.length >= 1000 /* MinCacheLen */) {\n                for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\n                    if (!seen[c.label]) {\n                        seen[c.label] = true;\n                        result.push(c);\n                    }\n                }\n            }\n            else {\n                storeWords(ch, wordRE, result, seen, ignoreAt - pos);\n            }\n            pos += ch.length + 1;\n        }\n    }\n    else {\n        storeWords(doc, wordRE, result, seen, ignoreAt);\n    }\n    if (big && result.length < 2000 /* MaxList */)\n        cache.set(doc, result);\n    return result;\n}\n/**\nA completion source that will scan the document for words (using a\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\nreturn those as completions.\n*/\nconst completeAnyWord = context => {\n    let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\n    let re = wordRE(wordChars);\n    let token = context.matchBefore(mapRE(re, s => s + \"$\"));\n    if (!token && !context.explicit)\n        return null;\n    let from = token ? token.from : context.pos;\n    let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* Range */, from);\n    return { from, options, validFor: mapRE(re, s => \"^\" + s) };\n};\n\nconst defaults = {\n    brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n    before: \")]}:;>\",\n    stringPrefixes: []\n};\nconst closeBracketEffect = /*@__PURE__*/StateEffect.define({\n    map(value, mapping) {\n        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);\n        return mapped == null ? undefined : mapped;\n    }\n});\nconst closedBracket = /*@__PURE__*/new class extends RangeValue {\n};\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/StateField.define({\n    create() { return RangeSet.empty; },\n    update(value, tr) {\n        if (tr.selection) {\n            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\n            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\n            if (lineStart != tr.changes.mapPos(prevLineStart, -1))\n                value = RangeSet.empty;\n        }\n        value = value.map(tr.changes);\n        for (let effect of tr.effects)\n            if (effect.is(closeBracketEffect))\n                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });\n        return value;\n    }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\nfunction closeBrackets() {\n    return [inputHandler, bracketState];\n}\nconst definedClosing = \"()[]{}<>\";\nfunction closing(ch) {\n    for (let i = 0; i < definedClosing.length; i += 2)\n        if (definedClosing.charCodeAt(i) == ch)\n            return definedClosing.charAt(i + 1);\n    return fromCodePoint(ch < 128 ? ch : ch + 1);\n}\nfunction config(state, pos) {\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\nconst inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)\n        return false;\n    let sel = view.state.selection.main;\n    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||\n        from != sel.from || to != sel.to)\n        return false;\n    let tr = insertBracket(view.state, insert);\n    if (!tr)\n        return false;\n    view.dispatch(tr);\n    return true;\n});\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\nconst deleteBracketPair = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty) {\n            let before = prevChar(state.doc, range.head);\n            for (let token of tokens) {\n                if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))\n                    return { changes: { from: range.head - token.length, to: range.head + token.length },\n                        range: EditorSelection.cursor(range.head - token.length) };\n            }\n        }\n        return { range: dont = range };\n    });\n    if (!dont)\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete.backward\" }));\n    return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\n*/\nconst closeBracketsKeymap = [\n    { key: \"Backspace\", run: deleteBracketPair }\n];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert brackets—the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\ntake care of running this for user input.)\n*/\nfunction insertBracket(state, bracket) {\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    for (let tok of tokens) {\n        let closed = closing(codePointAt(tok, 0));\n        if (bracket == tok)\n            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)\n                : handleOpen(state, tok, closed, conf.before || defaults.before);\n        if (bracket == closed && closedBracketAt(state, state.selection.main.from))\n            return handleClose(state, tok, closed);\n    }\n    return null;\n}\nfunction closedBracketAt(state, pos) {\n    let found = false;\n    state.field(bracketState).between(0, state.doc.length, from => {\n        if (from == pos)\n            found = true;\n    });\n    return found;\n}\nfunction nextChar(doc, pos) {\n    let next = doc.sliceString(pos, pos + 2);\n    return next.slice(0, codePointSize(codePointAt(next, 0)));\n}\nfunction prevChar(doc, pos) {\n    let prev = doc.sliceString(pos - 2, pos);\n    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction handleOpen(state, open, close, closeBefore) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],\n                effects: closeBracketEffect.of(range.to + open.length),\n                range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };\n        let next = nextChar(state.doc, range.head);\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1)\n            return { changes: { insert: open + close, from: range.head },\n                effects: closeBracketEffect.of(range.head + open.length),\n                range: EditorSelection.cursor(range.head + open.length) };\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction handleClose(state, _open, close) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty && nextChar(state.doc, range.head) == close)\n            return { changes: { from: range.head, to: range.head + close.length, insert: close },\n                range: EditorSelection.cursor(range.head + close.length) };\n        return dont = { range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction handleSame(state, token, allowTriple, config) {\n    let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],\n                effects: closeBracketEffect.of(range.to + token.length),\n                range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };\n        let pos = range.head, next = nextChar(state.doc, pos), start;\n        if (next == token) {\n            if (nodeStart(state, pos)) {\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n            }\n            else if (closedBracketAt(state, pos)) {\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n                let content = isTriple ? token + token + token : token;\n                return { changes: { from: pos, to: pos + content.length, insert: content },\n                    range: EditorSelection.cursor(pos + content.length) };\n            }\n        }\n        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&\n            (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&\n            nodeStart(state, start)) {\n            return { changes: { insert: token + token + token + token, from: pos },\n                effects: closeBracketEffect.of(pos + token.length),\n                range: EditorSelection.cursor(pos + token.length) };\n        }\n        else if (state.charCategorizer(pos)(next) != CharCategory.Word) {\n            if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n        }\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction nodeStart(state, pos) {\n    let tree = syntaxTree(state).resolveInner(pos + 1);\n    return tree.parent && tree.from == pos;\n}\nfunction probablyInString(state, pos, quoteToken, prefixes) {\n    let node = syntaxTree(state).resolveInner(pos, -1);\n    let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);\n    for (let i = 0; i < 5; i++) {\n        let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));\n        let quotePos = start.indexOf(quoteToken);\n        if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {\n            let first = node.firstChild;\n            while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {\n                if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)\n                    return false;\n                first = first.firstChild;\n            }\n            return true;\n        }\n        let parent = node.to == pos && node.parent;\n        if (!parent)\n            break;\n        node = parent;\n    }\n    return false;\n}\nfunction canStartStringAt(state, pos, prefixes) {\n    let charCat = state.charCategorizer(pos);\n    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)\n        return pos;\n    for (let prefix of prefixes) {\n        let start = pos - prefix.length;\n        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)\n            return start;\n    }\n    return -1;\n}\n\n/**\nReturns an extension that enables autocompletion.\n*/\nfunction autocompletion(config = {}) {\n    return [\n        completionState,\n        completionConfig.of(config),\n        completionPlugin,\n        completionKeymapExt,\n        baseTheme\n    ];\n}\n/**\nBasic keybindings for autocompletion.\n\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\n*/\nconst completionKeymap = [\n    { key: \"Ctrl-Space\", run: startCompletion },\n    { key: \"Escape\", run: closeCompletion },\n    { key: \"ArrowDown\", run: /*@__PURE__*/moveCompletionSelection(true) },\n    { key: \"ArrowUp\", run: /*@__PURE__*/moveCompletionSelection(false) },\n    { key: \"PageDown\", run: /*@__PURE__*/moveCompletionSelection(true, \"page\") },\n    { key: \"PageUp\", run: /*@__PURE__*/moveCompletionSelection(false, \"page\") },\n    { key: \"Enter\", run: acceptCompletion }\n];\nconst completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));\n/**\nGet the current completion status. When completions are available,\nthis will return `\"active\"`. When completions are pending (in the\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\nreturns `null`.\n*/\nfunction completionStatus(state) {\n    let cState = state.field(completionState, false);\n    return cState && cState.active.some(a => a.state == 1 /* Pending */) ? \"pending\"\n        : cState && cState.active.some(a => a.state != 0 /* Inactive */) ? \"active\" : null;\n}\nconst completionArrayCache = /*@__PURE__*/new WeakMap;\n/**\nReturns the available completions as an array.\n*/\nfunction currentCompletions(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    if (!open || open.disabled)\n        return [];\n    let completions = completionArrayCache.get(open.options);\n    if (!completions)\n        completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\n    return completions;\n}\n/**\nReturn the currently selected completion, if any.\n*/\nfunction selectedCompletion(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;\n}\n/**\nReturns the currently selected position in the active completion\nlist, or null if no completions are active.\n*/\nfunction selectedCompletionIndex(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.selected : null;\n}\n/**\nCreate an effect that can be attached to a transaction to change\nthe currently selected completion.\n*/\nfunction setSelectedCompletion(index) {\n    return setSelectedEffect.of(index);\n}\n\nexport { CompletionContext, acceptCompletion, autocompletion, clearSnippet, closeBrackets, closeBracketsKeymap, closeCompletion, completeAnyWord, completeFromList, completionKeymap, completionStatus, currentCompletions, deleteBracketPair, hasNextSnippetField, hasPrevSnippetField, ifIn, ifNotIn, insertBracket, insertCompletionText, moveCompletionSelection, nextSnippetField, pickedCompletion, prevSnippetField, selectedCompletion, selectedCompletionIndex, setSelectedCompletion, snippet, snippetCompletion, snippetKeymap, startCompletion };\n","import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// Try to scan through the automaton to find some kind of reduction\n    /// that can be applied. Used when the regular ForcedReduce field\n    /// isn't a valid action. @internal\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n    // The maximum number of non-recovering stacks to explore (to avoid\n    // getting bogged down with exponentially multiplying stacks in\n    // ambiguous content)\n    Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /// @internal\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"names":["CompletionContext","constructor","state","pos","explicit","this","abortListeners","tokenBefore","types","token","syntaxTree","resolveInner","indexOf","name","parent","from","to","text","sliceDoc","type","matchBefore","expr","line","doc","lineAt","start","Math","max","str","slice","found","search","_a","source","addStart","addEnd","length","RegExp","flags","ignoreCase","ensureAnchor","aborted","addEventListener","listener","push","toSet","chars","flat","Object","keys","join","words","test","replace","completeFromList","list","options","map","o","label","validFor","match","every","first","create","rest","i","prefixMatch","context","ifNotIn","nodes","isTop","pickedCompletion","define","baseTheme","fontFamily","whiteSpace","overflow","maxWidth_fallback","maxWidth","minWidth","maxHeight","height","listStyle","margin","padding","lineHeight","overflowX","textOverflow","cursor","display","borderBottom","paddingLeft","opacity","background","color","content","textAlign","position","width","boxSizing","right","left","backgroundColor","verticalAlign","borderLeft","textDecoration","marginLeft","fontStyle","fontSize","paddingRight","FieldPos","field","FieldRange","changes","mapPos","TrackDel","Snippet","lines","fieldPositions","instantiate","lineStart","lineObj","baseIndent","exec","indent","tabs","facet","indentUnit","ranges","parse","template","m","fields","positions","split","seq","splice","index","esc","fieldMarker","widget","toDOM","span","document","createElement","className","ignoreEvent","fieldRange","mark","class","ActiveSnippet","active","deco","set","r","range","mapped","selectionInsideField","sel","some","setActive","value","moveToField","snippetState","update","tr","effect","effects","is","docChanged","selection","provide","f","decorations","val","none","fieldSelection","filter","snippet","editor","completion","spec","insert","of","scrollIntoView","annotations","undefined","appendConfig","addSnippetKeymap","snippetPointerHandler","dispatch","moveField","dir","next","last","defaultSnippetKeymap","key","run","shift","snippetKeymap","combine","maps","highest","compute","snippetCompletion","assign","apply","domEventHandlers","mousedown","event","view","posAtCoords","x","clientX","y","clientY","find","defaults","brackets","before","stringPrefixes","closeBracketEffect","mapping","TrackAfter","closedBracket","startSide","endSide","bracketState","empty","main","head","prevLineStart","startState","add","closeBrackets","inputHandler","definedClosing","closing","ch","charCodeAt","charAt","android","navigator","userAgent","composing","compositionStarted","readOnly","bracket","conf","languageDataAt","config","tokens","tok","closed","handleSame","handleOpen","closedBracketAt","handleClose","insertBracket","between","nextChar","sliceString","open","close","closeBefore","dont","changeByRange","anchor","userEvent","_open","allowTriple","nodeStart","canStartStringAt","charCategorizer","Word","quoteToken","prefixes","node","maxPrefix","reduce","p","min","quotePos","firstChild","probablyInString","tree","charCat","prefix","Recover","Stack","stack","reducePos","score","buffer","bufferBase","curContext","lookAhead","toString","_","concat","cx","parser","StackContext","pushState","action","depth","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","size","nodeSet","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","nextEnd","nextState","maxNode","shiftContext","useNode","reused","updateContext","tracker","reuse","stream","reset","off","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","v","result","forceReduce","validAction","target","backup","findForcedReduction","seen","explore","includes","allActions","rDepth","forceAll","deadEnd","data","restart","sameState","other","dialectEnabled","dialectID","dialect","emitContext","hash","emitLookAhead","newCx","setLookAhead","strict","goto","StackBufferCursor","maybeNext","id","fork","decodeArray","input","Type","Uint16Array","array","out","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","rangeIndex","chunkPos","readNext","resolveOffset","offset","assoc","clipPos","peek","idx","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","n","setDone","read","TokenGroup","readToken","tokenPrecTable","prototype","contextual","fallback","extend","LocalTokenGroup","precTable","elseToken","skipped","atEof","nextPos","ExternalTokenizer","group","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","findOffset","prev","tableData","tableOffset","iPrev","verbose","process","env","LOG","stackIDs","Safety","Rec","cutAt","side","IncludeAnonymous","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","prop","TokenCache","mainToken","actions","tokenizers","getActions","actionIndex","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","stopped","stoppedTokens","newStacks","advanceStack","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","stopAt","stackID","strictCx","cxHash","cached","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","force","forceBase","build","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","disabled","ContextTracker","LRParser","super","wrappers","version","nodeNames","repeatNodeCount","topTerms","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","props","error","skippedNodes","propSources","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","w","loose","table","groupTag","terminal","slot","flag","deflt","configure","copy","info","t","external","contextTracker","wrap","hasWrappers","topNode","prec","values","part","Uint8Array","cachedSetTimeout","cachedClearTimeout","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","marker","runClearTimeout","Item","noop","nextTick","args","Array","arguments","title","browser","argv","versions","on","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask"],"sourceRoot":""}