{"version":3,"file":"5099.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/announcements.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/notificationplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/palette.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/settingconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/settingsplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/statusbarplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/themesplugins.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/toolbarregistryplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/workspacesplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/shortcuts.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/react-dom/client.js"],"sourcesContent":["/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { Notification } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ConfigSection, ServerConnection } from '@jupyterlab/services';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nconst COMMAND_HELP_OPEN = 'help:open';\nconst NEWS_API_URL = '/lab/api/news';\nconst UPDATE_API_URL = '/lab/api/update';\nconst PRIVACY_URL = 'https://jupyterlab.readthedocs.io/en/stable/privacy_policies.html';\n/**\n * Call the announcement API\n *\n * @param endpoint Endpoint to request\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nasync function requestAPI(endpoint, init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, endpoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\nexport const announcements = {\n    id: '@jupyterlab/apputils-extension:announcements',\n    description: 'Add the announcement feature. It will fetch news on the internet and check for application updates.',\n    autoStart: true,\n    optional: [ISettingRegistry, ITranslator],\n    activate: (app, settingRegistry, translator) => {\n        var _a;\n        const CONFIG_SECTION_NAME = announcements.id.replace(/[^\\w]/g, '');\n        void Promise.all([\n            app.restored,\n            (_a = settingRegistry === null || settingRegistry === void 0 ? void 0 : settingRegistry.load('@jupyterlab/apputils-extension:notification')) !== null && _a !== void 0 ? _a : Promise.resolve(null),\n            // Use config instead of state to store independently of the workspace\n            // if a news has been displayed or not.\n            ConfigSection.create({\n                name: CONFIG_SECTION_NAME\n            })\n        ]).then(async ([_, settings, config]) => {\n            const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n            // Store dismiss state\n            Notification.manager.changed.connect((manager, change) => {\n                var _a;\n                if (change.type !== 'removed') {\n                    return;\n                }\n                const { id, tags } = ((_a = change\n                    .notification.options.data) !== null && _a !== void 0 ? _a : {});\n                if ((tags !== null && tags !== void 0 ? tags : []).some(tag => ['news', 'update'].includes(tag)) && id) {\n                    const update = {};\n                    update[id] = { seen: true, dismissed: true };\n                    config.update(update).catch(reason => {\n                        console.error(`Failed to update the announcements config:\\n${reason}`);\n                    });\n                }\n            });\n            const mustFetchNews = settings === null || settings === void 0 ? void 0 : settings.get('fetchNews').composite;\n            if (mustFetchNews === 'none') {\n                const notificationId = Notification.emit(trans.__('Would you like to receive official Jupyter news?\\nPlease read the privacy policy.'), 'default', {\n                    autoClose: false,\n                    actions: [\n                        {\n                            label: trans.__('Open privacy policy'),\n                            caption: PRIVACY_URL,\n                            callback: event => {\n                                event.preventDefault();\n                                if (app.commands.hasCommand(COMMAND_HELP_OPEN)) {\n                                    void app.commands.execute(COMMAND_HELP_OPEN, {\n                                        text: trans.__('Privacy policies'),\n                                        url: PRIVACY_URL\n                                    });\n                                }\n                                else {\n                                    window.open(PRIVACY_URL, '_blank', 'noreferrer');\n                                }\n                            },\n                            displayType: 'link'\n                        },\n                        {\n                            label: trans.__('Yes'),\n                            callback: () => {\n                                Notification.dismiss(notificationId);\n                                config\n                                    .update({})\n                                    .then(() => fetchNews())\n                                    .catch(reason => {\n                                    console.error(`Failed to get the news:\\n${reason}`);\n                                });\n                                settings === null || settings === void 0 ? void 0 : settings.set('fetchNews', 'true').catch((reason) => {\n                                    console.error(`Failed to save setting 'fetchNews':\\n${reason}`);\n                                });\n                            }\n                        },\n                        {\n                            label: trans.__('No'),\n                            callback: () => {\n                                Notification.dismiss(notificationId);\n                                settings === null || settings === void 0 ? void 0 : settings.set('fetchNews', 'false').catch((reason) => {\n                                    console.error(`Failed to save setting 'fetchNews':\\n${reason}`);\n                                });\n                            }\n                        }\n                    ]\n                });\n            }\n            else {\n                await fetchNews();\n            }\n            async function fetchNews() {\n                var _a, _b, _c, _d;\n                if (((_a = settings === null || settings === void 0 ? void 0 : settings.get('fetchNews').composite) !== null && _a !== void 0 ? _a : 'false') === 'true') {\n                    try {\n                        const response = await requestAPI(NEWS_API_URL);\n                        for (const { link, message, type, options } of response.news) {\n                            // @ts-expect-error data has no index\n                            const id = options.data['id'];\n                            // Filter those notifications\n                            const state = (_b = config.data[id]) !== null && _b !== void 0 ? _b : {\n                                seen: false,\n                                dismissed: false\n                            };\n                            if (!state.dismissed) {\n                                options.actions = [\n                                    {\n                                        label: trans.__('Hide'),\n                                        caption: trans.__('Never show this notification again.'),\n                                        callback: () => {\n                                            const update = {};\n                                            update[id] = { seen: true, dismissed: true };\n                                            config.update(update).catch(reason => {\n                                                console.error(`Failed to update the announcements config:\\n${reason}`);\n                                            });\n                                        }\n                                    }\n                                ];\n                                if ((link === null || link === void 0 ? void 0 : link.length) === 2) {\n                                    options.actions.push({\n                                        label: link[0],\n                                        caption: link[1],\n                                        callback: () => {\n                                            window.open(link[1], '_blank', 'noreferrer');\n                                        },\n                                        displayType: 'link'\n                                    });\n                                }\n                                if (!state.seen) {\n                                    options.autoClose = 5000;\n                                    const update = {};\n                                    update[id] = { seen: true };\n                                    config.update(update).catch(reason => {\n                                        console.error(`Failed to update the announcements config:\\n${reason}`);\n                                    });\n                                }\n                                Notification.emit(message, type, options);\n                            }\n                        }\n                    }\n                    catch (reason) {\n                        console.log('Failed to get the announcements.', reason);\n                    }\n                }\n                if ((_c = settings === null || settings === void 0 ? void 0 : settings.get('checkForUpdates').composite) !== null && _c !== void 0 ? _c : true) {\n                    const response = await requestAPI(UPDATE_API_URL);\n                    if (response.notification) {\n                        const { link, message, type, options } = response.notification;\n                        // @ts-expect-error data has no index\n                        const id = options.data['id'];\n                        const state = (_d = config.data[id]) !== null && _d !== void 0 ? _d : {\n                            seen: false,\n                            dismissed: false\n                        };\n                        if (!state.dismissed) {\n                            let notificationId;\n                            options.actions = [\n                                {\n                                    label: trans.__('Do not check for updates'),\n                                    caption: trans.__('If pressed, you will not be prompted if a new JupyterLab version is found.'),\n                                    callback: () => {\n                                        settings === null || settings === void 0 ? void 0 : settings.set('checkForUpdates', false).then(() => {\n                                            Notification.dismiss(notificationId);\n                                        }).catch((reason) => {\n                                            console.error('Failed to set the `checkForUpdates` setting.', reason);\n                                        });\n                                    }\n                                }\n                            ];\n                            if ((link === null || link === void 0 ? void 0 : link.length) === 2) {\n                                options.actions.push({\n                                    label: link[0],\n                                    caption: link[1],\n                                    callback: () => {\n                                        window.open(link[1], '_blank', 'noreferrer');\n                                    },\n                                    displayType: 'link'\n                                });\n                            }\n                            if (!state.seen) {\n                                options.autoClose = 5000;\n                                const update = {};\n                                update[id] = { seen: true };\n                                config.update(update).catch(reason => {\n                                    console.error(`Failed to update the announcements config:\\n${reason}`);\n                                });\n                            }\n                            notificationId = Notification.emit(message, type, options);\n                        }\n                    }\n                }\n            }\n        });\n    }\n};\n//# sourceMappingURL=announcements.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { Notification, ReactWidget } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { GroupItem, IStatusBar, showPopup, TextItem } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { bellIcon, Button, closeIcon, deleteIcon, ToolbarButtonComponent, UseSignal, VDomModel } from '@jupyterlab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport * as React from 'react';\nimport { createRoot } from 'react-dom/client';\n/**\n * Toast close button class\n */\nconst TOAST_CLOSE_BUTTON_CLASS = 'jp-Notification-Toast-Close';\n/**\n * Toast close button class right margin required due to custom hover effect\n */\nconst TOAST_CLOSE_BUTTON_MARGIN_CLASS = 'jp-Notification-Toast-Close-Margin';\n/**\n * Maximal number of characters displayed in a notification.\n */\nconst MAX_MESSAGE_LENGTH = 140;\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Dismiss a notification\n     */\n    CommandIDs.dismiss = 'apputils:dismiss-notification';\n    /**\n     * Display all notifications\n     */\n    CommandIDs.display = 'apputils:display-notifications';\n    /**\n     * Create a notification\n     */\n    CommandIDs.notify = 'apputils:notify';\n    /**\n     * Update a notification\n     */\n    CommandIDs.update = 'apputils:update-notification';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Half spacing between subitems in a status item.\n */\nconst HALF_SPACING = 4;\n/**\n * Notification center view\n */\nfunction NotificationCenter(props) {\n    const { manager, onClose, trans } = props;\n    // Markdown parsed notifications\n    const [notifications, setNotifications] = React.useState([]);\n    // Load asynchronously react-toastify icons\n    const [icons, setIcons] = React.useState(null);\n    React.useEffect(() => {\n        async function onChanged() {\n            setNotifications(await Promise.all(manager.notifications.map(async (n) => {\n                return Object.freeze({\n                    ...n\n                });\n            })));\n        }\n        if (notifications.length !== manager.count) {\n            void onChanged();\n        }\n        manager.changed.connect(onChanged);\n        return () => {\n            manager.changed.disconnect(onChanged);\n        };\n    }, [manager]);\n    React.useEffect(() => {\n        Private.getIcons()\n            .then(toastifyIcons => {\n            setIcons(toastifyIcons);\n        })\n            .catch(r => {\n            console.error(`Failed to get react-toastify icons:\\n${r}`);\n        });\n    }, []);\n    return (React.createElement(UseSignal, { signal: manager.changed }, () => (React.createElement(React.Fragment, null,\n        React.createElement(\"h2\", { className: \"jp-Notification-Header jp-Toolbar\" },\n            React.createElement(\"span\", { className: \"jp-Toolbar-item\" }, manager.count > 0\n                ? trans._n('%1 notification', '%1 notifications', manager.count)\n                : trans.__('No notifications')),\n            React.createElement(\"span\", { className: \"jp-Toolbar-item jp-Toolbar-spacer\" }),\n            React.createElement(ToolbarButtonComponent, { actualOnClick: true, onClick: () => {\n                    manager.dismiss();\n                }, icon: deleteIcon, tooltip: trans.__('Dismiss all notifications'), enabled: manager.count > 0 }),\n            React.createElement(ToolbarButtonComponent, { actualOnClick: true, onClick: onClose, icon: closeIcon, tooltip: trans.__('Hide notifications') })),\n        React.createElement(\"ol\", { className: \"jp-Notification-List\" }, notifications.map(notification => {\n            var _a;\n            const { id, message, type, options } = notification;\n            const toastType = type === 'in-progress' ? 'default' : type;\n            const closeNotification = () => {\n                manager.dismiss(id);\n            };\n            const icon = type === 'default'\n                ? null\n                : type === 'in-progress'\n                    ? (_a = icons === null || icons === void 0 ? void 0 : icons.spinner) !== null && _a !== void 0 ? _a : null\n                    : icons && icons[type];\n            return (React.createElement(\"li\", { className: \"jp-Notification-List-Item\", key: notification.id, onClick: event => {\n                    // Stop propagation to avoid closing the popup on click\n                    event.stopPropagation();\n                } },\n                React.createElement(\"div\", { className: `Toastify__toast Toastify__toast-theme--light Toastify__toast--${toastType} jp-Notification-Toast-${toastType}` },\n                    React.createElement(\"div\", { className: \"Toastify__toast-body\" },\n                        icon && (React.createElement(\"div\", { className: \"Toastify__toast-icon\" }, icon({ theme: 'light', type: toastType }))),\n                        React.createElement(\"div\", null, Private.createContent(message, closeNotification, options.actions))),\n                    React.createElement(Private.CloseButton, { close: closeNotification, closeIcon: deleteIcon.react, title: trans.__('Dismiss notification'), closeIconMargin: true }))));\n        }))))));\n}\n/**\n * Status widget model\n */\nclass NotificationStatusModel extends VDomModel {\n    constructor(manager) {\n        super();\n        this.manager = manager;\n        this._highlight = false;\n        this._listOpened = false;\n        this._doNotDisturbMode = false;\n        this._count = manager.count;\n        this.manager.changed.connect(this.onNotificationChanged, this);\n    }\n    /**\n     * Number of notifications.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Whether to silence all notifications or not.\n     */\n    get doNotDisturbMode() {\n        return this._doNotDisturbMode;\n    }\n    set doNotDisturbMode(v) {\n        this._doNotDisturbMode = v;\n    }\n    /**\n     * Whether to highlight the status widget or not.\n     */\n    get highlight() {\n        return this._highlight;\n    }\n    /**\n     * Whether the popup is opened or not.\n     */\n    get listOpened() {\n        return this._listOpened;\n    }\n    set listOpened(v) {\n        this._listOpened = v;\n        if (this._listOpened || this._highlight) {\n            this._highlight = false;\n        }\n        this.stateChanged.emit();\n    }\n    onNotificationChanged(_, change) {\n        // Set private attribute to trigger only once the signal emission\n        this._count = this.manager.count;\n        const { autoClose } = change.notification.options;\n        const noToast = this.doNotDisturbMode ||\n            (typeof autoClose === 'number' && autoClose <= 0);\n        // Highlight if\n        //   the list is not opened (the style change if list is opened due to clickedItem style in statusbar.)\n        //   the change type is not removed\n        //   the notification will be hidden\n        if (!this._listOpened && change.type !== 'removed' && noToast) {\n            this._highlight = true;\n        }\n        this.stateChanged.emit();\n    }\n}\n/**\n * Status view\n */\nfunction NotificationStatus(props) {\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING, onClick: () => {\n            props.onClick();\n        }, title: props.count > 0\n            ? props.trans._n('%1 notification', '%1 notifications', props.count)\n            : props.trans.__('No notifications') },\n        React.createElement(TextItem, { className: \"jp-Notification-Status-Text\", source: `${props.count}` }),\n        React.createElement(bellIcon.react, { top: '2px', stylesheet: 'statusBar' })));\n}\n/**\n * Add notification center and toast\n */\nexport const notificationPlugin = {\n    id: '@jupyterlab/apputils-extension:notification',\n    description: 'Add the notification center and its status indicator.',\n    autoStart: true,\n    optional: [IStatusBar, ISettingRegistry, ITranslator],\n    activate: (app, statusBar, settingRegistry, translator) => {\n        Private.translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = Private.translator.load('jupyterlab');\n        const model = new NotificationStatusModel(Notification.manager);\n        model.doNotDisturbMode = false;\n        if (settingRegistry) {\n            void Promise.all([\n                settingRegistry.load(notificationPlugin.id),\n                app.restored\n            ]).then(([plugin]) => {\n                const updateSettings = () => {\n                    model.doNotDisturbMode = plugin.get('doNotDisturbMode')\n                        .composite;\n                };\n                updateSettings();\n                plugin.changed.connect(updateSettings);\n            });\n        }\n        app.commands.addCommand(CommandIDs.notify, {\n            label: trans.__('Emit a notification'),\n            caption: trans.__('Notification is described by {message: string, type?: string, options?: {autoClose?: number | false, actions: {label: string, commandId: string, args?: ReadOnlyJSONObject, caption?: string, className?: string}[], data?: ReadOnlyJSONValue}}.'),\n            execute: args => {\n                var _a;\n                const { message, type } = args;\n                const options = (_a = args.options) !== null && _a !== void 0 ? _a : {};\n                return Notification.manager.notify(message, type !== null && type !== void 0 ? type : 'default', {\n                    ...options,\n                    actions: options.actions\n                        ? options.actions.map((action) => {\n                            return {\n                                ...action,\n                                callback: () => {\n                                    app.commands\n                                        .execute(action.commandId, action.args)\n                                        .catch(r => {\n                                        console.error(`Failed to executed '${action.commandId}':\\n${r}`);\n                                    });\n                                }\n                            };\n                        })\n                        : null\n                });\n            }\n        });\n        app.commands.addCommand(CommandIDs.update, {\n            label: trans.__('Update a notification'),\n            caption: trans.__('Notification is described by {id: string, message: string, type?: string, options?: {autoClose?: number | false, actions: {label: string, commandId: string, args?: ReadOnlyJSONObject, caption?: string, className?: string}[], data?: ReadOnlyJSONValue}}.'),\n            execute: args => {\n                const { id, message, type, ...options } = args;\n                return Notification.manager.update({\n                    id,\n                    message,\n                    type: type !== null && type !== void 0 ? type : 'default',\n                    ...options,\n                    actions: options.actions\n                        ? options.actions.map((action) => {\n                            return {\n                                ...action,\n                                callback: () => {\n                                    app.commands\n                                        .execute(action.commandId, action.args)\n                                        .catch(r => {\n                                        console.error(`Failed to executed '${action.commandId}':\\n${r}`);\n                                    });\n                                }\n                            };\n                        })\n                        : null\n                });\n            }\n        });\n        app.commands.addCommand(CommandIDs.dismiss, {\n            label: trans.__('Dismiss a notification'),\n            execute: args => {\n                const { id } = args;\n                Notification.manager.dismiss(id);\n            }\n        });\n        let popup = null;\n        model.listOpened = false;\n        const notificationList = ReactWidget.create(React.createElement(NotificationCenter, { manager: Notification.manager, onClose: () => {\n                popup === null || popup === void 0 ? void 0 : popup.dispose();\n            }, trans: trans }));\n        notificationList.addClass('jp-Notification-Center');\n        async function onNotification(manager, change) {\n            var _a;\n            if (model.doNotDisturbMode || (popup !== null && !popup.isDisposed)) {\n                return;\n            }\n            const { message, type, options, id } = change.notification;\n            if (typeof options.autoClose === 'number' && options.autoClose <= 0) {\n                // If the notification is silent, bail early.\n                return;\n            }\n            switch (change.type) {\n                case 'added':\n                    await Private.createToast(id, message, type, options);\n                    break;\n                case 'updated':\n                    {\n                        const toast = await Private.toast();\n                        const actions = options.actions;\n                        const autoClose = (_a = options.autoClose) !== null && _a !== void 0 ? _a : (actions && actions.length > 0 ? false : null);\n                        if (toast.isActive(id)) {\n                            // Update existing toast\n                            const closeToast = () => {\n                                // Dismiss the displayed toast\n                                toast.dismiss(id);\n                                // Dismiss the notification from the queue\n                                manager.dismiss(id);\n                            };\n                            toast.update(id, {\n                                type: type === 'in-progress' ? null : type,\n                                isLoading: type === 'in-progress',\n                                autoClose: autoClose,\n                                render: Private.createContent(message, closeToast, options.actions)\n                            });\n                        }\n                        else {\n                            // Needs to recreate a closed toast\n                            await Private.createToast(id, message, type, options);\n                        }\n                    }\n                    break;\n                case 'removed':\n                    await Private.toast().then(t => {\n                        t.dismiss(id);\n                    });\n                    break;\n            }\n        }\n        Notification.manager.changed.connect(onNotification);\n        const displayNotifications = () => {\n            if (popup) {\n                popup.dispose();\n                popup = null;\n            }\n            else {\n                popup = showPopup({\n                    body: notificationList,\n                    anchor: notificationStatus,\n                    align: 'right',\n                    hasDynamicSize: true,\n                    startHidden: true\n                });\n                // Dismiss all toasts when opening the notification center\n                Private.toast()\n                    .then(t => {\n                    t.dismiss();\n                })\n                    .catch(r => {\n                    console.error(`Failed to dismiss all toasts:\\n${r}`);\n                })\n                    .finally(() => {\n                    popup === null || popup === void 0 ? void 0 : popup.launch();\n                    // Focus on the pop-up\n                    notificationList.node.focus();\n                    popup === null || popup === void 0 ? void 0 : popup.disposed.connect(() => {\n                        model.listOpened = false;\n                        popup = null;\n                    });\n                });\n            }\n            model.listOpened = popup !== null;\n        };\n        app.commands.addCommand(CommandIDs.display, {\n            label: trans.__('Show Notifications'),\n            execute: displayNotifications\n        });\n        const notificationStatus = ReactWidget.create(React.createElement(UseSignal, { signal: model.stateChanged }, () => {\n            if (model.highlight || (popup && !popup.isDisposed)) {\n                notificationStatus.addClass('jp-mod-selected');\n            }\n            else {\n                notificationStatus.removeClass('jp-mod-selected');\n            }\n            return (React.createElement(NotificationStatus, { count: model.count, highlight: model.highlight, trans: trans, onClick: displayNotifications }));\n        }));\n        notificationStatus.addClass('jp-Notification-Status');\n        if (statusBar) {\n            statusBar.registerStatusItem(notificationPlugin.id, {\n                item: notificationStatus,\n                align: 'right',\n                rank: -1\n            });\n        }\n    }\n};\nvar Private;\n(function (Private) {\n    /**\n     * Translator object for private namespace\n     */\n    Private.translator = nullTranslator;\n    /**\n     * Pointer to asynchronously loaded react-toastify\n     */\n    let toastify = null;\n    function CloseButton(props) {\n        var _a;\n        return (React.createElement(\"button\", { className: `jp-Button jp-mod-minimal ${TOAST_CLOSE_BUTTON_CLASS}${props.closeIconMargin ? ` ${TOAST_CLOSE_BUTTON_MARGIN_CLASS}` : ''}`, title: (_a = props.title) !== null && _a !== void 0 ? _a : '', onClick: props.close },\n            React.createElement(props.closeIcon, { className: \"jp-icon-hover\", tag: \"span\" })));\n    }\n    Private.CloseButton = CloseButton;\n    function ToastifyCloseButton(props) {\n        const trans = Private.translator.load('jupyterlab');\n        return (React.createElement(CloseButton, { close: props.closeToast, closeIcon: closeIcon.react, title: trans.__('Hide notification') }));\n    }\n    let waitForToastify = null;\n    /**\n     * Asynchronously load the toast container\n     *\n     * @returns The toast object\n     */\n    async function toast() {\n        if (waitForToastify === null) {\n            waitForToastify = new PromiseDelegate();\n        }\n        else {\n            await waitForToastify.promise;\n        }\n        if (toastify === null) {\n            toastify = await import('react-toastify');\n            const container = document.body.appendChild(document.createElement('div'));\n            container.id = 'react-toastify-container';\n            const root = createRoot(container);\n            root.render(React.createElement(toastify.ToastContainer, { draggable: false, closeOnClick: false, hideProgressBar: true, newestOnTop: true, pauseOnFocusLoss: true, pauseOnHover: true, position: \"bottom-right\", className: \"jp-toastContainer\", transition: toastify.Slide, closeButton: ToastifyCloseButton }));\n            waitForToastify.resolve();\n        }\n        return toastify.toast;\n    }\n    Private.toast = toast;\n    /**\n     * react-toastify icons loader\n     */\n    async function getIcons() {\n        if (toastify === null) {\n            await toast();\n        }\n        return toastify.Icons;\n    }\n    Private.getIcons = getIcons;\n    const displayType2Class = {\n        accent: 'jp-mod-accept',\n        link: 'jp-mod-link',\n        warn: 'jp-mod-warn',\n        default: ''\n    };\n    /**\n     * Create a button with customized callback in a toast\n     */\n    function ToastButton({ action, closeToast }) {\n        var _a, _b;\n        const clickHandler = (event) => {\n            action.callback(event);\n            if (!event.defaultPrevented) {\n                closeToast();\n            }\n        };\n        const classes = [\n            'jp-toast-button',\n            displayType2Class[(_a = action.displayType) !== null && _a !== void 0 ? _a : 'default']\n        ].join(' ');\n        return (React.createElement(Button, { title: (_b = action.caption) !== null && _b !== void 0 ? _b : action.label, className: classes, onClick: clickHandler, small: true }, action.label));\n    }\n    /**\n     * Helper function to construct the notification content\n     *\n     * @param message Message to print in the notification\n     * @param closeHandler Function closing the notification\n     * @param actions Toast actions\n     */\n    function createContent(message, closeHandler, actions) {\n        var _a;\n        const shortenMessage = message.length > MAX_MESSAGE_LENGTH\n            ? message.slice(0, MAX_MESSAGE_LENGTH) + '…'\n            : message;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"jp-toast-message\" }, shortenMessage.split('\\n').map((part, index) => (React.createElement(React.Fragment, { key: `part-${index}` },\n                index > 0 ? React.createElement(\"br\", null) : null,\n                part)))),\n            ((_a = actions === null || actions === void 0 ? void 0 : actions.length) !== null && _a !== void 0 ? _a : 0) > 0 && (React.createElement(\"div\", { className: \"jp-toast-buttonBar\" },\n                React.createElement(\"div\", { className: \"jp-toast-spacer\" }),\n                actions.map((action, idx) => {\n                    return (React.createElement(ToastButton, { key: 'button-' + idx, action: action, closeToast: closeHandler }));\n                })))));\n    }\n    Private.createContent = createContent;\n    /**\n     * Create a toast notification\n     *\n     * @param toastId Toast unique id\n     * @param message Toast message\n     * @param type Toast type\n     * @param options Toast options\n     * @returns Toast id\n     */\n    async function createToast(toastId, message, type, options = {}) {\n        const { actions, autoClose, data } = options;\n        const t = await toast();\n        const toastOptions = {\n            autoClose: autoClose !== null && autoClose !== void 0 ? autoClose : (actions && actions.length > 0 ? false : undefined),\n            data: data,\n            className: `jp-Notification-Toast-${type}`,\n            toastId,\n            type: type === 'in-progress' ? null : type,\n            isLoading: type === 'in-progress'\n        };\n        return t(({ closeToast }) => createContent(message, () => {\n            if (closeToast)\n                closeToast();\n            Notification.manager.dismiss(toastId);\n        }, actions), toastOptions);\n    }\n    Private.createToast = createToast;\n})(Private || (Private = {}));\n//# sourceMappingURL=notificationplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ModalCommandPalette } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { CommandPaletteSvg, paletteIcon } from '@jupyterlab/ui-components';\nimport { find } from '@lumino/algorithm';\nimport { CommandRegistry } from '@lumino/commands';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { CommandPalette } from '@lumino/widgets';\n/**\n * The command IDs used by the apputils extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activate = 'apputils:activate-command-palette';\n})(CommandIDs || (CommandIDs = {}));\nconst PALETTE_PLUGIN_ID = '@jupyterlab/apputils-extension:palette';\n/**\n * A thin wrapper around the `CommandPalette` class to conform with the\n * JupyterLab interface for the application-wide command palette.\n */\nexport class Palette {\n    /**\n     * Create a palette instance.\n     */\n    constructor(palette, translator) {\n        this.translator = translator || nullTranslator;\n        const trans = this.translator.load('jupyterlab');\n        this._palette = palette;\n        this._palette.title.label = '';\n        this._palette.title.caption = trans.__('Command Palette');\n    }\n    /**\n     * The placeholder text of the command palette's search input.\n     */\n    set placeholder(placeholder) {\n        this._palette.inputNode.placeholder = placeholder;\n    }\n    get placeholder() {\n        return this._palette.inputNode.placeholder;\n    }\n    /**\n     * Activate the command palette for user input.\n     */\n    activate() {\n        this._palette.activate();\n    }\n    /**\n     * Add a command item to the command palette.\n     *\n     * @param options - The options for creating the command item.\n     *\n     * @returns A disposable that will remove the item from the palette.\n     */\n    addItem(options) {\n        const item = this._palette.addItem(options);\n        return new DisposableDelegate(() => {\n            this._palette.removeItem(item);\n        });\n    }\n}\n/**\n * A namespace for `Palette` statics.\n */\n(function (Palette) {\n    /**\n     * Activate the command palette.\n     */\n    function activate(app, translator, settingRegistry) {\n        const { commands, shell } = app;\n        const trans = translator.load('jupyterlab');\n        const palette = Private.createPalette(app, translator);\n        const modalPalette = new ModalCommandPalette({ commandPalette: palette });\n        let modal = false;\n        palette.node.setAttribute('role', 'region');\n        palette.node.setAttribute('aria-label', trans.__('Command Palette Section'));\n        shell.add(palette, 'left', { rank: 300, type: 'Command Palette' });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(PALETTE_PLUGIN_ID);\n            const updateSettings = (settings) => {\n                const newModal = settings.get('modal').composite;\n                if (modal && !newModal) {\n                    palette.parent = null;\n                    modalPalette.detach();\n                    shell.add(palette, 'left', { rank: 300, type: 'Command Palette' });\n                }\n                else if (!modal && newModal) {\n                    palette.parent = null;\n                    modalPalette.palette = palette;\n                    palette.show();\n                    modalPalette.attach();\n                }\n                modal = newModal;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(settings => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        // Show the current palette shortcut in its title.\n        const updatePaletteTitle = () => {\n            const binding = find(app.commands.keyBindings, b => b.command === CommandIDs.activate);\n            if (binding) {\n                const ks = binding.keys.map(CommandRegistry.formatKeystroke).join(', ');\n                palette.title.caption = trans.__('Commands (%1)', ks);\n            }\n            else {\n                palette.title.caption = trans.__('Commands');\n            }\n        };\n        updatePaletteTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updatePaletteTitle();\n        });\n        commands.addCommand(CommandIDs.activate, {\n            execute: () => {\n                if (modal) {\n                    modalPalette.activate();\n                }\n                else {\n                    shell.activateById(palette.id);\n                }\n            },\n            label: trans.__('Activate Command Palette')\n        });\n        palette.inputNode.placeholder = trans.__('SEARCH');\n        return new Palette(palette, translator);\n    }\n    Palette.activate = activate;\n    /**\n     * Restore the command palette.\n     */\n    function restore(app, restorer, translator) {\n        const palette = Private.createPalette(app, translator);\n        // Let the application restorer track the command palette for restoration of\n        // application state (e.g. setting the command palette as the current side bar\n        // widget).\n        restorer.add(palette, 'command-palette');\n    }\n    Palette.restore = restore;\n})(Palette || (Palette = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The private command palette instance.\n     */\n    let palette;\n    /**\n     * Create the application-wide command palette.\n     */\n    function createPalette(app, translator) {\n        if (!palette) {\n            // use a renderer tweaked to use inline svg icons\n            palette = new CommandPalette({\n                commands: app.commands,\n                renderer: CommandPaletteSvg.defaultRenderer\n            });\n            palette.id = 'command-palette';\n            palette.title.icon = paletteIcon;\n            const trans = translator.load('jupyterlab');\n            palette.title.label = trans.__('Commands');\n        }\n        return palette;\n    }\n    Private.createPalette = createPalette;\n})(Private || (Private = {}));\n//# sourceMappingURL=palette.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { Throttler } from '@lumino/polling';\n/**\n * A data connector for fetching settings.\n *\n * #### Notes\n * This connector adds a query parameter to the base services setting manager.\n */\nexport class SettingConnector extends DataConnector {\n    constructor(connector) {\n        super();\n        this._throttlers = Object.create(null);\n        this._connector = connector;\n    }\n    /**\n     * Fetch settings for a plugin.\n     * @param id - The plugin ID\n     *\n     * #### Notes\n     * The REST API requests are throttled at one request per plugin per 100ms.\n     */\n    fetch(id) {\n        const throttlers = this._throttlers;\n        if (!(id in throttlers)) {\n            throttlers[id] = new Throttler(() => this._connector.fetch(id), 100);\n        }\n        return throttlers[id].invoke();\n    }\n    async list(query = 'all') {\n        const { isDeferred, isDisabled } = PageConfig.Extension;\n        const { ids, values } = await this._connector.list(query === 'ids' ? 'ids' : undefined);\n        if (query === 'all') {\n            return { ids, values };\n        }\n        if (query === 'ids') {\n            return { ids };\n        }\n        return {\n            ids: ids.filter(id => !isDeferred(id) && !isDisabled(id)),\n            values: values.filter(({ id }) => !isDeferred(id) && !isDisabled(id))\n        };\n    }\n    async save(id, raw) {\n        await this._connector.save(id, raw);\n    }\n}\n//# sourceMappingURL=settingconnector.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ISettingRegistry, SettingRegistry } from '@jupyterlab/settingregistry';\nimport { SettingConnector } from './settingconnector';\n/**\n * The default setting registry provider.\n */\nexport const settingsPlugin = {\n    id: '@jupyterlab/apputils-extension:settings',\n    description: 'Provides the setting registry.',\n    activate: async (app) => {\n        const { isDisabled } = PageConfig.Extension;\n        const connector = new SettingConnector(app.serviceManager.settings);\n        // On startup, check if a plugin is available in the application.\n        // This helps avoid loading plugin files from other lab-based applications\n        // that have placed their schemas next to the JupyterLab schemas. Different lab-based\n        // applications might not have the same set of plugins loaded on the page.\n        // As an example this helps prevent having new toolbar items added by another application\n        // appear in JupyterLab as a side-effect when they are defined via the settings system.\n        const registry = new SettingRegistry({\n            connector,\n            plugins: (await connector.list('active')).values.filter(value => app.hasPlugin(value.id))\n        });\n        // If there are plugins that have schemas that are not in the setting\n        // registry after the application has restored, try to load them manually\n        // because otherwise, its settings will never become available in the\n        // setting registry.\n        void app.restored.then(async () => {\n            const plugins = await connector.list('ids');\n            plugins.ids.forEach(async (id) => {\n                if (!app.hasPlugin(id) || isDisabled(id) || id in registry.plugins) {\n                    return;\n                }\n                try {\n                    await registry.load(id);\n                }\n                catch (error) {\n                    console.warn(`Settings failed to load for (${id})`, error);\n                    if (!app.isPluginActivated(id)) {\n                        console.warn(`If 'jupyter.lab.transform=true' in the plugin schema, this ` +\n                            `may happen if {autoStart: false} in (${id}) or if it is ` +\n                            `one of the deferredExtensions in page config.`);\n                    }\n                }\n            });\n        });\n        return registry;\n    },\n    autoStart: true,\n    provides: ISettingRegistry\n};\n//# sourceMappingURL=settingsplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ILabShell } from '@jupyterlab/application';\nimport { IKernelStatusModel, ISessionContextDialogs, KernelStatus, RunningSessions, SessionContextDialogs } from '@jupyterlab/apputils';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\n/**\n * A plugin that provides a kernel status item to the status bar.\n */\nexport const kernelStatus = {\n    id: '@jupyterlab/apputils-extension:kernel-status',\n    description: 'Provides the kernel status indicator model.',\n    autoStart: true,\n    requires: [IStatusBar],\n    provides: IKernelStatusModel,\n    optional: [ISessionContextDialogs, ITranslator, ILabShell],\n    activate: (app, statusBar, sessionDialogs_, translator_, labShell) => {\n        const translator = translator_ !== null && translator_ !== void 0 ? translator_ : nullTranslator;\n        const sessionDialogs = sessionDialogs_ !== null && sessionDialogs_ !== void 0 ? sessionDialogs_ : new SessionContextDialogs({ translator });\n        // When the status item is clicked, launch the kernel\n        // selection dialog for the current session.\n        const changeKernel = async () => {\n            if (!item.model.sessionContext) {\n                return;\n            }\n            await sessionDialogs.selectKernel(item.model.sessionContext);\n        };\n        // Create the status item.\n        const item = new KernelStatus({ onClick: changeKernel }, translator);\n        const providers = new Set();\n        const addSessionProvider = (provider) => {\n            providers.add(provider);\n            if (app.shell.currentWidget) {\n                updateSession(app.shell, {\n                    newValue: app.shell.currentWidget,\n                    oldValue: null\n                });\n            }\n        };\n        function updateSession(shell, changes) {\n            var _a;\n            const { oldValue, newValue } = changes;\n            // Clean up after the old value if it exists,\n            // listen for changes to the title of the activity\n            if (oldValue) {\n                oldValue.title.changed.disconnect(onTitleChanged);\n            }\n            item.model.sessionContext =\n                (_a = [...providers]\n                    .map(provider => provider(changes.newValue))\n                    .filter(session => session !== null)[0]) !== null && _a !== void 0 ? _a : null;\n            if (newValue && item.model.sessionContext) {\n                onTitleChanged(newValue.title);\n                newValue.title.changed.connect(onTitleChanged);\n            }\n        }\n        // When the title of the active widget changes, update the label\n        // of the hover text.\n        const onTitleChanged = (title) => {\n            item.model.activityName = title.label;\n        };\n        if (labShell) {\n            labShell.currentChanged.connect(updateSession);\n        }\n        statusBar.registerStatusItem(kernelStatus.id, {\n            item,\n            align: 'left',\n            rank: 1,\n            isActive: () => item.model.sessionContext !== null\n        });\n        return { addSessionProvider };\n    }\n};\n/*\n * A plugin providing running terminals and sessions information\n * to the status bar.\n */\nexport const runningSessionsStatus = {\n    id: '@jupyterlab/apputils-extension:running-sessions-status',\n    description: 'Add the running sessions and terminals status bar item.',\n    autoStart: true,\n    requires: [IStatusBar, ITranslator],\n    activate: (app, statusBar, translator) => {\n        const item = new RunningSessions({\n            onClick: () => app.shell.activateById('jp-running-sessions'),\n            serviceManager: app.serviceManager,\n            translator\n        });\n        item.model.sessions = Array.from(app.serviceManager.sessions.running()).length;\n        item.model.terminals = Array.from(app.serviceManager.terminals.running()).length;\n        statusBar.registerStatusItem(runningSessionsStatus.id, {\n            item,\n            align: 'left',\n            rank: 0\n        });\n    }\n};\n//# sourceMappingURL=statusbarplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { ICommandPalette, ISplashScreen, IThemeManager, ThemeManager } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport scrollbarStyleText from '../style/scrollbar.raw.css';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.changeTheme = 'apputils:change-theme';\n    CommandIDs.themeScrollbars = 'apputils:theme-scrollbars';\n    CommandIDs.changeFont = 'apputils:change-font';\n    CommandIDs.incrFontSize = 'apputils:incr-font-size';\n    CommandIDs.decrFontSize = 'apputils:decr-font-size';\n})(CommandIDs || (CommandIDs = {}));\nfunction createStyleSheet(text) {\n    const style = document.createElement('style');\n    style.setAttribute('type', 'text/css');\n    style.appendChild(document.createTextNode(text));\n    return style;\n}\n/**\n * The default theme manager provider.\n */\nexport const themesPlugin = {\n    id: '@jupyterlab/apputils-extension:themes',\n    description: 'Provides the theme manager.',\n    requires: [ISettingRegistry, JupyterFrontEnd.IPaths, ITranslator],\n    optional: [ISplashScreen],\n    activate: (app, settings, paths, translator, splash) => {\n        const trans = translator.load('jupyterlab');\n        const host = app.shell;\n        const commands = app.commands;\n        const url = URLExt.join(PageConfig.getBaseUrl(), paths.urls.themes);\n        const key = themesPlugin.id;\n        const manager = new ThemeManager({\n            key,\n            host,\n            settings,\n            splash: splash !== null && splash !== void 0 ? splash : undefined,\n            url\n        });\n        let scrollbarsStyleElement = null;\n        // Keep a synchronously set reference to the current theme,\n        // since the asynchronous setting of the theme in `changeTheme`\n        // can lead to an incorrect toggle on the currently used theme.\n        let currentTheme;\n        manager.themeChanged.connect((sender, args) => {\n            // Set data attributes on the application shell for the current theme.\n            currentTheme = args.newValue;\n            document.body.dataset.jpThemeLight = String(manager.isLight(currentTheme));\n            document.body.dataset.jpThemeName = currentTheme;\n            if (document.body.dataset.jpThemeScrollbars !==\n                String(manager.themeScrollbars(currentTheme))) {\n                document.body.dataset.jpThemeScrollbars = String(manager.themeScrollbars(currentTheme));\n                if (manager.themeScrollbars(currentTheme)) {\n                    if (!scrollbarsStyleElement) {\n                        scrollbarsStyleElement = createStyleSheet(scrollbarStyleText);\n                    }\n                    if (!scrollbarsStyleElement.parentElement) {\n                        document.body.appendChild(scrollbarsStyleElement);\n                    }\n                }\n                else {\n                    if (scrollbarsStyleElement && scrollbarsStyleElement.parentElement) {\n                        scrollbarsStyleElement.parentElement.removeChild(scrollbarsStyleElement);\n                    }\n                }\n            }\n            commands.notifyCommandChanged(CommandIDs.changeTheme);\n        });\n        commands.addCommand(CommandIDs.changeTheme, {\n            label: args => {\n                if (args.theme === undefined) {\n                    return trans.__('Switch to the provided `theme`.');\n                }\n                const theme = args['theme'];\n                const displayName = manager.getDisplayName(theme);\n                return args['isPalette']\n                    ? trans.__('Use Theme: %1', displayName)\n                    : displayName;\n            },\n            isToggled: args => args['theme'] === currentTheme,\n            execute: args => {\n                const theme = args['theme'];\n                if (theme === manager.theme) {\n                    return;\n                }\n                return manager.setTheme(theme);\n            }\n        });\n        commands.addCommand(CommandIDs.themeScrollbars, {\n            label: trans.__('Theme Scrollbars'),\n            isToggled: () => manager.isToggledThemeScrollbars(),\n            execute: () => manager.toggleThemeScrollbars()\n        });\n        commands.addCommand(CommandIDs.changeFont, {\n            label: args => args['enabled'] ? `${args['font']}` : trans.__('waiting for fonts'),\n            isEnabled: args => args['enabled'],\n            isToggled: args => manager.getCSS(args['key']) === args['font'],\n            execute: args => manager.setCSSOverride(args['key'], args['font'])\n        });\n        commands.addCommand(CommandIDs.incrFontSize, {\n            label: args => {\n                switch (args.key) {\n                    case 'code-font-size':\n                        return trans.__('Increase Code Font Size');\n                    case 'content-font-size1':\n                        return trans.__('Increase Content Font Size');\n                    case 'ui-font-size1':\n                        return trans.__('Increase UI Font Size');\n                    default:\n                        return trans.__('Increase Font Size');\n                }\n            },\n            execute: args => manager.incrFontSize(args['key'])\n        });\n        commands.addCommand(CommandIDs.decrFontSize, {\n            label: args => {\n                switch (args.key) {\n                    case 'code-font-size':\n                        return trans.__('Decrease Code Font Size');\n                    case 'content-font-size1':\n                        return trans.__('Decrease Content Font Size');\n                    case 'ui-font-size1':\n                        return trans.__('Decrease UI Font Size');\n                    default:\n                        return trans.__('Decrease Font Size');\n                }\n            },\n            execute: args => manager.decrFontSize(args['key'])\n        });\n        return manager;\n    },\n    autoStart: true,\n    provides: IThemeManager\n};\n/**\n * The default theme manager's UI command palette and main menu functionality.\n *\n * #### Notes\n * This plugin loads separately from the theme manager plugin in order to\n * prevent blocking of the theme manager while it waits for the command palette\n * and main menu to become available.\n */\nexport const themesPaletteMenuPlugin = {\n    id: '@jupyterlab/apputils-extension:themes-palette-menu',\n    description: 'Adds theme commands to the menu and the command palette.',\n    requires: [IThemeManager, ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, manager, translator, palette, mainMenu) => {\n        const trans = translator.load('jupyterlab');\n        // If we have a main menu, add the theme manager to the settings menu.\n        if (mainMenu) {\n            void app.restored.then(() => {\n                var _a;\n                const isPalette = false;\n                const themeMenu = (_a = mainMenu.settingsMenu.items.find(item => {\n                    var _a;\n                    return item.type === 'submenu' &&\n                        ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-settings-apputilstheme';\n                })) === null || _a === void 0 ? void 0 : _a.submenu;\n                // choose a theme\n                if (themeMenu) {\n                    manager.themes.forEach((theme, index) => {\n                        themeMenu.insertItem(index, {\n                            command: CommandIDs.changeTheme,\n                            args: { isPalette, theme }\n                        });\n                    });\n                }\n            });\n        }\n        // If we have a command palette, add theme switching options to it.\n        if (palette) {\n            void app.restored.then(() => {\n                const category = trans.__('Theme');\n                const command = CommandIDs.changeTheme;\n                const isPalette = true;\n                // choose a theme\n                manager.themes.forEach(theme => {\n                    palette.addItem({ command, args: { isPalette, theme }, category });\n                });\n                // toggle scrollbar theming\n                palette.addItem({ command: CommandIDs.themeScrollbars, category });\n                // increase/decrease code font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'code-font-size'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'code-font-size'\n                    },\n                    category\n                });\n                // increase/decrease content font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'content-font-size1'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'content-font-size1'\n                    },\n                    category\n                });\n                // increase/decrease ui font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'ui-font-size1'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'ui-font-size1'\n                    },\n                    category\n                });\n            });\n        }\n    },\n    autoStart: true\n};\n//# sourceMappingURL=themesplugins.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { createDefaultFactory, IToolbarWidgetRegistry, ToolbarWidgetRegistry } from '@jupyterlab/apputils';\n/**\n * The default toolbar registry.\n */\nexport const toolbarRegistry = {\n    id: '@jupyterlab/apputils-extension:toolbar-registry',\n    description: 'Provides toolbar items registry.',\n    autoStart: true,\n    provides: IToolbarWidgetRegistry,\n    activate: (app) => {\n        const registry = new ToolbarWidgetRegistry({\n            defaultFactory: createDefaultFactory(app.commands)\n        });\n        return registry;\n    }\n};\n//# sourceMappingURL=toolbarregistryplugin.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Dialog, IWindowResolver, showDialog } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { IDefaultFileBrowser } from '@jupyterlab/filebrowser';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.saveWorkspace = 'workspace-ui:save';\n    CommandIDs.saveWorkspaceAs = 'workspace-ui:save-as';\n})(CommandIDs || (CommandIDs = {}));\nconst WORKSPACE_NAME = 'jupyterlab-workspace';\nconst WORKSPACE_EXT = '.' + WORKSPACE_NAME;\nconst LAST_SAVE_ID = 'workspace-ui:lastSave';\nconst ICON_NAME = 'jp-JupyterIcon';\n/**\n * The workspace MIME renderer and save plugin.\n */\nexport const workspacesPlugin = {\n    id: '@jupyterlab/apputils-extension:workspaces',\n    description: 'Add workspace file type and commands.',\n    autoStart: true,\n    requires: [\n        IDefaultFileBrowser,\n        IWindowResolver,\n        IStateDB,\n        ITranslator,\n        JupyterFrontEnd.IPaths\n    ],\n    optional: [IRouter],\n    activate: (app, fileBrowser, resolver, state, translator, paths, router) => {\n        // The workspace factory creates dummy widgets to load a new workspace.\n        const factory = new Private.WorkspaceFactory({\n            workspaces: app.serviceManager.workspaces,\n            router,\n            state,\n            translator,\n            paths\n        });\n        const trans = translator.load('jupyterlab');\n        app.docRegistry.addFileType({\n            name: WORKSPACE_NAME,\n            contentType: 'file',\n            fileFormat: 'text',\n            displayName: trans.__('JupyterLab workspace File'),\n            extensions: [WORKSPACE_EXT],\n            mimeTypes: ['text/json'],\n            iconClass: ICON_NAME\n        });\n        app.docRegistry.addWidgetFactory(factory);\n        app.commands.addCommand(CommandIDs.saveWorkspaceAs, {\n            label: trans.__('Save Current Workspace As…'),\n            execute: async () => {\n                const data = app.serviceManager.workspaces.fetch(resolver.name);\n                await Private.saveAs(fileBrowser, app.serviceManager.contents, data, state, translator);\n            }\n        });\n        app.commands.addCommand(CommandIDs.saveWorkspace, {\n            label: trans.__('Save Current Workspace'),\n            execute: async () => {\n                const { contents } = app.serviceManager;\n                const data = app.serviceManager.workspaces.fetch(resolver.name);\n                const lastSave = (await state.fetch(LAST_SAVE_ID));\n                if (lastSave === undefined) {\n                    await Private.saveAs(fileBrowser, contents, data, state, translator);\n                }\n                else {\n                    await Private.save(lastSave, contents, data, state);\n                }\n            }\n        });\n    }\n};\nvar Private;\n(function (Private) {\n    /**\n     * Save workspace to a user provided location\n     */\n    async function save(userPath, contents, data, state) {\n        let name = userPath.split('/').pop();\n        // Add extension if not provided or remove extension from name if it was.\n        if (name !== undefined && name.includes('.')) {\n            name = name.split('.')[0];\n        }\n        else {\n            userPath = userPath + WORKSPACE_EXT;\n        }\n        // Save last save location, for save button to work\n        await state.save(LAST_SAVE_ID, userPath);\n        const resolvedData = await data;\n        resolvedData.metadata.id = `${name}`;\n        await contents.save(userPath, {\n            type: 'file',\n            format: 'text',\n            content: JSON.stringify(resolvedData)\n        });\n    }\n    Private.save = save;\n    /**\n     * Ask user for location, and save workspace.\n     * Default location is the current directory in the file browser\n     */\n    async function saveAs(browser, contents, data, state, translator) {\n        var _a;\n        translator = translator || nullTranslator;\n        const lastSave = await state.fetch(LAST_SAVE_ID);\n        let defaultName;\n        if (lastSave === undefined) {\n            defaultName = 'new-workspace';\n        }\n        else {\n            defaultName = (_a = lastSave.split('/').pop()) === null || _a === void 0 ? void 0 : _a.split('.')[0];\n        }\n        const defaultPath = browser.model.path + '/' + defaultName + WORKSPACE_EXT;\n        const userPath = await getSavePath(defaultPath, translator);\n        if (userPath) {\n            await save(userPath, contents, data, state);\n        }\n    }\n    Private.saveAs = saveAs;\n    /**\n     * This widget factory is used to handle double click on workspace\n     */\n    class WorkspaceFactory extends ABCWidgetFactory {\n        /**\n         * Construct a widget factory that uploads a workspace and navigates to it.\n         *\n         * @param options - The instantiation options for a `WorkspaceFactory`.\n         */\n        constructor(options) {\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            super({\n                name: 'Workspace loader',\n                label: trans.__('Workspace loader'),\n                fileTypes: [WORKSPACE_NAME],\n                defaultFor: [WORKSPACE_NAME],\n                readOnly: true\n            });\n            this._application = options.paths.urls.app;\n            this._router = options.router;\n            this._state = options.state;\n            this._workspaces = options.workspaces;\n        }\n        /**\n         * Loads the workspace into load, and jump to it\n         * @param context This is used queried to query the workspace content\n         */\n        createNewWidget(context) {\n            // Save a file's contents as a workspace and navigate to that workspace.\n            void context.ready.then(async () => {\n                const file = context.model;\n                const workspace = file.toJSON();\n                const path = context.path;\n                const id = workspace.metadata.id;\n                // Save the file contents as a workspace.\n                await this._workspaces.save(id, workspace);\n                // Save last save location for the save command.\n                await this._state.save(LAST_SAVE_ID, path);\n                // Navigate to new workspace.\n                const url = URLExt.join(this._application, 'workspaces', id);\n                if (this._router) {\n                    this._router.navigate(url, { hard: true });\n                }\n                else {\n                    document.location.href = url;\n                }\n            });\n            return dummyWidget(context);\n        }\n    }\n    Private.WorkspaceFactory = WorkspaceFactory;\n    /**\n     * Returns a dummy widget with disposed content that doesn't render in the UI.\n     *\n     * @param context - The file context.\n     */\n    function dummyWidget(context) {\n        const widget = new DocumentWidget({ content: new Widget(), context });\n        widget.content.dispose();\n        return widget;\n    }\n    /**\n     * Ask user for a path to save to.\n     * @param defaultPath Path already present when the dialog is shown\n     */\n    async function getSavePath(defaultPath, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const saveBtn = Dialog.okButton({\n            label: trans.__('Save'),\n            ariaLabel: trans.__('Save Current Workspace')\n        });\n        const result = await showDialog({\n            title: trans.__('Save Current Workspace As…'),\n            body: new SaveWidget(defaultPath),\n            buttons: [Dialog.cancelButton(), saveBtn]\n        });\n        if (result.button.label === trans.__('Save')) {\n            return result.value;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * A widget that gets a file path from a user.\n     */\n    class SaveWidget extends Widget {\n        /**\n         * Gets a modal node for getting save location. Will have a default to the current opened directory\n         * @param path Default location\n         */\n        constructor(path) {\n            super({ node: createSaveNode(path) });\n        }\n        /**\n         * Gets the save path entered by the user\n         */\n        getValue() {\n            return this.node.value;\n        }\n    }\n    /**\n     * Create the node for a save widget.\n     */\n    function createSaveNode(path) {\n        const input = document.createElement('input');\n        input.value = path;\n        return input;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=workspacesplugin.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { CommandRegistry } from '@lumino/commands';\nimport { Selector } from '@lumino/domutils';\nimport * as React from 'react';\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\n/**\n * The class name for each row of ContextShortcutTable\n */\nconst SHORTCUT_TABLE_ROW_CLASS = 'jp-ContextualShortcut-TableRow';\n/**\n * The class name for the last row of ContextShortcutTable\n */\nconst SHORTCUT_TABLE_LAST_ROW_CLASS = 'jp-ContextualShortcut-TableLastRow';\n/**\n * The class name for each item of ContextShortcutTable\n */\nconst SHORTCUT_TABLE_ITEM_CLASS = 'jp-ContextualShortcut-TableItem';\n/**\n * The class name for each button-like symbol representing a key used in a shortcut in the ContextShortcutTable\n */\nconst SHORTCUT_KEY_CLASS = 'jp-ContextualShortcut-Key';\nexport function displayShortcuts(options) {\n    const { commands, trans, activeElement } = options;\n    const elt = activeElement !== null && activeElement !== void 0 ? activeElement : document.activeElement;\n    /**\n     * Find the distance from the target node to the first matching node.\n     *\n     * Based on Lumino private function commands.Private.targetDistance\n     * This traverses the DOM path from `elt` to the root\n     * computes the distance from `elt` to the first node which matches\n     * the CSS selector. If no match is found, `-1` is returned.\n     *\n     * It also stops traversal if the `data-lm-suppress-shortcuts` or\n     * `data-p-suppress-shortcuts` attributes are found.\n     */\n    function formatKeys(keys) {\n        const topContainer = [];\n        keys.forEach((key, index) => {\n            const container = [];\n            key.split(' ').forEach((ch, chIndex) => {\n                container.push(React.createElement(\"span\", { className: SHORTCUT_KEY_CLASS, key: `ch-${chIndex}` },\n                    React.createElement(\"kbd\", null, ch)), React.createElement(React.Fragment, { key: `fragment-${chIndex}` }, \" + \"));\n            });\n            topContainer.push(React.createElement(\"span\", { key: `key-${index}` }, container.slice(0, -1)), React.createElement(React.Fragment, { key: `fragment-${index}` }, \" + \"));\n        });\n        return React.createElement(\"span\", null, topContainer.slice(0, -1));\n    }\n    function capitalizeString(str) {\n        const capitalizedStr = str.charAt(0).toUpperCase() + str.slice(1);\n        return capitalizedStr;\n    }\n    function formatLabel(b) {\n        const label = commands.label(b.command);\n        const commandID = b.command.split(':')[1];\n        const automaticLabel = commandID.split('-');\n        let capitalizedLabel = '';\n        for (let i = 0; i < automaticLabel.length; i++) {\n            const str = capitalizeString(automaticLabel[i]);\n            capitalizedLabel = capitalizedLabel + ' ' + str;\n        }\n        if (label.length > 0) {\n            return label;\n        }\n        else {\n            return capitalizedLabel;\n        }\n    }\n    function matchDistance(selector, elt) {\n        let targ = elt;\n        for (let dist = 0; targ !== null && targ !== targ.parentElement; targ = targ.parentElement, ++dist) {\n            if (targ.hasAttribute('data-lm-suppress-shortcuts')) {\n                return -1;\n            }\n            if (targ.matches(selector)) {\n                return dist;\n            }\n        }\n        return -1;\n    }\n    // Find active keybindings for target element\n    const activeBindings = new Map();\n    for (let i = 0; i < commands.keyBindings.length; i++) {\n        const kb = commands.keyBindings[i];\n        let distance = matchDistance(kb.selector, elt);\n        if (distance < 0) {\n            continue;\n        }\n        let formatted = CommandRegistry.formatKeystroke(kb.keys);\n        if (activeBindings.has(formatted)) {\n            let oldBinding = activeBindings.get(formatted);\n            // if the existing binding takes precedence, ignore this binding by continuing\n            if (oldBinding[0] < distance ||\n                (oldBinding[0] === distance &&\n                    Selector.calculateSpecificity(oldBinding[1].selector) >\n                        Selector.calculateSpecificity(kb.selector))) {\n                continue;\n            }\n        }\n        activeBindings.set(formatted, [distance, kb]);\n    }\n    // Group shortcuts by distance\n    let maxDistance = -1;\n    const groupedBindings = new Map();\n    for (let [distance, binding] of activeBindings.values()) {\n        maxDistance = Math.max(distance, maxDistance);\n        if (!groupedBindings.has(distance)) {\n            groupedBindings.set(distance, []);\n        }\n        groupedBindings.get(distance).push(binding);\n    }\n    // Display shortcuts by group\n    const bindingTable = [];\n    for (let d = 0; d <= maxDistance; d++) {\n        if (groupedBindings.has(d)) {\n            bindingTable.push(groupedBindings.get(d).map(b => (React.createElement(\"tr\", { className: SHORTCUT_TABLE_ROW_CLASS, key: `${b.command}-${b.keys.join('-').replace(' ', '_')}` },\n                React.createElement(\"td\", { className: SHORTCUT_TABLE_ITEM_CLASS }, formatLabel(b)),\n                React.createElement(\"td\", { className: SHORTCUT_TABLE_ITEM_CLASS }, formatKeys([...b.keys]))))));\n            bindingTable.push(React.createElement(\"tr\", { className: SHORTCUT_TABLE_LAST_ROW_CLASS, key: `group-${d}-last` }));\n        }\n    }\n    const body = (React.createElement(\"table\", null,\n        React.createElement(\"tbody\", null, bindingTable)));\n    return showDialog({\n        title: trans.__('Keyboard Shortcuts'),\n        body,\n        buttons: [\n            Dialog.cancelButton({\n                label: trans.__('Close')\n            })\n        ]\n    });\n}\n//# sourceMappingURL=shortcuts.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module apputils-extension\n */\nimport { ILayoutRestorer, IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, ISanitizer, ISessionContextDialogs, ISplashScreen, IWindowResolver, MainAreaWidget, Printing, Sanitizer, SessionContextDialogs, WindowResolver } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB, StateDB } from '@jupyterlab/statedb';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { jupyterFaviconIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Debouncer, Throttler } from '@lumino/polling';\nimport { announcements } from './announcements';\nimport { notificationPlugin } from './notificationplugin';\nimport { Palette } from './palette';\nimport { settingsPlugin } from './settingsplugin';\nimport { kernelStatus, runningSessionsStatus } from './statusbarplugin';\nimport { themesPaletteMenuPlugin, themesPlugin } from './themesplugins';\nimport { toolbarRegistry } from './toolbarregistryplugin';\nimport { workspacesPlugin } from './workspacesplugin';\nimport { displayShortcuts } from './shortcuts';\n/**\n * The interval in milliseconds before recover options appear during splash.\n */\nconst SPLASH_RECOVER_TIMEOUT = 12000;\n/**\n * The command IDs used by the apputils plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.loadState = 'apputils:load-statedb';\n    CommandIDs.print = 'apputils:print';\n    CommandIDs.reset = 'apputils:reset';\n    CommandIDs.resetOnLoad = 'apputils:reset-on-load';\n    CommandIDs.runFirstEnabled = 'apputils:run-first-enabled';\n    CommandIDs.runAllEnabled = 'apputils:run-all-enabled';\n    CommandIDs.toggleHeader = 'apputils:toggle-header';\n    CommandIDs.displayShortcuts = 'apputils:display-shortcuts';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default command palette extension.\n */\nconst palette = {\n    id: '@jupyterlab/apputils-extension:palette',\n    description: 'Provides the command palette.',\n    autoStart: true,\n    requires: [ITranslator],\n    provides: ICommandPalette,\n    optional: [ISettingRegistry],\n    activate: (app, translator, settingRegistry) => {\n        return Palette.activate(app, translator, settingRegistry);\n    }\n};\n/**\n * The default command palette's restoration extension.\n *\n * #### Notes\n * The command palette's restoration logic is handled separately from the\n * command palette provider extension because the layout restorer dependency\n * causes the command palette to be unavailable to other extensions earlier\n * in the application load cycle.\n */\nconst paletteRestorer = {\n    id: '@jupyterlab/apputils-extension:palette-restorer',\n    description: 'Restores the command palette.',\n    autoStart: true,\n    requires: [ILayoutRestorer, ITranslator],\n    activate: (app, restorer, translator) => {\n        Palette.restore(app, restorer, translator);\n    }\n};\n/**\n * The default window name resolver provider.\n */\nconst resolver = {\n    id: '@jupyterlab/apputils-extension:resolver',\n    description: 'Provides the window name resolver.',\n    autoStart: true,\n    provides: IWindowResolver,\n    requires: [JupyterFrontEnd.IPaths, IRouter],\n    activate: async (app, paths, router) => {\n        const { hash, search } = router.current;\n        const query = URLExt.queryStringToObject(search || '');\n        const solver = new WindowResolver();\n        const workspace = PageConfig.getOption('workspace');\n        const treePath = PageConfig.getOption('treePath');\n        const mode = PageConfig.getOption('mode') === 'multiple-document' ? 'lab' : 'doc';\n        // This is used as a key in local storage to refer to workspaces, either the name\n        // of the workspace or the string PageConfig.defaultWorkspace. Both lab and doc modes share the same workspace.\n        const candidate = workspace ? workspace : PageConfig.defaultWorkspace;\n        const rest = treePath ? URLExt.join('tree', treePath) : '';\n        try {\n            await solver.resolve(candidate);\n            return solver;\n        }\n        catch (error) {\n            // Window resolution has failed so the URL must change. Return a promise\n            // that never resolves to prevent the application from loading plugins\n            // that rely on `IWindowResolver`.\n            return new Promise(() => {\n                const { base } = paths.urls;\n                const pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n                const random = pool[Math.floor(Math.random() * pool.length)];\n                let path = URLExt.join(base, mode, 'workspaces', `auto-${random}`);\n                path = rest ? URLExt.join(path, URLExt.encodeParts(rest)) : path;\n                // Reset the workspace on load.\n                query['reset'] = '';\n                const url = path + URLExt.objectToQueryString(query) + (hash || '');\n                router.navigate(url, { hard: true });\n            });\n        }\n    }\n};\n/**\n * The default splash screen provider.\n */\nconst splash = {\n    id: '@jupyterlab/apputils-extension:splash',\n    description: 'Provides the splash screen.',\n    autoStart: true,\n    requires: [ITranslator],\n    provides: ISplashScreen,\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands, restored } = app;\n        // Create splash element and populate it.\n        const splash = document.createElement('div');\n        const galaxy = document.createElement('div');\n        const logo = document.createElement('div');\n        splash.id = 'jupyterlab-splash';\n        galaxy.id = 'galaxy';\n        logo.id = 'main-logo';\n        jupyterFaviconIcon.element({\n            container: logo,\n            stylesheet: 'splash'\n        });\n        galaxy.appendChild(logo);\n        ['1', '2', '3'].forEach(id => {\n            const moon = document.createElement('div');\n            const planet = document.createElement('div');\n            moon.id = `moon${id}`;\n            moon.className = 'moon orbit';\n            planet.id = `planet${id}`;\n            planet.className = 'planet';\n            moon.appendChild(planet);\n            galaxy.appendChild(moon);\n        });\n        splash.appendChild(galaxy);\n        // Create debounced recovery dialog function.\n        let dialog;\n        const recovery = new Throttler(async () => {\n            if (dialog) {\n                return;\n            }\n            dialog = new Dialog({\n                title: trans.__('Loading…'),\n                body: trans.__(`The loading screen is taking a long time.\nWould you like to clear the workspace or keep waiting?`),\n                buttons: [\n                    Dialog.cancelButton({ label: trans.__('Keep Waiting') }),\n                    Dialog.warnButton({ label: trans.__('Clear Workspace') })\n                ]\n            });\n            try {\n                const result = await dialog.launch();\n                dialog.dispose();\n                dialog = null;\n                if (result.button.accept && commands.hasCommand(CommandIDs.reset)) {\n                    return commands.execute(CommandIDs.reset);\n                }\n                // Re-invoke the recovery timer in the next frame.\n                requestAnimationFrame(() => {\n                    // Because recovery can be stopped, handle invocation rejection.\n                    void recovery.invoke().catch(_ => undefined);\n                });\n            }\n            catch (error) {\n                /* no-op */\n            }\n        }, { limit: SPLASH_RECOVER_TIMEOUT, edge: 'trailing' });\n        // Return ISplashScreen.\n        let splashCount = 0;\n        return {\n            show: (light = true) => {\n                splash.classList.remove('splash-fade');\n                splash.classList.toggle('light', light);\n                splash.classList.toggle('dark', !light);\n                splashCount++;\n                document.body.appendChild(splash);\n                // Because recovery can be stopped, handle invocation rejection.\n                void recovery.invoke().catch(_ => undefined);\n                return new DisposableDelegate(async () => {\n                    await restored;\n                    if (--splashCount === 0) {\n                        void recovery.stop();\n                        if (dialog) {\n                            dialog.dispose();\n                            dialog = null;\n                        }\n                        splash.classList.add('splash-fade');\n                        window.setTimeout(() => {\n                            document.body.removeChild(splash);\n                        }, 200);\n                    }\n                });\n            }\n        };\n    }\n};\nconst print = {\n    id: '@jupyterlab/apputils-extension:print',\n    description: 'Add the print capability',\n    autoStart: true,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        app.commands.addCommand(CommandIDs.print, {\n            label: trans.__('Print…'),\n            isEnabled: () => {\n                const widget = app.shell.currentWidget;\n                return Printing.getPrintFunction(widget) !== null;\n            },\n            execute: async () => {\n                const widget = app.shell.currentWidget;\n                const printFunction = Printing.getPrintFunction(widget);\n                if (printFunction) {\n                    await printFunction();\n                }\n            }\n        });\n    }\n};\nexport const toggleHeader = {\n    id: '@jupyterlab/apputils-extension:toggle-header',\n    description: 'Adds a command to display the main area widget content header.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Main Area');\n        app.commands.addCommand(CommandIDs.toggleHeader, {\n            label: trans.__('Show Header Above Content'),\n            isEnabled: () => app.shell.currentWidget instanceof MainAreaWidget &&\n                !app.shell.currentWidget.contentHeader.isDisposed &&\n                app.shell.currentWidget.contentHeader.widgets.length > 0,\n            isToggled: () => {\n                const widget = app.shell.currentWidget;\n                return widget instanceof MainAreaWidget\n                    ? !widget.contentHeader.isHidden\n                    : false;\n            },\n            execute: async () => {\n                const widget = app.shell.currentWidget;\n                if (widget instanceof MainAreaWidget) {\n                    widget.contentHeader.setHidden(!widget.contentHeader.isHidden);\n                }\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleHeader, category });\n        }\n    }\n};\n/**\n * Update the browser title based on the workspace and the current\n * active item.\n */\nasync function updateTabTitle(workspace, db, name) {\n    var _a, _b;\n    const data = await db.toJSON();\n    let current = (_b = (_a = data['layout-restorer:data']) === null || _a === void 0 ? void 0 : _a.main) === null || _b === void 0 ? void 0 : _b.current;\n    if (current === undefined) {\n        document.title = `${PageConfig.getOption('appName') || 'JupyterLab'}${workspace.startsWith('auto-') ? ` (${workspace})` : ``}`;\n    }\n    else {\n        // File name from current path\n        let currentFile = PathExt.basename(decodeURIComponent(window.location.href));\n        // Truncate to first 12 characters of current document name + ... if length > 15\n        currentFile =\n            currentFile.length > 15\n                ? currentFile.slice(0, 12).concat(`…`)\n                : currentFile;\n        // Number of restorable items that are either notebooks or editors\n        const count = Object.keys(data).filter(item => item.startsWith('notebook') || item.startsWith('editor')).length;\n        if (workspace.startsWith('auto-')) {\n            document.title = `${currentFile} (${workspace}${count > 1 ? ` : ${count}` : ``}) - ${name}`;\n        }\n        else {\n            document.title = `${currentFile}${count > 1 ? ` (${count})` : ``} - ${name}`;\n        }\n    }\n}\n/**\n * The default state database for storing application state.\n *\n * #### Notes\n * If this extension is loaded with a window resolver, it will automatically add\n * state management commands, URL support for `clone` and `reset`, and workspace\n * auto-saving. Otherwise, it will return a simple in-memory state database.\n */\nconst state = {\n    id: '@jupyterlab/apputils-extension:state',\n    description: 'Provides the application state. It is stored per workspaces.',\n    autoStart: true,\n    provides: IStateDB,\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    optional: [IWindowResolver],\n    activate: (app, paths, router, translator, resolver) => {\n        const trans = translator.load('jupyterlab');\n        if (resolver === null) {\n            return new StateDB();\n        }\n        let resolved = false;\n        const { commands, name, serviceManager } = app;\n        const { workspaces } = serviceManager;\n        const workspace = resolver.name;\n        const transform = new PromiseDelegate();\n        const db = new StateDB({ transform: transform.promise });\n        const save = new Debouncer(async () => {\n            const id = workspace;\n            const metadata = { id };\n            const data = await db.toJSON();\n            await workspaces.save(id, { data, metadata });\n        });\n        // Any time the local state database changes, save the workspace.\n        db.changed.connect(() => void save.invoke(), db);\n        db.changed.connect(() => updateTabTitle(workspace, db, name));\n        commands.addCommand(CommandIDs.loadState, {\n            label: trans.__('Load state for the current workspace.'),\n            execute: async (args) => {\n                // Since the command can be executed an arbitrary number of times, make\n                // sure it is safe to call multiple times.\n                if (resolved) {\n                    return;\n                }\n                const { hash, path, search } = args;\n                const query = URLExt.queryStringToObject(search || '');\n                const clone = typeof query['clone'] === 'string'\n                    ? query['clone'] === ''\n                        ? PageConfig.defaultWorkspace\n                        : query['clone']\n                    : null;\n                const source = clone || workspace || null;\n                if (source === null) {\n                    console.error(`${CommandIDs.loadState} cannot load null workspace.`);\n                    return;\n                }\n                try {\n                    const saved = await workspaces.fetch(source);\n                    // If this command is called after a reset, the state database\n                    // will already be resolved.\n                    if (!resolved) {\n                        resolved = true;\n                        transform.resolve({ type: 'overwrite', contents: saved.data });\n                    }\n                }\n                catch ({ message }) {\n                    console.warn(`Fetching workspace \"${workspace}\" failed.`, message);\n                    // If the workspace does not exist, cancel the data transformation\n                    // and save a workspace with the current user state data.\n                    if (!resolved) {\n                        resolved = true;\n                        transform.resolve({ type: 'cancel', contents: null });\n                    }\n                }\n                if (source === clone) {\n                    // Maintain the query string parameters but remove `clone`.\n                    delete query['clone'];\n                    const url = path + URLExt.objectToQueryString(query) + hash;\n                    const cloned = save.invoke().then(() => router.stop);\n                    // After the state has been cloned, navigate to the URL.\n                    void cloned.then(() => {\n                        router.navigate(url);\n                    });\n                    return cloned;\n                }\n                // After the state database has finished loading, save it.\n                await save.invoke();\n            }\n        });\n        commands.addCommand(CommandIDs.reset, {\n            label: trans.__('Reset Application State'),\n            execute: async ({ reload }) => {\n                await db.clear();\n                await save.invoke();\n                if (reload) {\n                    router.reload();\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.resetOnLoad, {\n            label: trans.__('Reset state when loading for the workspace.'),\n            execute: (args) => {\n                const { hash, path, search } = args;\n                const query = URLExt.queryStringToObject(search || '');\n                const reset = 'reset' in query;\n                const clone = 'clone' in query;\n                if (!reset) {\n                    return;\n                }\n                // If the state database has already been resolved, resetting is\n                // impossible without reloading.\n                if (resolved) {\n                    return router.reload();\n                }\n                // Empty the state database.\n                resolved = true;\n                transform.resolve({ type: 'clear', contents: null });\n                // Maintain the query string parameters but remove `reset`.\n                delete query['reset'];\n                const url = path + URLExt.objectToQueryString(query) + hash;\n                const cleared = db.clear().then(() => save.invoke());\n                // After the state has been reset, navigate to the URL.\n                if (clone) {\n                    void cleared.then(() => {\n                        router.navigate(url, { hard: true });\n                    });\n                }\n                else {\n                    void cleared.then(() => {\n                        router.navigate(url);\n                    });\n                }\n                return cleared;\n            }\n        });\n        router.register({\n            command: CommandIDs.loadState,\n            pattern: /.?/,\n            rank: 30 // High priority: 30:100.\n        });\n        router.register({\n            command: CommandIDs.resetOnLoad,\n            pattern: /(\\?reset|\\&reset)($|&)/,\n            rank: 20 // High priority: 20:100.\n        });\n        return db;\n    }\n};\n/**\n * The default session context dialogs extension.\n */\nconst sessionDialogs = {\n    id: '@jupyterlab/apputils-extension:sessionDialogs',\n    description: 'Provides the session context dialogs.',\n    provides: ISessionContextDialogs,\n    optional: [ITranslator],\n    autoStart: true,\n    activate: async (app, translator) => {\n        return new SessionContextDialogs({\n            translator: translator !== null && translator !== void 0 ? translator : nullTranslator\n        });\n    }\n};\n/**\n * Utility commands\n */\nconst utilityCommands = {\n    id: '@jupyterlab/apputils-extension:utilityCommands',\n    description: 'Adds meta commands to run set of other commands.',\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    autoStart: true,\n    activate: (app, translator, palette) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        commands.addCommand(CommandIDs.runFirstEnabled, {\n            label: trans.__('Run First Enabled Command'),\n            execute: args => {\n                const commands = args.commands;\n                const commandArgs = args.args;\n                const argList = Array.isArray(args);\n                for (let i = 0; i < commands.length; i++) {\n                    const cmd = commands[i];\n                    const arg = argList ? commandArgs[i] : commandArgs;\n                    if (app.commands.isEnabled(cmd, arg)) {\n                        return app.commands.execute(cmd, arg);\n                    }\n                }\n            }\n        });\n        // Add a command for taking lists of commands and command arguments\n        // and running all the enabled commands.\n        commands.addCommand(CommandIDs.runAllEnabled, {\n            label: trans.__('Run All Enabled Commands Passed as Args'),\n            execute: async (args) => {\n                const commands = args.commands;\n                const commandArgs = args.args;\n                const argList = Array.isArray(args);\n                const errorIfNotEnabled = args.errorIfNotEnabled;\n                for (let i = 0; i < commands.length; i++) {\n                    const cmd = commands[i];\n                    const arg = argList ? commandArgs[i] : commandArgs;\n                    if (app.commands.isEnabled(cmd, arg)) {\n                        await app.commands.execute(cmd, arg);\n                    }\n                    else {\n                        if (errorIfNotEnabled) {\n                            console.error(`${cmd} is not enabled.`);\n                        }\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.displayShortcuts, {\n            label: trans.__('Show Keyboard Shortcuts'),\n            caption: trans.__('Show relevant keyboard shortcuts for the current active widget'),\n            execute: args => {\n                var _a, _b, _c, _d;\n                const included = (_a = app.shell.currentWidget) === null || _a === void 0 ? void 0 : _a.node.contains(document.activeElement);\n                if (!included) {\n                    const currentNode = (_c = (_b = app.shell.currentWidget) === null || _b === void 0 ? void 0 : _b.content.node) !== null && _c !== void 0 ? _c : (_d = app.shell.currentWidget) === null || _d === void 0 ? void 0 : _d.node;\n                    currentNode === null || currentNode === void 0 ? void 0 : currentNode.focus();\n                }\n                const options = { commands, trans };\n                return displayShortcuts(options);\n            }\n        });\n        if (palette) {\n            const category = trans.__('Help');\n            palette.addItem({ command: CommandIDs.displayShortcuts, category });\n        }\n    }\n};\n/**\n * The default HTML sanitizer.\n */\nconst sanitizer = {\n    id: '@jupyterlab/apputils-extension:sanitizer',\n    description: 'Provides the HTML sanitizer.',\n    autoStart: true,\n    provides: ISanitizer,\n    requires: [ISettingRegistry],\n    activate: (app, settings) => {\n        const sanitizer = new Sanitizer();\n        const loadSetting = (setting) => {\n            const allowedSchemes = setting.get('allowedSchemes')\n                .composite;\n            const autolink = setting.get('autolink').composite;\n            if (allowedSchemes) {\n                sanitizer.setAllowedSchemes(allowedSchemes);\n            }\n            sanitizer.setAutolink(autolink);\n        };\n        // Wait for the application to be restored and\n        // for the settings for this plugin to be loaded\n        settings\n            .load('@jupyterlab/apputils-extension:sanitizer')\n            .then(setting => {\n            // Read the settings\n            loadSetting(setting);\n            // Listen for your plugin setting changes using Signal\n            setting.changed.connect(loadSetting);\n        })\n            .catch(reason => {\n            console.error(`Failed to load sanitizer settings:`, reason);\n        });\n        return sanitizer;\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    announcements,\n    kernelStatus,\n    notificationPlugin,\n    palette,\n    paletteRestorer,\n    print,\n    resolver,\n    runningSessionsStatus,\n    sanitizer,\n    settingsPlugin,\n    state,\n    splash,\n    sessionDialogs,\n    themesPlugin,\n    themesPaletteMenuPlugin,\n    toggleHeader,\n    toolbarRegistry,\n    utilityCommands,\n    workspacesPlugin\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["COMMAND_HELP_OPEN","PRIVACY_URL","async","requestAPI","endpoint","init","settings","ServerConnection","makeSettings","requestUrl","URLExt","join","baseUrl","response","makeRequest","error","NetworkError","data","json","ok","ResponseError","message","announcements","id","description","autoStart","optional","ISettingRegistry","ITranslator","activate","app","settingRegistry","translator","_a","CONFIG_SECTION_NAME","replace","Promise","all","restored","load","resolve","ConfigSection","create","name","then","_","config","trans","nullTranslator","Notification","manager","changed","connect","change","type","tags","notification","options","some","tag","includes","update","seen","dismissed","catch","reason","console","get","composite","notificationId","emit","__","autoClose","actions","label","caption","callback","event","preventDefault","commands","hasCommand","execute","text","url","window","open","displayType","dismiss","fetchNews","set","_b","_c","_d","link","news","state","length","push","log","CommandIDs","NotificationCenter","props","onClose","notifications","setNotifications","icons","setIcons","onChanged","map","n","Object","freeze","count","disconnect","Private","getIcons","toastifyIcons","r","UseSignal","signal","className","_n","ToolbarButtonComponent","actualOnClick","onClick","icon","deleteIcon","tooltip","enabled","closeIcon","toastType","closeNotification","spinner","key","stopPropagation","theme","createContent","CloseButton","close","react","title","closeIconMargin","display","notify","NotificationStatusModel","VDomModel","constructor","super","this","_highlight","_listOpened","_doNotDisturbMode","_count","onNotificationChanged","doNotDisturbMode","v","highlight","listOpened","stateChanged","noToast","NotificationStatus","GroupItem","spacing","TextItem","source","bellIcon","top","stylesheet","notificationPlugin","IStatusBar","statusBar","model","plugin","updateSettings","addCommand","args","action","commandId","popup","notificationList","ReactWidget","dispose","addClass","isDisposed","createToast","toast","isActive","closeToast","isLoading","render","t","displayNotifications","showPopup","body","anchor","notificationStatus","align","hasDynamicSize","startHidden","finally","launch","node","focus","disposed","removeClass","registerStatusItem","item","rank","toastify","ToastifyCloseButton","waitForToastify","PromiseDelegate","promise","container","document","appendChild","createElement","ToastContainer","draggable","closeOnClick","hideProgressBar","newestOnTop","pauseOnFocusLoss","pauseOnHover","position","transition","Slide","closeButton","Icons","displayType2Class","accent","warn","default","ToastButton","classes","Button","defaultPrevented","small","closeHandler","shortenMessage","slice","split","part","index","idx","toastId","undefined","Palette","palette","_palette","placeholder","inputNode","addItem","DisposableDelegate","removeItem","shell","createPalette","modalPalette","ModalCommandPalette","commandPalette","modal","setAttribute","add","loadSettings","newModal","parent","detach","show","attach","updatePaletteTitle","binding","find","keyBindings","b","command","ks","keys","CommandRegistry","formatKeystroke","keyBindingChanged","activateById","restore","restorer","CommandPalette","renderer","CommandPaletteSvg","defaultRenderer","paletteIcon","SettingConnector","DataConnector","connector","_throttlers","_connector","fetch","throttlers","Throttler","invoke","list","query","isDeferred","isDisabled","PageConfig","Extension","ids","values","filter","save","raw","settingsPlugin","serviceManager","registry","SettingRegistry","plugins","value","hasPlugin","forEach","isPluginActivated","provides","kernelStatus","requires","IKernelStatusModel","ISessionContextDialogs","ILabShell","sessionDialogs_","translator_","labShell","sessionDialogs","SessionContextDialogs","KernelStatus","sessionContext","selectKernel","providers","Set","updateSession","changes","oldValue","newValue","onTitleChanged","provider","session","activityName","currentChanged","addSessionProvider","currentWidget","runningSessionsStatus","RunningSessions","sessions","Array","from","running","terminals","changeTheme","themeScrollbars","changeFont","incrFontSize","decrFontSize","themesPlugin","JupyterFrontEnd","IPaths","ISplashScreen","paths","splash","host","getBaseUrl","urls","themes","ThemeManager","currentTheme","scrollbarsStyleElement","themeChanged","sender","dataset","jpThemeLight","String","isLight","jpThemeName","jpThemeScrollbars","style","createTextNode","createStyleSheet","parentElement","removeChild","notifyCommandChanged","displayName","getDisplayName","isToggled","setTheme","isToggledThemeScrollbars","toggleThemeScrollbars","isEnabled","getCSS","setCSSOverride","IThemeManager","themesPaletteMenuPlugin","ICommandPalette","IMainMenu","mainMenu","themeMenu","settingsMenu","items","submenu","insertItem","isPalette","category","toolbarRegistry","IToolbarWidgetRegistry","ToolbarWidgetRegistry","defaultFactory","createDefaultFactory","saveWorkspace","saveWorkspaceAs","WORKSPACE_NAME","WORKSPACE_EXT","LAST_SAVE_ID","workspacesPlugin","IDefaultFileBrowser","IWindowResolver","IStateDB","IRouter","fileBrowser","resolver","router","factory","WorkspaceFactory","workspaces","docRegistry","addFileType","contentType","fileFormat","extensions","mimeTypes","iconClass","addWidgetFactory","saveAs","contents","lastSave","userPath","pop","resolvedData","metadata","format","content","JSON","stringify","browser","defaultName","defaultPath","path","saveBtn","Dialog","okButton","ariaLabel","result","showDialog","SaveWidget","buttons","cancelButton","button","getSavePath","ABCWidgetFactory","fileTypes","defaultFor","readOnly","_application","_router","_state","_workspaces","createNewWidget","context","ready","workspace","toJSON","navigate","hard","location","href","widget","DocumentWidget","Widget","dummyWidget","createSaveNode","getValue","input","SHORTCUT_TABLE_ITEM_CLASS","loadState","print","reset","resetOnLoad","runFirstEnabled","runAllEnabled","toggleHeader","displayShortcuts","paletteRestorer","ILayoutRestorer","hash","search","current","queryStringToObject","solver","WindowResolver","getOption","treePath","mode","candidate","defaultWorkspace","rest","base","random","Math","floor","pool","encodeParts","objectToQueryString","galaxy","logo","dialog","jupyterFaviconIcon","element","moon","planet","recovery","warnButton","accept","requestAnimationFrame","limit","edge","splashCount","light","classList","remove","toggle","stop","setTimeout","Printing","getPrintFunction","printFunction","MainAreaWidget","contentHeader","widgets","isHidden","setHidden","StateDB","resolved","transform","db","Debouncer","main","startsWith","currentFile","PathExt","basename","decodeURIComponent","concat","updateTabTitle","clone","saved","cloned","reload","clear","cleared","register","pattern","utilityCommands","commandArgs","argList","isArray","i","cmd","arg","errorIfNotEnabled","contains","activeElement","currentNode","elt","formatKeys","topContainer","ch","chIndex","formatLabel","automaticLabel","capitalizedLabel","str","charAt","toUpperCase","matchDistance","selector","targ","dist","hasAttribute","matches","activeBindings","Map","kb","distance","formatted","has","oldBinding","Selector","calculateSpecificity","maxDistance","groupedBindings","max","bindingTable","d","sanitizer","ISanitizer","Sanitizer","loadSetting","setting","allowedSchemes","autolink","setAllowedSchemes","setAutolink","m","exports","createRoot","hydrateRoot"],"sourceRoot":""}