{"version":3,"file":"6695.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/celldragutils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/collapser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/headerfooter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/inputarea.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/attachments/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/placeholder.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/searchprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/resizeHandle.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/widget.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { h, VirtualDOM } from '@lumino/virtualdom';\n/**\n * Constants for drag\n */\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\nexport var CellDragUtils;\n(function (CellDragUtils) {\n    /**\n     * Find the cell index containing the target html element.\n     * This function traces up the DOM hierarchy to find the root cell\n     * node. Then find the corresponding child and select it.\n     *\n     * @param node - the cell node or a child of the cell node.\n     * @param cells - an iterable of Cells\n     * @param isCellNode - a function that takes in a node and checks if\n     * it is a cell node.\n     *\n     * @returns index of the cell we're looking for. Returns -1 if\n     * the cell is not founds\n     */\n    function findCell(node, cells, isCellNode) {\n        let cellIndex = -1;\n        while (node && node.parentElement) {\n            if (isCellNode(node)) {\n                let index = -1;\n                for (const cell of cells) {\n                    if (cell.node === node) {\n                        cellIndex = ++index;\n                        break;\n                    }\n                }\n                break;\n            }\n            node = node.parentElement;\n        }\n        return cellIndex;\n    }\n    CellDragUtils.findCell = findCell;\n    /**\n     * Detect which part of the cell triggered the MouseEvent\n     *\n     * @param cell - The cell which contains the MouseEvent's target\n     * @param target - The DOM node which triggered the MouseEvent\n     */\n    function detectTargetArea(cell, target) {\n        var _a, _b;\n        let targetArea;\n        if (cell) {\n            if ((_a = cell.editorWidget) === null || _a === void 0 ? void 0 : _a.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if ((_b = cell.promptNode) === null || _b === void 0 ? void 0 : _b.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'unknown';\n        }\n        return targetArea;\n    }\n    CellDragUtils.detectTargetArea = detectTargetArea;\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    function shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n    }\n    CellDragUtils.shouldStartDrag = shouldStartDrag;\n    /**\n     * Create an image for the cell(s) to be dragged\n     *\n     * @param activeCell - The cell from where the drag event is triggered\n     * @param selectedCells - The cells to be dragged\n     */\n    function createCellDragImage(activeCell, selectedCells) {\n        const count = selectedCells.length;\n        let promptNumber;\n        if (activeCell.model.type === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            promptNumber = ' ';\n            if (executionCount) {\n                promptNumber = executionCount.toString();\n            }\n        }\n        else {\n            promptNumber = '';\n        }\n        const cellContent = activeCell.model.sharedModel\n            .getSource()\n            .split('\\n')[0]\n            .slice(0, 26);\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    CellDragUtils.createCellDragImage = createCellDragImage;\n})(CellDragUtils || (CellDragUtils = {}));\n//# sourceMappingURL=celldragutils.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReactWidget } from '@jupyterlab/ui-components';\nimport { ElementExt } from '@lumino/domutils';\nimport * as React from 'react';\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport class Collapser extends ReactWidget {\n    /**\n     * Construct a new collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(COLLAPSER_CLASS);\n    }\n    /**\n     * Is the input/output of the parent collapsed.\n     */\n    get collapsed() {\n        return false;\n    }\n    /**\n     * Render the collapser with the virtual DOM.\n     */\n    render() {\n        const childClass = COLLAPSER_CHILD_CLASS;\n        return React.createElement(\"div\", { className: childClass, onClick: e => this.handleClick(e) });\n    }\n}\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n    /**\n     * Construct a new input collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(INPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's input collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.inputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's input.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.inputHidden = !cell.inputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n    /**\n     * Construct a new output collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(OUTPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's output collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.outputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's output.\n     */\n    handleClick(e) {\n        var _a, _b;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.outputHidden = !cell.outputHidden;\n            /* Scroll cell into view after output collapse */\n            if (cell.outputHidden) {\n                let area = (_b = cell.parent) === null || _b === void 0 ? void 0 : _b.node;\n                if (area) {\n                    ElementExt.scrollIntoViewIfNeeded(area, cell.node);\n                }\n            }\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n//# sourceMappingURL=collapser.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-CellHeader';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-CellFooter';\n/**\n * Default implementation of a cell header.\n */\nexport class CellHeader extends Widget {\n    /**\n     * Construct a new cell header.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_HEADER_CLASS);\n    }\n}\n/**\n * Default implementation of a cell footer.\n */\nexport class CellFooter extends Widget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_FOOTER_CLASS);\n    }\n}\n//# sourceMappingURL=headerfooter.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditorWrapper } from '@jupyterlab/codeeditor';\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n/** ****************************************************************************\n * InputArea\n ******************************************************************************/\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n    /**\n     * Construct an input area widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass(INPUT_AREA_CLASS);\n        const { contentFactory, editorOptions, model } = options;\n        this.model = model;\n        this.contentFactory = contentFactory;\n        // Prompt\n        const prompt = (this._prompt = contentFactory.createInputPrompt());\n        prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n        // Editor\n        const editor = (this._editor = new CodeEditorWrapper({\n            factory: contentFactory.editorFactory,\n            model,\n            editorOptions\n        }));\n        editor.addClass(INPUT_AREA_EDITOR_CLASS);\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(prompt);\n        layout.addWidget(editor);\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._editor;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._editor.editor;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        return this._prompt.node;\n    }\n    /**\n     * Get the rendered input area widget, if any.\n     */\n    get renderedInput() {\n        return this._rendered;\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        const layout = this.layout;\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.hide();\n        this._rendered = widget;\n        layout.addWidget(widget);\n    }\n    /**\n     * Show the text editor.\n     */\n    showEditor() {\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.show();\n    }\n    /**\n     * Set the prompt of the input area.\n     */\n    setPrompt(value) {\n        this._prompt.executionCount = value;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._prompt = null;\n        this._editor = null;\n        this._rendered = null;\n        super.dispose();\n    }\n}\n/**\n * A namespace for `InputArea` statics.\n */\n(function (InputArea) {\n    /**\n     * Default implementation of `IContentFactory`.\n     *\n     * This defaults to using an `editorFactory` based on CodeMirror.\n     */\n    class ContentFactory {\n        /**\n         * Construct a `ContentFactory`.\n         */\n        constructor(options) {\n            this._editor = options.editorFactory;\n        }\n        /**\n         * Return the `CodeEditor.Factory` being used.\n         */\n        get editorFactory() {\n            return this._editor;\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n    }\n    InputArea.ContentFactory = ContentFactory;\n})(InputArea || (InputArea = {}));\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(INPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = ' ';\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { AttachmentModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IAttachmentsModel.\n */\nexport class AttachmentsModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options) {\n        var _a;\n        this._map = new ObservableMap();\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._serialized = null;\n        this._changeGuard = false;\n        this.contentFactory =\n            (_a = options.contentFactory) !== null && _a !== void 0 ? _a : AttachmentsModel.defaultContentFactory;\n        if (options.values) {\n            for (const key of Object.keys(options.values)) {\n                if (options.values[key] !== undefined) {\n                    this.set(key, options.values[key]);\n                }\n            }\n        }\n        this._map.changed.connect(this._onMapChanged, this);\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The keys of the attachments in the model.\n     */\n    get keys() {\n        return this._map.keys();\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this._map.keys().length;\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._map.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the specified key is set.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get an item at the specified key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Set the value at the specified key.\n     */\n    set(key, value) {\n        // Normalize stream data.\n        const item = this._createItem({ value });\n        this._map.set(key, item);\n    }\n    /**\n     * Remove the attachment whose name is the specified key\n     */\n    remove(key) {\n        this._map.delete(key);\n    }\n    /**\n     * Clear all of the attachments.\n     */\n    clear() {\n        this._map.values().forEach((item) => {\n            item.dispose();\n        });\n        this._map.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        Object.keys(values).forEach(key => {\n            if (values[key] !== undefined) {\n                this.set(key, values[key]);\n            }\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const ret = {};\n        for (const key of this._map.keys()) {\n            ret[key] = this._map.get(key).toJSON();\n        }\n        return ret;\n    }\n    /**\n     * Create an attachment item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createAttachmentModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onMapChanged(sender, args) {\n        if (this._serialized && !this._changeGuard) {\n            this._changeGuard = true;\n            this._serialized.set(this.toJSON());\n            this._changeGuard = false;\n        }\n        this._changed.emit(args);\n        this._stateChanged.emit(void 0);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for AttachmentsModel class statics.\n */\n(function (AttachmentsModel) {\n    /**\n     * The default implementation of a `IAttachmentsModel.IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachment model.\n         */\n        createAttachmentModel(options) {\n            return new AttachmentModel(options);\n        }\n    }\n    AttachmentsModel.ContentFactory = ContentFactory;\n    /**\n     * The default attachment model factory.\n     */\n    AttachmentsModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsModel || (AttachmentsModel = {}));\n/**\n * A resolver for cell attachments 'attachment:filename'.\n *\n * Will resolve to a data: url.\n */\nexport class AttachmentsResolver {\n    /**\n     * Create an attachments resolver object.\n     */\n    constructor(options) {\n        this._parent = options.parent || null;\n        this._model = options.model;\n    }\n    /**\n     * Resolve a relative url to a correct server path.\n     */\n    async resolveUrl(url) {\n        if (this._parent && !url.startsWith('attachment:')) {\n            return this._parent.resolveUrl(url);\n        }\n        return url;\n    }\n    /**\n     * Get the download url of a given absolute server path.\n     *\n     * #### Notes\n     * The returned URL may include a query parameter.\n     */\n    async getDownloadUrl(path) {\n        if (this._parent && !path.startsWith('attachment:')) {\n            return this._parent.getDownloadUrl(path);\n        }\n        // Return a data URL with the data of the url\n        const key = path.slice('attachment:'.length);\n        const attachment = this._model.get(key);\n        if (attachment === undefined) {\n            // Resolve with unprocessed path, to show as broken image\n            return path;\n        }\n        const { data } = attachment;\n        const mimeType = Object.keys(data)[0];\n        // Only support known safe types:\n        if (mimeType === undefined ||\n            imageRendererFactory.mimeTypes.indexOf(mimeType) === -1) {\n            throw new Error(`Cannot render unknown image mime type \"${mimeType}\".`);\n        }\n        const dataUrl = `data:${mimeType};base64,${data[mimeType]}`;\n        return dataUrl;\n    }\n    /**\n     * Whether the URL should be handled by the resolver\n     * or not.\n     */\n    isLocal(url) {\n        var _a, _b, _c;\n        if (this._parent && !url.startsWith('attachment:')) {\n            return (_c = (_b = (_a = this._parent).isLocal) === null || _b === void 0 ? void 0 : _b.call(_a, url)) !== null && _c !== void 0 ? _c : true;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Signal } from '@lumino/signaling';\nimport { AttachmentsModel } from '@jupyterlab/attachments';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nimport { createMutex, createStandaloneCell } from '@jupyter/ydoc';\nconst globalModelDBMutex = createMutex();\nexport function isCodeCellModel(model) {\n    return model.type === 'code';\n}\nexport function isMarkdownCellModel(model) {\n    return model.type === 'markdown';\n}\nexport function isRawCellModel(model) {\n    return model.type === 'raw';\n}\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model {\n    constructor(options = {}) {\n        const { cell_type, sharedModel, ...others } = options;\n        super({\n            sharedModel: sharedModel !== null && sharedModel !== void 0 ? sharedModel : createStandaloneCell({\n                cell_type: cell_type !== null && cell_type !== void 0 ? cell_type : 'raw',\n                id: options.id\n            }),\n            ...others\n        });\n        /**\n         * A signal emitted when the state of the model changes.\n         */\n        this.contentChanged = new Signal(this);\n        /**\n         * A signal emitted when a model state changes.\n         */\n        this.stateChanged = new Signal(this);\n        this._metadataChanged = new Signal(this);\n        this._trusted = false;\n        this.standaloneModel = typeof options.sharedModel === 'undefined';\n        this.trusted = !!this.getMetadata('trusted') || !!options.trusted;\n        this.sharedModel.changed.connect(this.onGenericChange, this);\n        this.sharedModel.metadataChanged.connect(this._onMetadataChanged, this);\n    }\n    /**\n     * Signal emitted when cell metadata changes.\n     */\n    get metadataChanged() {\n        return this._metadataChanged;\n    }\n    /**\n     * The id for the cell.\n     */\n    get id() {\n        return this.sharedModel.getId();\n    }\n    /**\n     * The metadata associated with the cell.\n     */\n    get metadata() {\n        return this.sharedModel.metadata;\n    }\n    /**\n     * The trusted state of the model.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    set trusted(newValue) {\n        const oldValue = this.trusted;\n        if (oldValue !== newValue) {\n            this._trusted = newValue;\n            this.onTrustedChanged(this, { newValue, oldValue });\n        }\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.sharedModel.changed.disconnect(this.onGenericChange, this);\n        this.sharedModel.metadataChanged.disconnect(this._onMetadataChanged, this);\n        super.dispose();\n    }\n    /**\n     * Handle a change to the trusted state.\n     *\n     * The default implementation is a no-op.\n     */\n    onTrustedChanged(trusted, args) {\n        /* no-op */\n    }\n    /**\n     * Delete a metadata\n     *\n     * @param key Metadata key\n     */\n    deleteMetadata(key) {\n        return this.sharedModel.deleteMetadata(key);\n    }\n    /**\n     * Get a metadata\n     *\n     * ### Notes\n     * This returns a copy of the key value.\n     *\n     * @param key Metadata key\n     */\n    getMetadata(key) {\n        return this.sharedModel.getMetadata(key);\n    }\n    /**\n     * Set a metadata\n     *\n     * @param key Metadata key\n     * @param value Metadata value\n     */\n    setMetadata(key, value) {\n        if (typeof value === 'undefined') {\n            this.sharedModel.deleteMetadata(key);\n        }\n        else {\n            this.sharedModel.setMetadata(key, value);\n        }\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return this.sharedModel.toJSON();\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        this.contentChanged.emit(void 0);\n    }\n    _onMetadataChanged(sender, change) {\n        this._metadataChanged.emit(change);\n    }\n}\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n    /**\n     * Construct a new cell with optional attachments.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        const factory = (_a = options.contentFactory) !== null && _a !== void 0 ? _a : AttachmentsCellModel.defaultContentFactory;\n        const values = this.sharedModel.getAttachments();\n        this._attachments = factory.createAttachmentsModel({ values });\n        this._attachments.stateChanged.connect(this.onGenericChange, this);\n        this._attachments.changed.connect(this._onAttachmentsChange, this);\n        this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n    }\n    /**\n     * Get the attachments of the model.\n     */\n    get attachments() {\n        return this._attachments;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._attachments.stateChanged.disconnect(this.onGenericChange, this);\n        this._attachments.changed.disconnect(this._onAttachmentsChange, this);\n        this._attachments.dispose();\n        this.sharedModel.changed.disconnect(this._onSharedModelChanged, this);\n        super.dispose();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return super.toJSON();\n    }\n    /**\n     * Handle a change to the cell outputs modelDB and reflect it in the shared model.\n     */\n    _onAttachmentsChange(sender, event) {\n        const cell = this.sharedModel;\n        globalModelDBMutex(() => cell.setAttachments(sender.toJSON()));\n    }\n    /**\n     * Handle a change to the code cell value.\n     */\n    _onSharedModelChanged(slot, change) {\n        if (change.attachmentsChange) {\n            const cell = this.sharedModel;\n            globalModelDBMutex(() => { var _a; return this._attachments.fromJSON((_a = cell.getAttachments()) !== null && _a !== void 0 ? _a : {}); });\n        }\n    }\n}\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\n(function (AttachmentsCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachments model.\n         */\n        createAttachmentsModel(options) {\n            return new AttachmentsModel(options);\n        }\n    }\n    AttachmentsCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    AttachmentsCellModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsCellModel || (AttachmentsCellModel = {}));\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a raw cell model from optional shared model.\n     */\n    constructor(options = {}) {\n        super({\n            cell_type: 'raw',\n            ...options\n        });\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return super.toJSON();\n    }\n}\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a markdown cell model from optional shared model.\n     */\n    constructor(options = {}) {\n        super({\n            cell_type: 'markdown',\n            ...options\n        });\n        // Use the Github-flavored markdown mode.\n        this.mimeType = 'text/x-ipythongfm';\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return super.toJSON();\n    }\n}\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel {\n    /**\n     * Construct a new code cell with optional original cell content.\n     */\n    constructor(options = {}) {\n        var _a;\n        super({\n            cell_type: 'code',\n            ...options\n        });\n        this._executedCode = '';\n        this._isDirty = false;\n        const factory = (_a = options === null || options === void 0 ? void 0 : options.contentFactory) !== null && _a !== void 0 ? _a : CodeCellModel.defaultContentFactory;\n        const trusted = this.trusted;\n        const outputs = this.sharedModel.getOutputs();\n        this._outputs = factory.createOutputArea({ trusted, values: outputs });\n        this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n        this._outputs.changed.connect(this.onGenericChange, this);\n        this._outputs.changed.connect(this.onOutputsChange, this);\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'code';\n    }\n    /**\n     * The execution count of the cell.\n     */\n    get executionCount() {\n        return this.sharedModel.execution_count || null;\n    }\n    set executionCount(newValue) {\n        this.sharedModel.execution_count = newValue || null;\n    }\n    /**\n     * Whether the cell is dirty or not.\n     *\n     * A cell is dirty if it is output is not empty and does not\n     * result of the input code execution.\n     */\n    get isDirty() {\n        // Test could be done dynamically with this._executedCode\n        // but for performance reason, the diff status is stored in a boolean.\n        return this._isDirty;\n    }\n    /**\n     * The cell outputs.\n     */\n    get outputs() {\n        return this._outputs;\n    }\n    clearExecution() {\n        this.outputs.clear();\n        this.executionCount = null;\n        this._setDirty(false);\n        this.sharedModel.deleteMetadata('execution');\n        // We trust this cell as it no longer has any outputs.\n        this.trusted = true;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.sharedModel.changed.disconnect(this._onSharedModelChanged, this);\n        this._outputs.changed.disconnect(this.onGenericChange, this);\n        this._outputs.changed.disconnect(this.onOutputsChange, this);\n        this._outputs.dispose();\n        this._outputs = null;\n        super.dispose();\n    }\n    /**\n     * Handle a change to the trusted state.\n     */\n    onTrustedChanged(trusted, args) {\n        const newTrusted = args.newValue;\n        if (this._outputs) {\n            this._outputs.trusted = newTrusted;\n        }\n        if (newTrusted) {\n            const codeCell = this.sharedModel;\n            const metadata = codeCell.getMetadata();\n            metadata.trusted = true;\n            codeCell.setMetadata(metadata);\n        }\n        this.stateChanged.emit({\n            name: 'trusted',\n            oldValue: args.oldValue,\n            newValue: newTrusted\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return super.toJSON();\n    }\n    /**\n     * Handle a change to the cell outputs modelDB and reflect it in the shared model.\n     */\n    onOutputsChange(sender, event) {\n        const codeCell = this.sharedModel;\n        globalModelDBMutex(() => {\n            switch (event.type) {\n                case 'add': {\n                    const outputs = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.newIndex, event.newIndex, outputs);\n                    break;\n                }\n                case 'set': {\n                    const newValues = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.oldIndex, event.oldIndex + newValues.length, newValues);\n                    break;\n                }\n                case 'remove':\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length);\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n        });\n    }\n    /**\n     * Handle a change to the code cell value.\n     */\n    _onSharedModelChanged(slot, change) {\n        if (change.outputsChange) {\n            globalModelDBMutex(() => {\n                this.outputs.clear();\n                slot.getOutputs().forEach(output => this._outputs.add(output));\n            });\n        }\n        if (change.executionCountChange) {\n            if (change.executionCountChange.newValue &&\n                (this.isDirty || !change.executionCountChange.oldValue)) {\n                this._setDirty(false);\n            }\n            this.stateChanged.emit({\n                name: 'executionCount',\n                oldValue: change.executionCountChange.oldValue,\n                newValue: change.executionCountChange.newValue\n            });\n        }\n        if (change.sourceChange && this.executionCount !== null) {\n            this._setDirty(this._executedCode !== this.sharedModel.getSource().trim());\n        }\n    }\n    /**\n     * Set whether the cell is dirty or not.\n     */\n    _setDirty(v) {\n        if (!v) {\n            this._executedCode = this.sharedModel.getSource().trim();\n        }\n        if (v !== this._isDirty) {\n            this._isDirty = v;\n            this.stateChanged.emit({\n                name: 'isDirty',\n                oldValue: !v,\n                newValue: v\n            });\n        }\n    }\n}\n/**\n * The namespace for `CodeCellModel` statics.\n */\n(function (CodeCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output area.\n         */\n        createOutputArea(options) {\n            return new OutputAreaModel(options);\n        }\n    }\n    CodeCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    CodeCellModel.defaultContentFactory = new ContentFactory();\n})(CodeCellModel || (CodeCellModel = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The CSS class added to placeholders.\n */\nconst PLACEHOLDER_CLASS = 'jp-Placeholder';\n/**\n * The CSS classes added to input placeholder prompts.\n */\nconst INPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-InputPrompt';\n/**\n * The CSS classes added to output placeholder prompts.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-OutputPrompt';\n/**\n * The CSS class added to placeholder content.\n */\nconst CONTENT_CLASS = 'jp-Placeholder-content';\n/**\n * The CSS class added to input placeholders.\n */\nconst INPUT_PLACEHOLDER_CLASS = 'jp-InputPlaceholder';\n/**\n * The CSS class added to output placeholders.\n */\nconst OUTPUT_PLACEHOLDER_CLASS = 'jp-OutputPlaceholder';\n/**\n * An base class for placeholders\n *\n * ### Notes\n * A placeholder is the element that is shown when input/output\n * is hidden.\n */\nexport class Placeholder extends Widget {\n    /**\n     * Construct a new placeholder.\n     */\n    constructor(options) {\n        var _a, _b, _c;\n        const node = document.createElement('div');\n        super({ node });\n        const trans = ((_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator).load('jupyterlab');\n        const innerNode = document.createElement('div');\n        innerNode.className = (_b = options.promptClass) !== null && _b !== void 0 ? _b : '';\n        node.insertAdjacentHTML('afterbegin', innerNode.outerHTML);\n        this._cell = document.createElement('div');\n        this._cell.classList.add(CONTENT_CLASS);\n        this._cell.title = trans.__('Click to expand');\n        const container = this._cell.appendChild(document.createElement('div'));\n        container.classList.add('jp-Placeholder-contentContainer');\n        this._textContent = container.appendChild(document.createElement('span'));\n        this._textContent.className = 'jp-PlaceholderText';\n        this._textContent.innerText = (_c = options.text) !== null && _c !== void 0 ? _c : '';\n        node.appendChild(this._cell);\n        ellipsesIcon.element({\n            container: container.appendChild(document.createElement('span')),\n            className: 'jp-MoreHorizIcon',\n            elementPosition: 'center',\n            height: 'auto',\n            width: '32px'\n        });\n        this.addClass(PLACEHOLDER_CLASS);\n        this._callback = options.callback;\n    }\n    /**\n     * The text displayed in the placeholder.\n     */\n    set text(t) {\n        this._textContent.innerText = t;\n    }\n    get text() {\n        return this._textContent.innerText;\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.node.addEventListener('click', this._callback);\n    }\n    onBeforeDetach(msg) {\n        this.node.removeEventListener('click', this._callback);\n        super.onBeforeDetach(msg);\n    }\n}\n/**\n * The input placeholder class.\n */\nexport class InputPlaceholder extends Placeholder {\n    /**\n     * Construct a new input placeholder.\n     */\n    constructor(options) {\n        super({ ...options, promptClass: INPUT_PROMPT_CLASS });\n        this.addClass(INPUT_PLACEHOLDER_CLASS);\n    }\n}\n/**\n * The output placeholder class.\n */\nexport class OutputPlaceholder extends Placeholder {\n    /**\n     * Construct a new output placeholder.\n     */\n    constructor(options) {\n        super({ ...options, promptClass: OUTPUT_PROMPT_CLASS });\n        this.addClass(OUTPUT_PLACEHOLDER_CLASS);\n    }\n}\n//# sourceMappingURL=placeholder.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { EditorSearchProvider } from '@jupyterlab/codemirror';\nimport { signalToPromise } from '@jupyterlab/coreutils';\nimport { GenericSearchProvider } from '@jupyterlab/documentsearch';\n/**\n * Class applied on highlighted search matches\n */\nexport const SELECTED_HIGHLIGHT_CLASS = 'jp-mod-selected';\n/**\n * Search provider for cells.\n */\nexport class CellSearchProvider extends EditorSearchProvider {\n    constructor(cell) {\n        super();\n        this.cell = cell;\n        if (!this.cell.inViewport && !this.cell.editor) {\n            void signalToPromise(cell.inViewportChanged).then(([, inViewport]) => {\n                if (inViewport) {\n                    this.cmHandler.setEditor(this.editor);\n                }\n            });\n        }\n    }\n    /**\n     * Text editor\n     */\n    get editor() {\n        return this.cell.editor;\n    }\n    /**\n     * Editor content model\n     */\n    get model() {\n        return this.cell.model;\n    }\n}\n/**\n * Code cell search provider\n */\nclass CodeCellSearchProvider extends CellSearchProvider {\n    /**\n     * Constructor\n     *\n     * @param cell Cell widget\n     */\n    constructor(cell) {\n        super(cell);\n        this.currentProviderIndex = -1;\n        this.outputsProvider = [];\n        const outputs = this.cell.outputArea;\n        this._onOutputsChanged(outputs, outputs.widgets.length).catch(reason => {\n            console.error(`Failed to initialize search on cell outputs.`, reason);\n        });\n        outputs.outputLengthChanged.connect(this._onOutputsChanged, this);\n        outputs.disposed.connect(() => {\n            outputs.outputLengthChanged.disconnect(this._onOutputsChanged);\n        }, this);\n    }\n    /**\n     * Number of matches in the cell.\n     */\n    get matchesCount() {\n        if (!this.isActive) {\n            return 0;\n        }\n        return (super.matchesCount +\n            this.outputsProvider.reduce((sum, provider) => { var _a; return sum + ((_a = provider.matchesCount) !== null && _a !== void 0 ? _a : 0); }, 0));\n    }\n    /**\n     * Clear currently highlighted match.\n     */\n    async clearHighlight() {\n        await super.clearHighlight();\n        await Promise.all(this.outputsProvider.map(provider => provider.clearHighlight()));\n    }\n    /**\n     * Dispose the search provider\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.outputsProvider.map(provider => {\n            provider.dispose();\n        });\n        this.outputsProvider.length = 0;\n    }\n    /**\n     * Highlight the next match.\n     *\n     * @returns The next match if there is one.\n     */\n    async highlightNext(loop, options) {\n        if (this.matchesCount === 0 || !this.isActive) {\n            this.currentIndex = null;\n        }\n        else {\n            if (this.currentProviderIndex === -1) {\n                const match = await super.highlightNext(true, options);\n                if (match) {\n                    this.currentIndex = this.cmHandler.currentIndex;\n                    return match;\n                }\n                else {\n                    this.currentProviderIndex = 0;\n                }\n            }\n            while (this.currentProviderIndex < this.outputsProvider.length) {\n                const provider = this.outputsProvider[this.currentProviderIndex];\n                const match = await provider.highlightNext(false);\n                if (match) {\n                    this.currentIndex =\n                        super.matchesCount +\n                            this.outputsProvider\n                                .slice(0, this.currentProviderIndex)\n                                .reduce((sum, provider) => { var _a; return (sum += (_a = provider.matchesCount) !== null && _a !== void 0 ? _a : 0); }, 0) +\n                            provider.currentMatchIndex;\n                    return match;\n                }\n                else {\n                    this.currentProviderIndex += 1;\n                }\n            }\n            this.currentProviderIndex = -1;\n            this.currentIndex = null;\n            return undefined;\n        }\n    }\n    /**\n     * Highlight the previous match.\n     *\n     * @returns The previous match if there is one.\n     */\n    async highlightPrevious() {\n        if (this.matchesCount === 0 || !this.isActive) {\n            this.currentIndex = null;\n        }\n        else {\n            if (this.currentIndex === null) {\n                this.currentProviderIndex = this.outputsProvider.length - 1;\n            }\n            while (this.currentProviderIndex >= 0) {\n                const provider = this.outputsProvider[this.currentProviderIndex];\n                const match = await provider.highlightPrevious(false);\n                if (match) {\n                    this.currentIndex =\n                        super.matchesCount +\n                            this.outputsProvider\n                                .slice(0, this.currentProviderIndex)\n                                .reduce((sum, provider) => { var _a; return (sum += (_a = provider.matchesCount) !== null && _a !== void 0 ? _a : 0); }, 0) +\n                            provider.currentMatchIndex;\n                    return match;\n                }\n                else {\n                    this.currentProviderIndex -= 1;\n                }\n            }\n            const match = await super.highlightPrevious();\n            if (match) {\n                this.currentIndex = this.cmHandler.currentIndex;\n                return match;\n            }\n            else {\n                this.currentIndex = null;\n                return undefined;\n            }\n        }\n    }\n    /**\n     * Initialize the search using the provided options. Should update the UI to highlight\n     * all matches and \"select\" the first match.\n     *\n     * @param query A RegExp to be use to perform the search\n     * @param filters Filter parameters to pass to provider\n     */\n    async startQuery(query, filters) {\n        await super.startQuery(query, filters);\n        // Search outputs\n        if ((filters === null || filters === void 0 ? void 0 : filters.output) !== false && this.isActive) {\n            await Promise.all(this.outputsProvider.map(provider => provider.startQuery(query)));\n        }\n    }\n    async endQuery() {\n        var _a;\n        await super.endQuery();\n        if (((_a = this.filters) === null || _a === void 0 ? void 0 : _a.output) !== false && this.isActive) {\n            await Promise.all(this.outputsProvider.map(provider => provider.endQuery()));\n        }\n    }\n    async _onOutputsChanged(outputArea, changes) {\n        var _a;\n        this.outputsProvider.forEach(provider => {\n            provider.dispose();\n        });\n        this.outputsProvider.length = 0;\n        this.currentProviderIndex = -1;\n        this.outputsProvider = this.cell.outputArea.widgets.map(output => new GenericSearchProvider(output));\n        if (this.isActive && this.query && ((_a = this.filters) === null || _a === void 0 ? void 0 : _a.output) !== false) {\n            await Promise.all([\n                this.outputsProvider.map(provider => {\n                    void provider.startQuery(this.query);\n                })\n            ]);\n        }\n        this._stateChanged.emit();\n    }\n}\n/**\n * Markdown cell search provider\n */\nclass MarkdownCellSearchProvider extends CellSearchProvider {\n    /**\n     * Constructor\n     *\n     * @param cell Cell widget\n     */\n    constructor(cell) {\n        super(cell);\n        this._unrenderedByHighligh = false;\n        this.renderedProvider = new GenericSearchProvider(cell.renderer);\n    }\n    /**\n     * Clear currently highlighted match\n     */\n    async clearHighlight() {\n        await super.clearHighlight();\n        await this.renderedProvider.clearHighlight();\n    }\n    /**\n     * Dispose the search provider\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.renderedProvider.dispose();\n    }\n    /**\n     * Stop the search and clean any UI elements.\n     */\n    async endQuery() {\n        await super.endQuery();\n        await this.renderedProvider.endQuery();\n    }\n    /**\n     * Highlight the next match.\n     *\n     * @returns The next match if there is one.\n     */\n    async highlightNext() {\n        let match = undefined;\n        if (!this.isActive) {\n            return match;\n        }\n        const cell = this.cell;\n        if (cell.rendered && this.matchesCount > 0) {\n            // Unrender the cell\n            this._unrenderedByHighligh = true;\n            const waitForRendered = signalToPromise(cell.renderedChanged);\n            cell.rendered = false;\n            await waitForRendered;\n        }\n        match = await super.highlightNext();\n        return match;\n    }\n    /**\n     * Highlight the previous match.\n     *\n     * @returns The previous match if there is one.\n     */\n    async highlightPrevious() {\n        let match = undefined;\n        const cell = this.cell;\n        if (cell.rendered && this.matchesCount > 0) {\n            // Unrender the cell if there are matches within the cell\n            this._unrenderedByHighligh = true;\n            const waitForRendered = signalToPromise(cell.renderedChanged);\n            cell.rendered = false;\n            await waitForRendered;\n        }\n        match = await super.highlightPrevious();\n        return match;\n    }\n    /**\n     * Initialize the search using the provided options. Should update the UI\n     * to highlight all matches and \"select\" the first match.\n     *\n     * @param query A RegExp to be use to perform the search\n     * @param filters Filter parameters to pass to provider\n     */\n    async startQuery(query, filters) {\n        await super.startQuery(query, filters);\n        const cell = this.cell;\n        if (cell.rendered) {\n            this.onRenderedChanged(cell, cell.rendered);\n        }\n        cell.renderedChanged.connect(this.onRenderedChanged, this);\n    }\n    /**\n     * Replace all matches in the cell source with the provided text\n     *\n     * @param newText The replacement text.\n     * @returns Whether a replace occurred.\n     */\n    async replaceAllMatches(newText) {\n        const result = await super.replaceAllMatches(newText);\n        // if the cell is rendered force update\n        if (this.cell.rendered) {\n            this.cell.update();\n        }\n        return result;\n    }\n    /**\n     * Callback on rendered state change\n     *\n     * @param cell Cell that emitted the change\n     * @param rendered New rendered value\n     */\n    onRenderedChanged(cell, rendered) {\n        var _a;\n        if (!this._unrenderedByHighligh) {\n            this.currentIndex = null;\n        }\n        this._unrenderedByHighligh = false;\n        if (this.isActive) {\n            if (rendered) {\n                void this.renderedProvider.startQuery(this.query);\n            }\n            else {\n                // Force cursor position to ensure reverse search is working as expected\n                (_a = cell.editor) === null || _a === void 0 ? void 0 : _a.setCursorPosition({ column: 0, line: 0 });\n                void this.renderedProvider.endQuery();\n            }\n        }\n    }\n}\n/**\n * Factory to create a cell search provider\n *\n * @param cell Cell widget\n * @returns Cell search provider\n */\nexport function createCellSearchProvider(cell) {\n    if (cell.isPlaceholder()) {\n        return new CellSearchProvider(cell);\n    }\n    switch (cell.model.type) {\n        case 'code':\n            return new CodeCellSearchProvider(cell);\n        case 'markdown':\n            return new MarkdownCellSearchProvider(cell);\n        default:\n            return new CellSearchProvider(cell);\n    }\n}\n//# sourceMappingURL=searchprovider.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { Throttler } from '@lumino/polling';\nimport { Widget } from '@lumino/widgets';\nconst RESIZE_HANDLE_CLASS = 'jp-CellResizeHandle';\nconst CELL_RESIZED_CLASS = 'jp-mod-resizedCell';\n/**\n * A handle that allows to change input/output proportions in side-by-side mode.\n */\nexport class ResizeHandle extends Widget {\n    constructor(targetNode) {\n        super();\n        this.targetNode = targetNode;\n        this._isActive = false;\n        this._isDragging = false;\n        this.addClass(RESIZE_HANDLE_CLASS);\n        this._resizer = new Throttler(event => this._resize(event), 50);\n    }\n    /**\n     * Dispose the resizer handle.\n     */\n    dispose() {\n        this._resizer.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     */\n    handleEvent(event) {\n        var _a, _b;\n        switch (event.type) {\n            case 'dblclick':\n                (_a = this.targetNode.parentNode) === null || _a === void 0 ? void 0 : _a.childNodes.forEach(node => {\n                    node.classList.remove(CELL_RESIZED_CLASS);\n                });\n                document.documentElement.style.setProperty('--jp-side-by-side-output-size', `1fr`);\n                this._isActive = false;\n                break;\n            case 'mousedown':\n                this._isDragging = true;\n                if (!this._isActive) {\n                    (_b = this.targetNode.parentNode) === null || _b === void 0 ? void 0 : _b.childNodes.forEach(node => {\n                        node.classList.add(CELL_RESIZED_CLASS);\n                    });\n                    this._isActive = true;\n                }\n                window.addEventListener('mousemove', this);\n                window.addEventListener('mouseup', this);\n                break;\n            case 'mousemove': {\n                if (this._isActive && this._isDragging) {\n                    void this._resizer.invoke(event);\n                }\n                break;\n            }\n            case 'mouseup':\n                this._isDragging = false;\n                window.removeEventListener('mousemove', this);\n                window.removeEventListener('mouseup', this);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.node.addEventListener('dblclick', this);\n        this.node.addEventListener('mousedown', this);\n        super.onAfterAttach(msg);\n    }\n    /**\n     * Handle `before-detach` messages.\n     */\n    onBeforeDetach(msg) {\n        this.node.removeEventListener('dblclick', this);\n        this.node.removeEventListener('mousedown', this);\n        super.onBeforeDetach(msg);\n    }\n    _resize(event) {\n        // Gate the output size ratio between {0.05, 50} as sensible defaults.\n        const { width, x } = this.targetNode.getBoundingClientRect();\n        const position = event.clientX - x;\n        const ratio = width / position - 1;\n        if (0 < ratio) {\n            const normalized = Math.max(Math.min(Math.abs(ratio), 50), 0.05);\n            document.documentElement.style.setProperty('--jp-side-by-side-output-size', `${normalized}fr`);\n        }\n    }\n}\n//# sourceMappingURL=resizeHandle.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { EditorView } from '@codemirror/view';\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\nimport { ActivityMonitor, URLExt } from '@jupyterlab/coreutils';\nimport { OutputArea, OutputPrompt, SimplifiedOutputArea, Stdin } from '@jupyterlab/outputarea';\nimport { imageRendererFactory, MimeModel } from '@jupyterlab/rendermime';\nimport { TableOfContentsUtils } from '@jupyterlab/toc';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { addIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { some } from '@lumino/algorithm';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport { InputCollapser, OutputCollapser } from './collapser';\nimport { CellFooter, CellHeader } from './headerfooter';\nimport { InputArea, InputPrompt } from './inputarea';\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\nimport { ResizeHandle } from './resizeHandle';\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n/**\n * The class name added to the cell when dirty.\n */\nconst DIRTY_CLASS = 'jp-mod-dirty';\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\nconst MARKDOWN_HEADING_COLLAPSED = 'jp-MarkdownHeadingCollapsed';\nconst HEADING_COLLAPSER_CLASS = 'jp-collapseHeadingButton';\nconst SHOW_HIDDEN_CELLS_CLASS = 'jp-showHiddenCellsButton';\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/** ****************************************************************************\n * Cell\n ******************************************************************************/\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n    /**\n     * Construct a new base cell widget.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        this.prompt = '';\n        this._displayChanged = new Signal(this);\n        this._editorConfig = {};\n        this._inputHidden = false;\n        this._inViewportChanged = new Signal(this);\n        this._readOnly = false;\n        this._ready = new PromiseDelegate();\n        this._resizeDebouncer = new Debouncer(() => {\n            this._displayChanged.emit();\n        }, 0);\n        this._syncCollapse = false;\n        this._syncEditable = false;\n        this.addClass(CELL_CLASS);\n        const model = (this._model = options.model);\n        this.contentFactory = options.contentFactory;\n        this.layout = (_a = options.layout) !== null && _a !== void 0 ? _a : new PanelLayout();\n        // Set up translator for aria labels\n        this.translator = (_b = options.translator) !== null && _b !== void 0 ? _b : nullTranslator;\n        this._editorConfig = (_c = options.editorConfig) !== null && _c !== void 0 ? _c : {};\n        this._placeholder = true;\n        this._inViewport = false;\n        this.placeholder = (_d = options.placeholder) !== null && _d !== void 0 ? _d : true;\n        model.metadataChanged.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        this.loadCollapseState();\n        this.loadEditableState();\n        return this;\n    }\n    /**\n     * Signal to indicate that widget has changed visibly (in size, in type, etc)\n     */\n    get displayChanged() {\n        return this._displayChanged;\n    }\n    /**\n     * Whether the cell is in viewport or not.\n     */\n    get inViewport() {\n        return this._inViewport;\n    }\n    set inViewport(v) {\n        if (this._inViewport !== v) {\n            this._inViewport = v;\n            this._inViewportChanged.emit(this._inViewport);\n        }\n    }\n    /**\n     * Will emit true just after the node is attached to the DOM\n     * Will emit false just before the node is detached of the DOM\n     */\n    get inViewportChanged() {\n        return this._inViewportChanged;\n    }\n    /**\n     * Whether the cell is a placeholder not yet fully rendered or not.\n     */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(v) {\n        if (this._placeholder !== v && v === false) {\n            this.initializeDOM();\n            this._placeholder = v;\n            this._ready.resolve();\n        }\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        if (this.placeholder) {\n            return null;\n        }\n        if (!this._inputHidden) {\n            return this._input.promptNode;\n        }\n        else {\n            return this._inputPlaceholder.node\n                .firstElementChild;\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        var _a, _b;\n        return (_b = (_a = this._input) === null || _a === void 0 ? void 0 : _a.editorWidget) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        var _a, _b;\n        return (_b = (_a = this._input) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Editor configuration\n     */\n    get editorConfig() {\n        return this._editorConfig;\n    }\n    /**\n     * Cell headings\n     */\n    get headings() {\n        return new Array();\n    }\n    /**\n     * Get the model used by the cell.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the input area for the cell.\n     */\n    get inputArea() {\n        return this._input;\n    }\n    /**\n     * The read only state of the cell.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        if (value === this._readOnly) {\n            return;\n        }\n        this._readOnly = value;\n        if (this.syncEditable) {\n            this.saveEditableState();\n        }\n        this.update();\n    }\n    /**\n     * Whether the cell is a placeholder that defer rendering\n     *\n     * #### Notes\n     * You can wait for the promise `Cell.ready` to wait for the\n     * cell to be rendered.\n     */\n    isPlaceholder() {\n        return this.placeholder;\n    }\n    /**\n     * Save view editable state to model\n     */\n    saveEditableState() {\n        const { sharedModel } = this.model;\n        const current = sharedModel.getMetadata('editable');\n        if ((this.readOnly && current === false) ||\n            (!this.readOnly && current === undefined)) {\n            return;\n        }\n        if (this.readOnly) {\n            sharedModel.setMetadata('editable', false);\n        }\n        else {\n            sharedModel.deleteMetadata('editable');\n        }\n    }\n    /**\n     * Load view editable state from model.\n     */\n    loadEditableState() {\n        this.readOnly =\n            this.model.sharedModel.getMetadata('editable') ===\n                false;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Set the prompt for the widget.\n     */\n    setPrompt(value) {\n        var _a;\n        this.prompt = value;\n        (_a = this._input) === null || _a === void 0 ? void 0 : _a.setPrompt(value);\n    }\n    /**\n     * The view state of input being hidden.\n     */\n    get inputHidden() {\n        return this._inputHidden;\n    }\n    set inputHidden(value) {\n        var _a;\n        if (this._inputHidden === value) {\n            return;\n        }\n        if (!this.placeholder) {\n            const layout = this._inputWrapper.layout;\n            if (value) {\n                this._input.parent = null;\n                if (this._inputPlaceholder) {\n                    this._inputPlaceholder.text = (_a = this.model.sharedModel\n                        .getSource()\n                        .split('\\n')) === null || _a === void 0 ? void 0 : _a[0];\n                }\n                layout.addWidget(this._inputPlaceholder);\n            }\n            else {\n                this._inputPlaceholder.parent = null;\n                layout.addWidget(this._input);\n            }\n        }\n        this._inputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n        this.handleInputHidden(value);\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        const jupyter = { ...this.model.getMetadata('jupyter') };\n        if ((this.inputHidden && jupyter.source_hidden === true) ||\n            (!this.inputHidden && jupyter.source_hidden === undefined)) {\n            return;\n        }\n        if (this.inputHidden) {\n            jupyter.source_hidden = true;\n        }\n        else {\n            delete jupyter.source_hidden;\n        }\n        if (Object.keys(jupyter).length === 0) {\n            this.model.deleteMetadata('jupyter');\n        }\n        else {\n            this.model.setMetadata('jupyter', jupyter);\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadCollapseState() {\n        var _a;\n        const jupyter = (_a = this.model.getMetadata('jupyter')) !== null && _a !== void 0 ? _a : {};\n        this.inputHidden = !!jupyter.source_hidden;\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This is called by the `inputHidden` setter so that subclasses\n     * can perform actions upon the input being hidden without accessing\n     * private state.\n     */\n    handleInputHidden(value) {\n        return;\n    }\n    /**\n     * Whether to sync the collapse state to the cell model.\n     */\n    get syncCollapse() {\n        return this._syncCollapse;\n    }\n    set syncCollapse(value) {\n        if (this._syncCollapse === value) {\n            return;\n        }\n        this._syncCollapse = value;\n        if (value) {\n            this.loadCollapseState();\n        }\n    }\n    /**\n     * Whether to sync the editable state to the cell model.\n     */\n    get syncEditable() {\n        return this._syncEditable;\n    }\n    set syncEditable(value) {\n        if (this._syncEditable === value) {\n            return;\n        }\n        this._syncEditable = value;\n        if (value) {\n            this.loadEditableState();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            placeholder: false,\n            translator: this.translator\n        });\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._resizeDebouncer.dispose();\n        this._input = null;\n        this._model = null;\n        this._inputWrapper = null;\n        this._inputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Update the editor configuration with the partial provided dictionary.\n     *\n     * @param v Partial editor configuration\n     */\n    updateEditorConfig(v) {\n        this._editorConfig = { ...this._editorConfig, ...v };\n        if (this.editor) {\n            this.editor.setOptions(this._editorConfig);\n        }\n    }\n    /**\n     * Create children widgets.\n     */\n    initializeDOM() {\n        if (!this.placeholder) {\n            return;\n        }\n        const contentFactory = this.contentFactory;\n        const model = this._model;\n        // Header\n        const header = contentFactory.createCellHeader();\n        header.addClass(CELL_HEADER_CLASS);\n        this.layout.addWidget(header);\n        // Input\n        const inputWrapper = (this._inputWrapper = new Panel());\n        inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n        const inputCollapser = new InputCollapser();\n        inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n        const input = (this._input = new InputArea({\n            model,\n            contentFactory,\n            editorOptions: this.getEditorOptions()\n        }));\n        input.addClass(CELL_INPUT_AREA_CLASS);\n        inputWrapper.addWidget(inputCollapser);\n        inputWrapper.addWidget(input);\n        this.layout.addWidget(inputWrapper);\n        this._inputPlaceholder = new InputPlaceholder({\n            callback: () => {\n                this.inputHidden = !this.inputHidden;\n            },\n            text: input.model.sharedModel.getSource().split('\\n')[0],\n            translator: this.translator\n        });\n        input.model.contentChanged.connect((sender, args) => {\n            var _a;\n            if (this._inputPlaceholder && this.inputHidden) {\n                this._inputPlaceholder.text = (_a = sender.sharedModel\n                    .getSource()\n                    .split('\\n')) === null || _a === void 0 ? void 0 : _a[0];\n            }\n        });\n        if (this.inputHidden) {\n            input.parent = null;\n            inputWrapper.layout.addWidget(this._inputPlaceholder);\n        }\n        // Footer\n        const footer = this.contentFactory.createCellFooter();\n        footer.addClass(CELL_FOOTER_CLASS);\n        this.layout.addWidget(footer);\n    }\n    /**\n     * Get the editor options at initialization.\n     *\n     * @returns Editor options\n     */\n    getEditorOptions() {\n        return { config: this.editorConfig };\n    }\n    /**\n     * Handle `before-attach` messages.\n     */\n    onBeforeAttach(msg) {\n        if (this.placeholder) {\n            this.placeholder = false;\n        }\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        var _a;\n        (_a = this.editor) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    /**\n     * Handle `resize` messages.\n     */\n    onResize(msg) {\n        void this._resizeDebouncer.invoke();\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        var _a, _b;\n        if (!this._model) {\n            return;\n        }\n        // Handle read only state.\n        if (((_a = this.editor) === null || _a === void 0 ? void 0 : _a.getOption('readOnly')) !== this._readOnly) {\n            (_b = this.editor) === null || _b === void 0 ? void 0 : _b.setOption('readOnly', this._readOnly);\n        }\n    }\n    onContentChanged() {\n        var _a;\n        if (this.inputHidden && this._inputPlaceholder) {\n            this._inputPlaceholder.text = (_a = this.model.sharedModel\n                .getSource()\n                .split('\\n')) === null || _a === void 0 ? void 0 : _a[0];\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'jupyter':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            case 'editable':\n                if (this.syncEditable) {\n                    this.loadEditableState();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n/**\n * The namespace for the `Cell` class statics.\n */\n(function (Cell) {\n    /**\n     * Type of headings\n     */\n    let HeadingType;\n    (function (HeadingType) {\n        /**\n         * Heading from HTML output\n         */\n        HeadingType[HeadingType[\"HTML\"] = 0] = \"HTML\";\n        /**\n         * Heading from Markdown cell or Markdown output\n         */\n        HeadingType[HeadingType[\"Markdown\"] = 1] = \"Markdown\";\n    })(HeadingType = Cell.HeadingType || (Cell.HeadingType = {}));\n    /**\n     * The default implementation of an `IContentFactory`.\n     *\n     * This includes a CodeMirror editor factory to make it easy to use out of the box.\n     */\n    class ContentFactory {\n        /**\n         * Create a content factory for a cell.\n         */\n        constructor(options) {\n            this._editorFactory = options.editorFactory;\n        }\n        /**\n         * The readonly editor factory that create code editors\n         */\n        get editorFactory() {\n            return this._editorFactory;\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellHeader() {\n            return new CellHeader();\n        }\n        /**\n         * Create a new cell footer for the parent widget.\n         */\n        createCellFooter() {\n            return new CellFooter();\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    Cell.ContentFactory = ContentFactory;\n})(Cell || (Cell = {}));\n/** ****************************************************************************\n * CodeCell\n ******************************************************************************/\n/**\n * Code cell layout\n *\n * It will not detached the output area when the cell is detached.\n */\nexport class CodeCellLayout extends PanelLayout {\n    /**\n     * A message handler invoked on a `'before-attach'` message.\n     *\n     * #### Notes\n     * The default implementation of this method forwards the message\n     * to all widgets. It assumes all widget nodes are attached to the\n     * parent widget node.\n     *\n     * This may be reimplemented by subclasses as needed.\n     */\n    onBeforeAttach(msg) {\n        let beforeOutputArea = true;\n        const outputAreaWrapper = this.parent.node.firstElementChild;\n        for (const widget of this) {\n            if (outputAreaWrapper) {\n                if (widget.node === outputAreaWrapper) {\n                    beforeOutputArea = false;\n                }\n                else {\n                    MessageLoop.sendMessage(widget, msg);\n                    if (beforeOutputArea) {\n                        this.parent.node.insertBefore(widget.node, outputAreaWrapper);\n                    }\n                    else {\n                        this.parent.node.appendChild(widget.node);\n                    }\n                    // Force setting isVisible to true as it requires the parent widget to be\n                    // visible. But that flag will be set only during the `onAfterAttach` call.\n                    if (!this.parent.isHidden) {\n                        widget.setFlag(Widget.Flag.IsVisible);\n                    }\n                    // Not called in NotebookWindowedLayout to avoid outputArea\n                    // widgets unwanted update or reset.\n                    MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n                }\n            }\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-detach'` message.\n     *\n     * #### Notes\n     * The default implementation of this method forwards the message\n     * to all widgets. It assumes all widget nodes are attached to the\n     * parent widget node.\n     *\n     * This may be reimplemented by subclasses as needed.\n     */\n    onAfterDetach(msg) {\n        for (const widget of this) {\n            // TODO we could improve this further by removing outputs based\n            // on their mime type (for example plain/text or markdown could safely be detached)\n            // If the cell is out of the view port, its children are already detached -> skip detaching\n            if (!widget.hasClass(CELL_OUTPUT_WRAPPER_CLASS) &&\n                widget.node.isConnected) {\n                // Not called in NotebookWindowedLayout for windowed notebook\n                MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n                this.parent.node.removeChild(widget.node);\n                MessageLoop.sendMessage(widget, msg);\n            }\n        }\n    }\n}\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n    /**\n     * Construct a code cell widget.\n     */\n    constructor(options) {\n        var _a;\n        super({ layout: new CodeCellLayout(), ...options, placeholder: true });\n        this._headingsCache = null;\n        this._outputHidden = false;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        this._syncScrolled = false;\n        this.addClass(CODE_CELL_CLASS);\n        const trans = this.translator.load('jupyterlab');\n        // Only save options not handled by parent constructor.\n        const rendermime = (this._rendermime = options.rendermime);\n        const contentFactory = this.contentFactory;\n        const model = this.model;\n        this.maxNumberOutputs = options.maxNumberOutputs;\n        // Note that modifying the below label warrants one to also modify\n        // the same in this._outputLengthHandler. Ideally, this label must\n        // have been a constant and used in both places but it is not done\n        // so because of limitations in the translation manager.\n        const ariaLabel = model.outputs.length === 0\n            ? trans.__('Code Cell Content')\n            : trans.__('Code Cell Content with Output');\n        this.node.setAttribute('aria-label', ariaLabel);\n        const output = (this._output = new OutputArea({\n            model: this.model.outputs,\n            rendermime,\n            contentFactory: contentFactory,\n            maxNumberOutputs: this.maxNumberOutputs,\n            translator: this.translator,\n            promptOverlay: true,\n            inputHistoryScope: options.inputHistoryScope\n        }));\n        output.addClass(CELL_OUTPUT_AREA_CLASS);\n        output.toggleScrolling.connect(() => {\n            this.outputsScrolled = !this.outputsScrolled;\n        });\n        // Defer setting placeholder as OutputArea must be instantiated before initializing the DOM\n        this.placeholder = (_a = options.placeholder) !== null && _a !== void 0 ? _a : true;\n        model.outputs.changed.connect(this.onOutputChanged, this);\n        model.outputs.stateChanged.connect(this.onOutputChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * Create children widgets.\n     */\n    initializeDOM() {\n        if (!this.placeholder) {\n            return;\n        }\n        super.initializeDOM();\n        this.setPrompt(this.prompt);\n        // Insert the output before the cell footer.\n        const outputWrapper = (this._outputWrapper = new Panel());\n        outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n        const outputCollapser = new OutputCollapser();\n        outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n        outputWrapper.addWidget(outputCollapser);\n        // Set a CSS if there are no outputs, and connect a signal for future\n        // changes to the number of outputs. This is for conditional styling\n        // if there are no outputs.\n        if (this.model.outputs.length === 0) {\n            this.addClass(NO_OUTPUTS_CLASS);\n        }\n        this._output.outputLengthChanged.connect(this._outputLengthHandler, this);\n        outputWrapper.addWidget(this._output);\n        const layout = this.layout;\n        layout.insertWidget(layout.widgets.length - 1, new ResizeHandle(this.node));\n        layout.insertWidget(layout.widgets.length - 1, outputWrapper);\n        if (this.model.isDirty) {\n            this.addClass(DIRTY_CLASS);\n        }\n        this._outputPlaceholder = new OutputPlaceholder({\n            callback: () => {\n                this.outputHidden = !this.outputHidden;\n            },\n            text: this.getOutputPlaceholderText(),\n            translator: this.translator\n        });\n        const layoutWrapper = outputWrapper.layout;\n        if (this.outputHidden) {\n            layoutWrapper.removeWidget(this._output);\n            layoutWrapper.addWidget(this._outputPlaceholder);\n            if (this.inputHidden && !outputWrapper.isHidden) {\n                this._outputWrapper.hide();\n            }\n        }\n        const trans = this.translator.load('jupyterlab');\n        const ariaLabel = this.model.outputs.length === 0\n            ? trans.__('Code Cell Content')\n            : trans.__('Code Cell Content with Output');\n        this.node.setAttribute('aria-label', ariaLabel);\n    }\n    getOutputPlaceholderText() {\n        var _a;\n        const firstOutput = this.model.outputs.get(0);\n        const outputData = firstOutput === null || firstOutput === void 0 ? void 0 : firstOutput.data;\n        if (!outputData) {\n            return undefined;\n        }\n        const supportedOutputTypes = [\n            'text/html',\n            'image/svg+xml',\n            'application/pdf',\n            'text/markdown',\n            'text/plain',\n            'application/vnd.jupyter.stderr',\n            'application/vnd.jupyter.stdout',\n            'text'\n        ];\n        const preferredOutput = supportedOutputTypes.find(mt => {\n            const data = firstOutput.data[mt];\n            return (Array.isArray(data) ? typeof data[0] : typeof data) === 'string';\n        });\n        const dataToDisplay = firstOutput.data[preferredOutput !== null && preferredOutput !== void 0 ? preferredOutput : ''];\n        if (dataToDisplay !== undefined) {\n            return (_a = (Array.isArray(dataToDisplay)\n                ? dataToDisplay\n                : dataToDisplay === null || dataToDisplay === void 0 ? void 0 : dataToDisplay.split('\\n'))) === null || _a === void 0 ? void 0 : _a.find(part => part !== '');\n        }\n        return undefined;\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        super.initializeState();\n        this.loadScrolledState();\n        this.setPrompt(`${this.model.executionCount || ''}`);\n        return this;\n    }\n    get headings() {\n        if (!this._headingsCache) {\n            const headings = [];\n            // Iterate over the code cell outputs to check for Markdown or HTML from which we can generate ToC headings...\n            const outputs = this.model.outputs;\n            for (let j = 0; j < outputs.length; j++) {\n                const m = outputs.get(j);\n                let htmlType = null;\n                let mdType = null;\n                Object.keys(m.data).forEach(t => {\n                    if (!mdType && TableOfContentsUtils.Markdown.isMarkdown(t)) {\n                        mdType = t;\n                    }\n                    else if (!htmlType && TableOfContentsUtils.isHTML(t)) {\n                        htmlType = t;\n                    }\n                });\n                // Parse HTML output\n                if (htmlType) {\n                    headings.push(...TableOfContentsUtils.getHTMLHeadings(this._rendermime.sanitizer.sanitize(m.data[htmlType])).map(heading => {\n                        return {\n                            ...heading,\n                            outputIndex: j,\n                            type: Cell.HeadingType.HTML\n                        };\n                    }));\n                }\n                else if (mdType) {\n                    headings.push(...TableOfContentsUtils.Markdown.getHeadings(m.data[mdType]).map(heading => {\n                        return {\n                            ...heading,\n                            outputIndex: j,\n                            type: Cell.HeadingType.Markdown\n                        };\n                    }));\n                }\n            }\n            this._headingsCache = headings;\n        }\n        return [...this._headingsCache];\n    }\n    /**\n     * Get the output area for the cell.\n     */\n    get outputArea() {\n        return this._output;\n    }\n    /**\n     * The view state of output being collapsed.\n     */\n    get outputHidden() {\n        return this._outputHidden;\n    }\n    set outputHidden(value) {\n        var _a;\n        if (this._outputHidden === value) {\n            return;\n        }\n        if (!this.placeholder) {\n            const layout = this._outputWrapper.layout;\n            if (value) {\n                layout.removeWidget(this._output);\n                layout.addWidget(this._outputPlaceholder);\n                if (this.inputHidden && !this._outputWrapper.isHidden) {\n                    this._outputWrapper.hide();\n                }\n                if (this._outputPlaceholder) {\n                    this._outputPlaceholder.text = (_a = this.getOutputPlaceholderText()) !== null && _a !== void 0 ? _a : '';\n                }\n            }\n            else {\n                if (this._outputWrapper.isHidden) {\n                    this._outputWrapper.show();\n                }\n                layout.removeWidget(this._outputPlaceholder);\n                layout.addWidget(this._output);\n            }\n        }\n        this._outputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        // Because collapse state for a code cell involves two different pieces of\n        // metadata (the `collapsed` and `jupyter` metadata keys), we block reacting\n        // to changes in metadata until we have fully committed our changes.\n        // Otherwise setting one key can trigger a write to the other key to\n        // maintain the synced consistency.\n        this.model.sharedModel.transact(() => {\n            super.saveCollapseState();\n            const collapsed = this.model.getMetadata('collapsed');\n            if ((this.outputHidden && collapsed === true) ||\n                (!this.outputHidden && collapsed === undefined)) {\n                return;\n            }\n            // Do not set jupyter.outputs_hidden since it is redundant. See\n            // and https://github.com/jupyter/nbformat/issues/137\n            if (this.outputHidden) {\n                this.model.setMetadata('collapsed', true);\n            }\n            else {\n                this.model.deleteMetadata('collapsed');\n            }\n        }, false);\n    }\n    /**\n     * Revert view collapse state from model.\n     *\n     * We consider the `collapsed` metadata key as the source of truth for outputs\n     * being hidden.\n     */\n    loadCollapseState() {\n        super.loadCollapseState();\n        this.outputHidden = !!this.model.getMetadata('collapsed');\n    }\n    /**\n     * Whether the output is in a scrolled state?\n     */\n    get outputsScrolled() {\n        return this._outputsScrolled;\n    }\n    set outputsScrolled(value) {\n        this.toggleClass('jp-mod-outputsScrolled', value);\n        this._outputsScrolled = value;\n        if (this.syncScrolled) {\n            this.saveScrolledState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveScrolledState() {\n        const current = this.model.getMetadata('scrolled');\n        if ((this.outputsScrolled && current === true) ||\n            (!this.outputsScrolled && current === undefined)) {\n            return;\n        }\n        if (this.outputsScrolled) {\n            this.model.setMetadata('scrolled', true);\n        }\n        else {\n            this.model.deleteMetadata('scrolled');\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadScrolledState() {\n        // We don't have the notion of 'auto' scrolled, so we make it false.\n        if (this.model.getMetadata('scrolled') === 'auto') {\n            this.outputsScrolled = false;\n        }\n        else {\n            this.outputsScrolled = !!this.model.getMetadata('scrolled');\n        }\n    }\n    /**\n     * Whether to sync the scrolled state to the cell model.\n     */\n    get syncScrolled() {\n        return this._syncScrolled;\n    }\n    set syncScrolled(value) {\n        if (this._syncScrolled === value) {\n            return;\n        }\n        this._syncScrolled = value;\n        if (value) {\n            this.loadScrolledState();\n        }\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This method is called by the case cell implementation and is\n     * subclasses here so the code cell can watch to see when input\n     * is hidden without accessing private state.\n     */\n    handleInputHidden(value) {\n        if (this.placeholder) {\n            return;\n        }\n        if (!value && this._outputWrapper.isHidden) {\n            this._outputWrapper.show();\n        }\n        else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n            this._outputWrapper.hide();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime,\n            placeholder: false,\n            translator: this.translator\n        });\n    }\n    /**\n     * Clone the OutputArea alone, returning a simplified output area, using the same model.\n     */\n    cloneOutputArea() {\n        return new SimplifiedOutputArea({\n            model: this.model.outputs,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._output.outputLengthChanged.disconnect(this._outputLengthHandler, this);\n        this._rendermime = null;\n        this._output = null;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle changes in the model.\n     */\n    onStateChanged(model, args) {\n        switch (args.name) {\n            case 'executionCount':\n                this.setPrompt(`${model.executionCount || ''}`);\n                break;\n            case 'isDirty':\n                if (model.isDirty) {\n                    this.addClass(DIRTY_CLASS);\n                }\n                else {\n                    this.removeClass(DIRTY_CLASS);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Callback on output changes\n     */\n    onOutputChanged() {\n        var _a;\n        this._headingsCache = null;\n        if (this._outputPlaceholder && this.outputHidden) {\n            this._outputPlaceholder.text = (_a = this.getOutputPlaceholderText()) !== null && _a !== void 0 ? _a : '';\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'scrolled':\n                if (this.syncScrolled) {\n                    this.loadScrolledState();\n                }\n                break;\n            case 'collapsed':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            default:\n                break;\n        }\n        super.onMetadataChanged(model, args);\n    }\n    /**\n     * Handle changes in the number of outputs in the output area.\n     */\n    _outputLengthHandler(sender, args) {\n        const force = args === 0 ? true : false;\n        this.toggleClass(NO_OUTPUTS_CLASS, force);\n        const trans = this.translator.load('jupyterlab');\n        const ariaLabel = force\n            ? trans.__('Code Cell Content')\n            : trans.__('Code Cell Content with Output');\n        this.node.setAttribute('aria-label', ariaLabel);\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (CodeCell) {\n    /**\n     * Execute a cell given a client session.\n     */\n    async function execute(cell, sessionContext, metadata) {\n        var _a;\n        const model = cell.model;\n        const code = model.sharedModel.getSource();\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.sharedModel.transact(() => {\n                model.clearExecution();\n            }, false);\n            return;\n        }\n        const cellId = { cellId: model.sharedModel.getId() };\n        metadata = {\n            ...model.metadata,\n            ...metadata,\n            ...cellId\n        };\n        const { recordTiming } = metadata;\n        model.sharedModel.transact(() => {\n            model.clearExecution();\n            cell.outputHidden = false;\n        }, false);\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = OutputArea.execute(code, cell.outputArea, sessionContext, metadata);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.getMetadata('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.setMetadata('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.deleteMetadata('execution');\n            }\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.getMetadata('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.setMetadata('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                cell.setPrompt('');\n            }\n            throw e;\n        }\n    }\n    CodeCell.execute = execute;\n})(CodeCell || (CodeCell = {}));\n/**\n * `AttachmentsCell` - A base class for a cell widget that allows\n *  attachments to be drag/drop'd or pasted onto it\n */\nexport class AttachmentsCell extends Cell {\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Get the editor options at initialization.\n     *\n     * @returns Editor options\n     */\n    getEditorOptions() {\n        var _a, _b;\n        const base = (_a = super.getEditorOptions()) !== null && _a !== void 0 ? _a : {};\n        base.extensions = [\n            ...((_b = base.extensions) !== null && _b !== void 0 ? _b : []),\n            EditorView.domEventHandlers({\n                dragenter: (event) => {\n                    event.preventDefault();\n                },\n                dragover: (event) => {\n                    event.preventDefault();\n                },\n                drop: (event) => {\n                    this._evtNativeDrop(event);\n                },\n                paste: (event) => {\n                    this._evtPaste(event);\n                }\n            })\n        ];\n        return base;\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'`\n     * message\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n        super.onBeforeDetach(msg);\n    }\n    _evtDragOver(event) {\n        const supportedMimeType = some(imageRendererFactory.mimeTypes, mimeType => {\n            if (!event.mimeData.hasData(CONTENTS_MIME_RICH)) {\n                return false;\n            }\n            const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n            return data.model.mimetype === mimeType;\n        });\n        if (!supportedMimeType) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n    }\n    /**\n     * Handle the `paste` event for the widget\n     */\n    _evtPaste(event) {\n        if (event.clipboardData) {\n            const items = event.clipboardData.items;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].type === 'text/plain') {\n                    // Skip if this text is the path to a file\n                    if (i < items.length - 1 && items[i + 1].kind === 'file') {\n                        continue;\n                    }\n                    items[i].getAsString(text => {\n                        var _a, _b;\n                        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n                    });\n                }\n                this._attachFiles(event.clipboardData.items);\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `drop` event for the widget\n     */\n    _evtNativeDrop(event) {\n        if (event.dataTransfer) {\n            this._attachFiles(event.dataTransfer.items);\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        const supportedMimeTypes = event.mimeData.types().filter(mimeType => {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n                return (imageRendererFactory.mimeTypes.indexOf(data.model.mimetype) !== -1);\n            }\n            return imageRendererFactory.mimeTypes.indexOf(mimeType) !== -1;\n        });\n        if (supportedMimeTypes.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        event.dropAction = 'copy';\n        for (const mimeType of supportedMimeTypes) {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const { model, withContent } = event.mimeData.getData(CONTENTS_MIME_RICH);\n                if (model.type === 'file') {\n                    const URI = this._generateURI(model.name);\n                    this.updateCellSourceWithAttachment(model.name, URI);\n                    void withContent().then(fullModel => {\n                        this.model.attachments.set(URI, {\n                            [fullModel.mimetype]: fullModel.content\n                        });\n                    });\n                }\n            }\n            else {\n                // Pure mimetype, no useful name to infer\n                const URI = this._generateURI();\n                this.model.attachments.set(URI, {\n                    [mimeType]: event.mimeData.getData(mimeType)\n                });\n                this.updateCellSourceWithAttachment(URI, URI);\n            }\n        }\n    }\n    /**\n     * Attaches all DataTransferItems (obtained from\n     * clipboard or native drop events) to the cell\n     */\n    _attachFiles(items) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (item.kind === 'file') {\n                const blob = item.getAsFile();\n                if (blob) {\n                    this._attachFile(blob);\n                }\n            }\n        }\n    }\n    /**\n     * Takes in a file object and adds it to\n     * the cell attachments\n     */\n    _attachFile(blob) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const { href, protocol } = URLExt.parse(reader.result);\n            if (protocol !== 'data:') {\n                return;\n            }\n            const dataURIRegex = /([\\w+\\/\\+]+)?(?:;(charset=[\\w\\d-]*|base64))?,(.*)/;\n            const matches = dataURIRegex.exec(href);\n            if (!matches || matches.length !== 4) {\n                return;\n            }\n            const mimeType = matches[1];\n            const encodedData = matches[3];\n            const bundle = { [mimeType]: encodedData };\n            const URI = this._generateURI(blob.name);\n            if (mimeType.startsWith('image/')) {\n                this.model.attachments.set(URI, bundle);\n                this.updateCellSourceWithAttachment(blob.name, URI);\n            }\n        };\n        reader.onerror = evt => {\n            console.error(`Failed to attach ${blob.name}` + evt);\n        };\n        reader.readAsDataURL(blob);\n    }\n    /**\n     * Generates a unique URI for a file\n     * while preserving the file extension.\n     */\n    _generateURI(name = '') {\n        const lastIndex = name.lastIndexOf('.');\n        return lastIndex !== -1\n            ? UUID.uuid4().concat(name.substring(lastIndex))\n            : UUID.uuid4();\n    }\n}\n/** ****************************************************************************\n * MarkdownCell\n ******************************************************************************/\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends AttachmentsCell {\n    /**\n     * Construct a Markdown cell widget.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super({ ...options, placeholder: true });\n        this._headingsCache = null;\n        this._headingCollapsedChanged = new Signal(this);\n        this._prevText = '';\n        this._rendered = true;\n        this._renderedChanged = new Signal(this);\n        this._showEditorForReadOnlyMarkdown = true;\n        this.addClass(MARKDOWN_CELL_CLASS);\n        this.model.contentChanged.connect(this.onContentChanged, this);\n        const trans = this.translator.load('jupyterlab');\n        this.node.setAttribute('aria-label', trans.__('Markdown Cell Content'));\n        // Ensure we can resolve attachments:\n        this._rendermime = options.rendermime.clone({\n            resolver: new AttachmentsResolver({\n                parent: (_a = options.rendermime.resolver) !== null && _a !== void 0 ? _a : undefined,\n                model: this.model.attachments\n            })\n        });\n        this._renderer = this._rendermime.createRenderer('text/markdown');\n        this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n        // Check if heading cell is set to be collapsed\n        this._headingCollapsed = ((_b = this.model.getMetadata(MARKDOWN_HEADING_COLLAPSED)) !== null && _b !== void 0 ? _b : false);\n        this._showEditorForReadOnlyMarkdown =\n            (_c = options.showEditorForReadOnlyMarkdown) !== null && _c !== void 0 ? _c : MarkdownCell.defaultShowEditorForReadOnlyMarkdown;\n        // Defer setting placeholder as the renderer must be instantiated before initializing the DOM\n        this.placeholder = (_d = options.placeholder) !== null && _d !== void 0 ? _d : true;\n        this._monitor = new ActivityMonitor({\n            signal: this.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        // Throttle the rendering rate of the widget.\n        this.ready\n            .then(() => {\n            if (this.isDisposed) {\n                // Bail early\n                return;\n            }\n            this._monitor.activityStopped.connect(() => {\n                if (this._rendered) {\n                    this.update();\n                }\n            }, this);\n        })\n            .catch(reason => {\n            console.error('Failed to be ready', reason);\n        });\n    }\n    /**\n     * Text that represents the highest heading (i.e. lowest level) if cell is a heading.\n     * Returns empty string if not a heading.\n     */\n    get headingInfo() {\n        // Use table of content algorithm for consistency\n        const headings = this.headings;\n        if (headings.length > 0) {\n            // Return the highest level\n            const { text, level } = headings.reduce((prev, curr) => (prev.level <= curr.level ? prev : curr), headings[0]);\n            return { text, level };\n        }\n        else {\n            return { text: '', level: -1 };\n        }\n    }\n    get headings() {\n        if (!this._headingsCache) {\n            // Use table of content algorithm for consistency\n            const headings = TableOfContentsUtils.Markdown.getHeadings(this.model.sharedModel.getSource());\n            this._headingsCache = headings.map(h => {\n                return { ...h, type: Cell.HeadingType.Markdown };\n            });\n        }\n        return [...this._headingsCache];\n    }\n    /**\n     * Whether the heading is collapsed or not.\n     */\n    get headingCollapsed() {\n        return this._headingCollapsed;\n    }\n    set headingCollapsed(value) {\n        var _a;\n        if (this._headingCollapsed !== value) {\n            this._headingCollapsed = value;\n            if (value) {\n                this.model.setMetadata(MARKDOWN_HEADING_COLLAPSED, value);\n            }\n            else if (this.model.getMetadata(MARKDOWN_HEADING_COLLAPSED) !== 'undefined') {\n                this.model.deleteMetadata(MARKDOWN_HEADING_COLLAPSED);\n            }\n            const collapseButton = (_a = this.inputArea) === null || _a === void 0 ? void 0 : _a.promptNode.getElementsByClassName(HEADING_COLLAPSER_CLASS)[0];\n            if (collapseButton) {\n                if (value) {\n                    collapseButton.classList.add('jp-mod-collapsed');\n                }\n                else {\n                    collapseButton.classList.remove('jp-mod-collapsed');\n                }\n            }\n            this.renderCollapseButtons(this._renderer);\n            this._headingCollapsedChanged.emit(this._headingCollapsed);\n        }\n    }\n    /**\n     * Number of collapsed sub cells.\n     */\n    get numberChildNodes() {\n        return this._numberChildNodes;\n    }\n    set numberChildNodes(value) {\n        this._numberChildNodes = value;\n        this.renderCollapseButtons(this._renderer);\n    }\n    /**\n     * Signal emitted when the cell collapsed state changes.\n     */\n    get headingCollapsedChanged() {\n        return this._headingCollapsedChanged;\n    }\n    /**\n     * Whether the cell is rendered.\n     */\n    get rendered() {\n        return this._rendered;\n    }\n    set rendered(value) {\n        // Show cell as rendered when cell is not editable\n        if (this.readOnly && this._showEditorForReadOnlyMarkdown === false) {\n            value = true;\n        }\n        if (value === this._rendered) {\n            return;\n        }\n        this._rendered = value;\n        this._handleRendered()\n            .then(() => {\n            // If the rendered state changed, raise an event.\n            this._displayChanged.emit();\n            this._renderedChanged.emit(this._rendered);\n        })\n            .catch(reason => {\n            console.error('Failed to render', reason);\n        });\n    }\n    /**\n     * Signal emitted when the markdown cell rendered state changes\n     */\n    get renderedChanged() {\n        return this._renderedChanged;\n    }\n    /*\n     * Whether the Markdown editor is visible in read-only mode.\n     */\n    get showEditorForReadOnly() {\n        return this._showEditorForReadOnlyMarkdown;\n    }\n    set showEditorForReadOnly(value) {\n        this._showEditorForReadOnlyMarkdown = value;\n        if (value === false) {\n            this.rendered = true;\n        }\n    }\n    /**\n     * Renderer\n     */\n    get renderer() {\n        return this._renderer;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._monitor.dispose();\n        super.dispose();\n    }\n    /**\n     * Create children widgets.\n     */\n    initializeDOM() {\n        if (!this.placeholder) {\n            return;\n        }\n        super.initializeDOM();\n        this.renderCollapseButtons(this._renderer);\n        this._handleRendered().catch(reason => {\n            console.error('Failed to render', reason);\n        });\n    }\n    maybeCreateCollapseButton() {\n        var _a;\n        const { level } = this.headingInfo;\n        if (level > 0 &&\n            ((_a = this.inputArea) === null || _a === void 0 ? void 0 : _a.promptNode.getElementsByClassName(HEADING_COLLAPSER_CLASS).length) == 0) {\n            let collapseButton = this.inputArea.promptNode.appendChild(document.createElement('button'));\n            collapseButton.className = `jp-Button ${HEADING_COLLAPSER_CLASS}`;\n            collapseButton.setAttribute('data-heading-level', level.toString());\n            if (this._headingCollapsed) {\n                collapseButton.classList.add('jp-mod-collapsed');\n            }\n            else {\n                collapseButton.classList.remove('jp-mod-collapsed');\n            }\n            collapseButton.onclick = (event) => {\n                this.headingCollapsed = !this.headingCollapsed;\n            };\n        }\n    }\n    /**\n     * Create, update or remove the hidden cells button.\n     * Note that the actual visibility is controlled in Static Notebook by toggling jp-mod-showHiddenCellsButton class.\n     */\n    maybeCreateOrUpdateExpandButton() {\n        const showHiddenCellsButtonList = this.node.getElementsByClassName(SHOW_HIDDEN_CELLS_CLASS);\n        let trans = this.translator.load('jupyterlab');\n        let buttonText = trans._n('%1 cell hidden', '%1 cells hidden', this._numberChildNodes);\n        let needToCreateButton = this.headingCollapsed &&\n            this._numberChildNodes > 0 &&\n            showHiddenCellsButtonList.length == 0;\n        if (needToCreateButton) {\n            const newShowHiddenCellsButton = document.createElement('button');\n            newShowHiddenCellsButton.className = `jp-mod-minimal jp-Button ${SHOW_HIDDEN_CELLS_CLASS}`;\n            addIcon.render(newShowHiddenCellsButton);\n            const buttonTextElement = document.createElement('div');\n            buttonTextElement.textContent = buttonText;\n            newShowHiddenCellsButton.appendChild(buttonTextElement);\n            newShowHiddenCellsButton.onclick = () => {\n                this.headingCollapsed = false;\n            };\n            this.node.appendChild(newShowHiddenCellsButton);\n        }\n        let needToUpdateButtonText = this.headingCollapsed &&\n            this._numberChildNodes > 0 &&\n            showHiddenCellsButtonList.length == 1;\n        if (needToUpdateButtonText) {\n            showHiddenCellsButtonList[0].childNodes[1].textContent = buttonText;\n        }\n        let needToRemoveButton = !(this.headingCollapsed && this._numberChildNodes > 0);\n        if (needToRemoveButton) {\n            for (const button of showHiddenCellsButtonList) {\n                this.node.removeChild(button);\n            }\n        }\n    }\n    /**\n     * Callback on content changed\n     */\n    onContentChanged() {\n        super.onContentChanged();\n        this._headingsCache = null;\n    }\n    /**\n     * Render the collapse button for heading cells,\n     * and for collapsed heading cells render the \"expand hidden cells\"\n     * button.\n     */\n    renderCollapseButtons(widget) {\n        this.node.classList.toggle(MARKDOWN_HEADING_COLLAPSED, this._headingCollapsed);\n        this.maybeCreateCollapseButton();\n        this.maybeCreateOrUpdateExpandButton();\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        this.addClass(RENDERED_CLASS);\n        if (!this.placeholder && !this.isDisposed) {\n            this.renderCollapseButtons(widget);\n            this.inputArea.renderInput(widget);\n        }\n    }\n    /**\n     * Show the text editor instead of rendered input.\n     */\n    showEditor() {\n        this.removeClass(RENDERED_CLASS);\n        if (!this.placeholder && !this.isDisposed) {\n            this.inputArea.showEditor();\n            // if this is going to be a heading, place the cursor accordingly\n            let numHashAtStart = (this.model.sharedModel\n                .getSource()\n                .match(/^#+/g) || [''])[0].length;\n            if (numHashAtStart > 0) {\n                this.inputArea.editor.setCursorPosition({\n                    column: numHashAtStart + 1,\n                    line: 0\n                });\n            }\n        }\n    }\n    /*\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        // Make sure we are properly rendered.\n        this._handleRendered().catch(reason => {\n            console.error('Failed to render', reason);\n        });\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Modify the cell source to include a reference to the attachment.\n     */\n    updateCellSourceWithAttachment(attachmentName, URI) {\n        var _a, _b;\n        const textToBeAppended = `![${attachmentName}](attachment:${URI !== null && URI !== void 0 ? URI : attachmentName})`;\n        // TODO this should be done on the model...\n        (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, textToBeAppended);\n    }\n    /**\n     * Handle the rendered state.\n     */\n    async _handleRendered() {\n        if (!this._rendered) {\n            this.showEditor();\n        }\n        else {\n            // TODO: It would be nice for the cell to provide a way for\n            // its consumers to hook into when the rendering is done.\n            await this._updateRenderedInput();\n            if (this._rendered) {\n                // The rendered flag may be updated in the mean time\n                this.renderInput(this._renderer);\n            }\n        }\n    }\n    /**\n     * Update the rendered input.\n     */\n    _updateRenderedInput() {\n        if (this.placeholder) {\n            return Promise.resolve();\n        }\n        const model = this.model;\n        const text = (model && model.sharedModel.getSource()) || DEFAULT_MARKDOWN_TEXT;\n        // Do not re-render if the text has not changed.\n        if (text !== this._prevText) {\n            const mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n            this._prevText = text;\n            return this._renderer.renderModel(mimeModel);\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime,\n            placeholder: false,\n            translator: this.translator\n        });\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (MarkdownCell) {\n    /**\n     * Default value for showEditorForReadOnlyMarkdown.\n     */\n    MarkdownCell.defaultShowEditorForReadOnlyMarkdown = true;\n})(MarkdownCell || (MarkdownCell = {}));\n/** ****************************************************************************\n * RawCell\n ******************************************************************************/\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n    /**\n     * Construct a raw cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass(RAW_CELL_CLASS);\n        const trans = this.translator.load('jupyterlab');\n        this.node.setAttribute('aria-label', trans.__('Raw Cell Content'));\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            placeholder: false,\n            translator: this.translator\n        });\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":["DRAG_IMAGE_CLASS","SINGLE_DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","CellDragUtils","findCell","node","cells","isCellNode","cellIndex","parentElement","index","cell","detectTargetArea","target","_a","_b","targetArea","editorWidget","contains","promptNode","shouldStartDrag","prevX","prevY","nextX","nextY","dx","Math","abs","dy","createCellDragImage","activeCell","selectedCells","count","length","promptNumber","model","type","executionCount","toString","cellContent","sharedModel","getSource","split","slice","VirtualDOM","realize","h","div","className","span","Collapser","ReactWidget","constructor","super","this","addClass","collapsed","render","onClick","e","handleClick","InputCollapser","parent","inputHidden","update","OutputCollapser","outputHidden","area","ElementExt","scrollIntoViewIfNeeded","CellHeader","Widget","CellFooter","InputArea","options","contentFactory","editorOptions","prompt","_prompt","createInputPrompt","editor","_editor","CodeEditorWrapper","factory","editorFactory","layout","PanelLayout","addWidget","renderedInput","_rendered","renderInput","widget","hide","showEditor","show","setPrompt","value","dispose","isDisposed","ContentFactory","InputPrompt","_executionCount","textContent","AttachmentsModel","_map","ObservableMap","_isDisposed","_stateChanged","Signal","_changed","_serialized","_changeGuard","defaultContentFactory","values","key","Object","keys","undefined","set","changed","connect","_onMapChanged","stateChanged","clearData","has","get","item","_createItem","remove","delete","clear","forEach","fromJSON","toJSON","ret","createAttachmentModel","_onGenericChange","sender","args","emit","AttachmentModel","AttachmentsResolver","_parent","_model","resolveUrl","url","startsWith","getDownloadUrl","path","attachment","data","mimeType","imageRendererFactory","mimeTypes","indexOf","Error","isLocal","_c","call","globalModelDBMutex","createMutex","isCodeCellModel","isMarkdownCellModel","isRawCellModel","CellModel","CodeEditor","Model","cell_type","others","createStandaloneCell","id","contentChanged","_metadataChanged","_trusted","standaloneModel","trusted","getMetadata","onGenericChange","metadataChanged","_onMetadataChanged","getId","metadata","newValue","oldValue","onTrustedChanged","disconnect","deleteMetadata","setMetadata","change","AttachmentsCellModel","getAttachments","_attachments","createAttachmentsModel","_onAttachmentsChange","_onSharedModelChanged","attachments","event","setAttachments","slot","attachmentsChange","RawCellModel","MarkdownCellModel","CodeCellModel","_executedCode","_isDirty","outputs","getOutputs","_outputs","createOutputArea","onOutputsChange","execution_count","isDirty","clearExecution","_setDirty","newTrusted","codeCell","name","newValues","map","output","updateOutputs","newIndex","oldIndex","oldValues","outputsChange","add","executionCountChange","sourceChange","trim","v","OutputAreaModel","Placeholder","document","createElement","trans","translator","nullTranslator","load","innerNode","promptClass","insertAdjacentHTML","outerHTML","_cell","classList","title","__","container","appendChild","_textContent","innerText","text","ellipsesIcon","element","elementPosition","height","width","_callback","callback","t","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","InputPlaceholder","OutputPlaceholder","SELECTED_HIGHLIGHT_CLASS","CellSearchProvider","EditorSearchProvider","inViewport","signalToPromise","inViewportChanged","then","cmHandler","setEditor","CodeCellSearchProvider","currentProviderIndex","outputsProvider","outputArea","_onOutputsChanged","widgets","catch","reason","console","error","outputLengthChanged","disposed","matchesCount","isActive","reduce","sum","provider","clearHighlight","Promise","all","highlightNext","loop","match","currentIndex","currentMatchIndex","highlightPrevious","startQuery","query","filters","endQuery","changes","GenericSearchProvider","MarkdownCellSearchProvider","_unrenderedByHighligh","renderedProvider","renderer","rendered","waitForRendered","renderedChanged","onRenderedChanged","replaceAllMatches","newText","result","setCursorPosition","column","line","createCellSearchProvider","isPlaceholder","CELL_RESIZED_CLASS","ResizeHandle","targetNode","_isActive","_isDragging","_resizer","Throttler","_resize","handleEvent","parentNode","childNodes","documentElement","style","setProperty","window","invoke","x","getBoundingClientRect","ratio","clientX","normalized","max","min","CELL_OUTPUT_WRAPPER_CLASS","DIRTY_CLASS","MARKDOWN_HEADING_COLLAPSED","HEADING_COLLAPSER_CLASS","SHOW_HIDDEN_CELLS_CLASS","RENDERED_CLASS","NO_OUTPUTS_CLASS","CONTENTS_MIME_RICH","Cell","_d","_displayChanged","_editorConfig","_inputHidden","_inViewportChanged","_readOnly","_ready","PromiseDelegate","_resizeDebouncer","Debouncer","_syncCollapse","_syncEditable","editorConfig","_placeholder","_inViewport","placeholder","onMetadataChanged","initializeState","loadCollapseState","loadEditableState","displayChanged","initializeDOM","resolve","_inputPlaceholder","firstElementChild","_input","headings","Array","inputArea","readOnly","syncEditable","saveEditableState","current","ready","promise","_inputWrapper","syncCollapse","saveCollapseState","handleInputHidden","jupyter","source_hidden","clone","updateEditorConfig","setOptions","header","createCellHeader","inputWrapper","Panel","inputCollapser","input","getEditorOptions","footer","createCellFooter","config","onBeforeAttach","onActivateRequest","focus","onResize","onUpdateRequest","getOption","setOption","onContentChanged","HeadingType","_editorFactory","createOutputPrompt","OutputPrompt","createStdin","Stdin","CodeCellLayout","beforeOutputArea","outputAreaWrapper","MessageLoop","sendMessage","insertBefore","isHidden","setFlag","Flag","IsVisible","Msg","AfterAttach","onAfterDetach","hasClass","isConnected","BeforeDetach","removeChild","CodeCell","_headingsCache","_outputHidden","_outputWrapper","_outputPlaceholder","_syncScrolled","rendermime","_rendermime","maxNumberOutputs","ariaLabel","setAttribute","_output","OutputArea","promptOverlay","inputHistoryScope","toggleScrolling","outputsScrolled","onOutputChanged","onStateChanged","outputWrapper","outputCollapser","_outputLengthHandler","insertWidget","getOutputPlaceholderText","layoutWrapper","removeWidget","firstOutput","preferredOutput","find","mt","isArray","dataToDisplay","part","loadScrolledState","j","m","htmlType","mdType","TableOfContentsUtils","Markdown","isMarkdown","isHTML","push","getHTMLHeadings","sanitizer","sanitize","heading","outputIndex","HTML","getHeadings","transact","_outputsScrolled","toggleClass","syncScrolled","saveScrolledState","cloneOutputArea","SimplifiedOutputArea","removeClass","force","execute","async","sessionContext","code","session","kernel","cellId","recordTiming","future","msgPromise","recordTimingHook","label","msg_type","content","execution_state","date","Date","toISOString","timingInfo","assign","registerMessageHook","started","finished","AttachmentsCell","_evtDragOver","_evtDrop","base","extensions","domEventHandlers","dragenter","preventDefault","dragover","drop","_evtNativeDrop","paste","_evtPaste","some","mimeData","hasData","getData","mimetype","stopPropagation","dropAction","proposedAction","clipboardData","items","i","kind","getAsString","replaceSelection","_attachFiles","dataTransfer","supportedMimeTypes","types","filter","withContent","URI","_generateURI","updateCellSourceWithAttachment","fullModel","blob","getAsFile","_attachFile","reader","FileReader","onload","evt","href","protocol","URLExt","parse","matches","exec","bundle","onerror","readAsDataURL","lastIndex","lastIndexOf","UUID","uuid4","concat","substring","MarkdownCell","_headingCollapsedChanged","_prevText","_renderedChanged","_showEditorForReadOnlyMarkdown","resolver","_renderer","createRenderer","_headingCollapsed","showEditorForReadOnlyMarkdown","defaultShowEditorForReadOnlyMarkdown","_monitor","ActivityMonitor","signal","timeout","activityStopped","headingInfo","level","prev","curr","headingCollapsed","collapseButton","getElementsByClassName","renderCollapseButtons","numberChildNodes","_numberChildNodes","headingCollapsedChanged","_handleRendered","showEditorForReadOnly","maybeCreateCollapseButton","onclick","maybeCreateOrUpdateExpandButton","showHiddenCellsButtonList","buttonText","_n","newShowHiddenCellsButton","addIcon","buttonTextElement","button","toggle","numHashAtStart","attachmentName","textToBeAppended","_updateRenderedInput","mimeModel","MimeModel","renderModel","RawCell"],"sourceRoot":""}