{"version":3,"file":"66.bundle.js","mappings":"0iBAOO,MAAMA,EAAiBC,eAAgBC,EAASC,EAAKC,GAExD,MAAMC,GADND,EAAaA,GAAc,EAAAE,gBACFC,KAAK,cACxBC,EAAQH,EAAMI,GAAG,2BACjBC,EAAaL,EAAMI,GAAG,iLAG5B,OAAO,IAAAE,kBAAiBH,EAAO,CAAEI,QAASF,GAC9C,E,IC0JIG,EAaOC,E,iEAlKJ,MAAMC,UAAwB,EAAAC,YAIjC,WAAAC,CAAYC,GACRC,MAAMD,GACNE,KAAKC,eAAiB,IAAI,EAAAC,OAAOF,MAEjCA,KAAKG,YAAc,IAAI,EAAAC,eAAe,CAClCC,SAAUL,KAAKK,SACfC,SAAUR,EAAQS,oBAClBC,eAAe,EACfC,gBAAgB,IAGpB,MAAMC,EAAW,IAAIC,SAAQC,IACzBC,uBAAsB,KAClBD,GAAS,GACX,IAENZ,KAAKc,cACDhB,EAAQgB,eAAiB,IAAI,EAAAC,cAAc,CAAEV,SAAUL,KAAKK,WAChEL,KAAKgB,YAAclB,EAAQkB,aAAe,IAAI,EAAAC,iBAC9CjB,KAAKU,SACDZ,EAAQY,UACJV,KAAKkB,QAAQC,MAAK,IAAMT,IAAUU,OAAM,IAAMV,IACtDV,KAAKqB,eAAiBvB,EAAQuB,gBAAkB,IAAI,EAAAC,cACxD,CAIA,UAAIC,GACA,OAAOvB,KAAKwB,OAChB,CACA,UAAID,CAAOA,GACHvB,KAAKwB,UAAYD,IACjBvB,KAAKwB,QAAUD,EACfE,SAASC,KAAKC,QAAgB,OAAIJ,EAClCvB,KAAKC,eAAe2B,KAAKL,GAEjC,CAIA,iBAAIM,GACA,OAAO7B,KAAKC,cAChB,CAWA,kBAAA6B,CAAmBC,GACf,KAAK/B,KAAKgC,mBACJhC,KAAKgC,kBAAkBC,kBAAkBC,MAC3C,OAEJ,IAAIC,EAAOnC,KAAKgC,kBAAkBC,OAClC,EAAG,CACC,GAAIE,aAAgBC,aAAeL,EAAGI,GAClC,OAAOA,EAEXA,EAAOA,EAAKE,UAChB,OAASF,GAAQA,EAAKE,YAAcF,IAASA,EAAKE,WActD,CAIA,cAAAC,CAAeC,GAEX,GADAvC,KAAKgC,kBAAoBO,GACrBA,EAAMC,WACN/C,EAAQgD,oBAAoBF,EAAMN,SAGvBjC,KAAKG,YAAYuC,KAAKH,GACzB,CACR,MAAMI,EAAQ3C,KAAKG,YAAYyC,KAAKD,MAIpC,GAAqB,IAAjBA,EAAME,QACNF,EAAM,GAAGG,UAAYpD,EAA2BS,YAEhD,YADAH,KAAKG,YAAYyC,KAAKG,QAI1BR,EAAMS,iBACNT,EAAMU,iBACV,CACJ,GAKJ,SAAWtD,GAiBPA,EAAgBuD,UAVhB,SAAmBC,EAAMC,GACrB,MAAMC,EAAa,IAAIC,OAAO,IAAIF,EAAMG,KAAKC,OAE7C,QADcL,EAAKM,MAAMJ,EAO7B,EAKA1D,EAAgB+D,OAAS,IAAI,EAAAC,MAAM,iCAAkC,wLAWrEhE,EAAgBiE,cAAgB,IAAI,EAAAD,MAAM,wCAAyC,sCACtF,CAjCD,CAiCGhE,IAAoBA,EAAkB,CAAC,IAK1C,SAAWF,GAOPA,EAAQgD,oBAHR,SAA6BoB,GACzB,OAA8D,OAAvDA,EAAQC,QAAQ,kCAC3B,CAEH,CARD,CAQGrE,IAAYA,EAAU,CAAC,IAK1B,SAAWC,GAIPA,EAA2BS,YAAc,8BAC5C,CALD,CAKGT,IAA+BA,EAA6B,CAAC,I,qEC9KhE,MAIMqE,EAAgB,aAIhBC,EAAgB,iBAIhBC,EAAe,gBAIfC,EAAe,IACfC,EAAiB,cAIVC,EAAY,IAAI,EAAAT,MAAM,oCAAqC,4UAIjE,MAAMU,UAAiB,EAAAC,OAI1B,WAAAzE,CAAYC,GACRC,QAIAC,KAAKuE,eAAiB,CAACC,EAASC,KAC5B,OAAQA,EAAIC,MACR,IAAK,cACDD,EAAIE,MAAMC,SAAST,GACnBnE,KAAK6E,SAASC,IAAIL,EAAIE,OACtB,MACJ,IAAK,gBACDF,EAAIE,MAAMI,YAAYZ,GACtBnE,KAAK6E,SAASG,OAAOP,EAAIE,OAKjC,OAAO,CAAI,EAEf3E,KAAKiF,eAAiB,IAAI,EAAA/E,OAAOF,MACjCA,KAAKkF,cAAgB,KACrBlF,KAAKmF,gBAAkB,IAAI,EAAAjF,OAAOF,MAClCA,KAAKoF,aAAe,GACpBpF,KAAKqF,oBAAsB,IAAI,EAAAnF,OAAOF,MACtCA,KAAKsF,aAAe,IAAI,EAAApF,OAAOF,MAC/BA,KAAKuF,aAAc,EACnBvF,KAAKwF,gBAAkB,IAAI,EAAAtF,OAAOF,MAClCA,KAAKyF,iBAAmB,IAAI,EAAAC,WAAU,KAClC1F,KAAKwF,gBAAgB5D,UAAK+D,EAAU,GACrC,GACH3F,KAAK4F,UAAY,IAAI,EAAAC,gBACrB7F,KAAK6E,SAAW,IAAI,EAAAiB,aACpB9F,KAAK+F,yBAA0B,EAC/B/F,KAAKgG,WAAa,IAAIC,IACtBjG,KAAKkG,kBAAoB,IAAID,IAC7BjG,KAAKmG,kBAAoB,IAAIF,IAC7BjG,KAAKoG,eAAiB,IAAIC,MAC1BrG,KAAK4E,SAnEmB,eAoExB5E,KAAKsG,GAAK,QACyE,KAA9ExG,aAAyC,EAASA,EAAQyG,kBAC3DvG,KAAKwG,YAAc,CAAE,oBAAqB,CAAC,EAAG,kBAAmB,CAAC,IAGtE,MAAMC,EAAkBzG,KAAK0G,gBAAkB,IAAI,EAAQC,eAAe3G,MAC1EA,KAAK0G,gBAAgBE,OAErB,MAAMC,EAAkB,IAAI,EAAAC,MAC5BD,EAAgBjC,SAAS,uBACzBiC,EAAgBE,UAAUN,GAC1B,MAAMO,EAAehH,KAAKiH,aAAe,IAAI,EAAAC,SACvCC,EAAenH,KAAKoH,aAAe,IAAI,EAAQC,aACrDF,EAAYG,MAAMnF,KAAKoF,aAAa,OAAQ,cAC5C,MAAMC,EAAcxH,KAAKyH,YAAc,IAAI,EAAQJ,aACnDG,EAAWF,MAAMnF,KAAKoF,aAAa,OAAQ,UAC3C,MAAMG,EAAe1H,KAAK2H,aAAe,IAAI,EAAAT,SAC7CQ,EAAYvF,KAAKoF,aAAa,OAAQ,eACtC,MAAMK,EAAY,IAAI,EAAAV,SAChBW,EAAe7H,KAAK8H,aACtB,IAAI,EAAQC,qBACVC,EAAahI,KAAKiI,WAAa,IAAI,EAAAC,aAAa,CAClDC,WAAY,EAAA7D,OAAO8D,WAAWC,UAElC,EAAAC,YAAYC,mBAAmBP,EAAWhI,KAAKuE,gBAC/C,MAAMiE,EAAexI,KAAKyI,aACtB,IAAI,EAAQV,qBACVW,EAAa1I,KAAK2I,WAAa,IAAI,EAAAC,YAAY,CACjDC,aAAa,IAEXC,EAAe9I,KAAK+I,aAAe,IAAI,EAAQC,eAC/CC,EAAgBjJ,KAAKkJ,cAAgB,IAAI,EAAQF,eACjDG,EAAa,IAAI,EAAAC,UACvBpC,EAAYV,GAAK,kBACjBa,EAAYG,MAAMhB,GAAK,gBACvBkB,EAAWF,MAAMhB,GAAK,eACtBoB,EAAYpB,GAAK,kBACjBsB,EAAUtB,GAAK,wBACfuB,EAAYvB,GAAK,uBACjB0B,EAAU1B,GAAK,qBACfkC,EAAYlC,GAAK,sBACjBoC,EAAUpC,GAAK,gBACfwC,EAAYO,QAAQzE,SAASb,GAC7B+E,EAAYO,QAAQzE,SAAS,eAC7BkE,EAAYO,QAAQlH,KAAKoF,aAAa,OAAQ,iBAC9CuB,EAAYQ,aAAahD,GAAK,gBAC9B2C,EAAaI,QAAQzE,SAASb,GAC9BkF,EAAaI,QAAQzE,SAAS,gBAC9BqE,EAAaI,QAAQlH,KAAKoF,aAAa,OAAQ,iBAC/C0B,EAAaK,aAAahD,GAAK,iBAC/B0B,EAAU7F,KAAKoF,aAAa,OAAQ,QACpCK,EAAU2B,QAAU,EACpB1B,EAAY0B,QAAU,EACtBvB,EAAUuB,QAAU,EACpBf,EAAYe,QAAU,EACtBvC,EAAYwC,UAAY,gBACxB3B,EAAY4B,YAAc,WAC1B7B,EAAU4B,UAAY,gBACtBhB,EAAYiB,YAAc,aAC1B/B,EAAY8B,UAAY,gBACxB,EAAAE,WAAWC,WAAWb,EAAYQ,aAAc,GAChD,EAAAI,WAAWC,WAAWjB,EAAW,GACjC,EAAAgB,WAAWC,WAAW3B,EAAW,GACjC,EAAA0B,WAAWC,WAAWV,EAAaK,aAAc,GACjD,EAAApC,SAASyC,WAAWb,EAAYO,QAAS,GACzC,EAAAnC,SAASyC,WAAWnB,EAAa,GACjC,EAAAtB,SAASyC,WAAWV,EAAaI,QAAS,GAC1C,EAAAK,WAAWC,WAAW9B,EAAa,GACnCW,EAAYzB,UAAU+B,EAAYQ,cAClCd,EAAYzB,UAAUiB,GACtBQ,EAAYzB,UAAUkC,EAAaK,cACnCzB,EAAYd,UAAUyB,GACtBX,EAAYd,UAAU2B,GACtBd,EAAUb,UAAU+B,EAAYO,SAChCzB,EAAUb,UAAUc,GACpBD,EAAUb,UAAUkC,EAAaI,SACjCF,EAAWK,UAAY,gBACvBL,EAAWI,QAAU,EAIrB1B,EAAY+B,iBAAiB,CAAC,EAAG,IACjCpB,EAAYoB,iBAAiB,CAAC,EAAG,IAAK,IACtC,EAAAR,UAAUO,WAAW3C,EAAa,GAClC,EAAAoC,UAAUO,WAAWxC,EAAYG,MAAO,GACxC,EAAA8B,UAAUO,WAAWnC,EAAWF,MAAO,GACvC,EAAA8B,UAAUO,WAAW/B,EAAW,GAChC,EAAAwB,UAAUO,WAAWjC,EAAa,GAClCyB,EAAWpC,UAAUF,GACrBsC,EAAWpC,UAAUC,GACrBmC,EAAWpC,UAAUS,EAAWF,OAChC6B,EAAWpC,UAAUa,GACrBuB,EAAWpC,UAAUW,GAErB1H,KAAKiH,aAAa4C,OAClB7J,KAAK2H,aAAakC,OAClB7J,KAAK2I,WAAWkB,OAChB7J,KAAK8J,OAASX,EAEdnJ,KAAK6E,SAASkF,eAAeC,QAAQhK,KAAKiK,kBAAmBjK,MAC7DA,KAAK6E,SAASqF,cAAcF,QAAQhK,KAAKmK,iBAAkBnK,MAE3DA,KAAKiI,WAAWmC,eAAeJ,QAAQhK,KAAKqK,kBAAmBrK,MAE/DA,KAAK8H,aAAawC,QAAQN,QAAQhK,KAAKqK,kBAAmBrK,MAE1DA,KAAK2I,WAAWoB,eAAeC,QAAQhK,KAAKqK,kBAAmBrK,MAC/DA,KAAK2I,WAAW4B,OAAOC,SAASR,QAAQhK,KAAKyK,mBAAoBzK,MACjEA,KAAK2I,WAAWW,aAAaoB,cAAcV,QAAQhK,KAAKyK,mBAAoBzK,MAE5EA,KAAK+I,aAAauB,QAAQN,QAAQhK,KAAKqK,kBAAmBrK,MAC1DA,KAAKkJ,cAAcoB,QAAQN,QAAQhK,KAAKqK,kBAAmBrK,MAE3DA,KAAKyI,aAAa6B,QAAQN,QAAQhK,KAAKqK,kBAAmBrK,MAE1D,MAAM2K,EAAgB3K,KAAK4K,cAAgB,IAAI,EAAQC,aAAa7K,MACpEA,KAAK8E,IAAI6F,EAAc,MAAO,CAAEG,KAAM,MACT,sBAAzB9K,KAAKiI,WAAW8C,MAChB/K,KAAKyH,YAAYV,UAAU/G,KAAKoH,aAAaE,MAAO,KACpDqD,EAAad,QAGbV,EAAW6B,aAAa,EAAGhL,KAAKoH,aAAaE,OAEjDtH,KAAKhB,WAAa,EAAAE,eAGlBc,KAAK+J,eAAeC,SAAQ,CAACiB,EAAQC,KACjC,IAAIC,EAAWD,EAAKC,SAChBC,EAAWF,EAAKE,SAEhBA,IACAA,EAAShM,MAAMiM,QAAQC,WAAWtL,KAAKuL,uBAAwBvL,MAC3DoL,aAAoB,EAAAI,gBACpBJ,EAASK,QAAQC,YAAYJ,WAAWtL,KAAK2L,mBAAoB3L,OAIrEmL,IACAA,EAAS/L,MAAMiM,QAAQrB,QAAQhK,KAAKuL,uBAAwBvL,MAC5DA,KAAKuL,yBACDJ,aAAoB,EAAAK,gBACpBL,EAASM,QAAQC,YAAY1B,QAAQhK,KAAK2L,mBAAoB3L,OAGtEA,KAAK2L,oBAAoB,GAEjC,CAIA,iBAAIzB,GACA,OAAOlK,KAAKiF,cAChB,CAIA,gBAAI2G,GACA,OAAO5L,KAAK6E,SAAS+G,YACzB,CAIA,oBAAIC,GACA,OAAO7L,KAAKiI,WAAW4D,gBAC3B,CACA,oBAAIA,CAAiBC,GACjB9L,KAAKiI,WAAW4D,iBAAmBC,CACvC,CAIA,gBAAIC,GACA,OAAO/L,KAAKiI,WAAW8D,YAC3B,CAIA,kBAAIhC,GACA,OAAO/J,KAAKmF,eAChB,CAKA,eAAI6G,GACA,OAAOhM,KAAKoF,YAChB,CAMA,sBAAI6G,GACA,OAAOjM,KAAKqF,mBAChB,CAIA,iBAAI6G,GACA,OAAOlM,KAAK6E,SAASqH,aACzB,CAIA,kBAAI9B,GACA,OAAOpK,KAAKwF,eAChB,CAIA,iBAAI2G,GACA,OAAQnM,KAAK+I,aAAaM,QAAQ+C,YACtC,CAIA,kBAAIC,GACA,OAAQrM,KAAKkJ,cAAcG,QAAQ+C,YACvC,CAKA,oBAAIE,GACA,OAAOtM,KAAKuM,SAAS,0BACzB,CACA,oBAAID,CAAiBR,GACjB9L,KAAKwM,YAAY,0BAA2BV,EAChD,CAIA,QAAIf,GACA,OAAO/K,KAAKiI,WAAW8C,IAC3B,CACA,QAAIA,CAAKA,GACL,MAAM0B,EAAOzM,KAAKiI,WAClB,GAAI8C,IAAS0B,EAAK1B,KACd,OAEJ,MAAM2B,EAA2B1M,KAAKkM,cACtC,GAAa,oBAATnB,EAEA/K,KAAKkF,cAAgBuH,EAAKE,aAC1BF,EAAK1B,KAAOA,EAGR/K,KAAKkM,eACLO,EAAKG,eAAe5M,KAAKkM,eAG7BlM,KAAK8J,OAAOkB,aAAa,EAAGhL,KAAKoH,aAAaE,OAC9CtH,KAAK4K,cAAchE,OACnB5G,KAAKuL,yBACDvL,KAAK+F,yBACL/F,KAAKyH,YAAYH,MAAMuC,WAG1B,CAGD,MAAMgD,EAAUxG,MAAMyG,KAAKL,EAAKI,WAChCJ,EAAK1B,KAAOA,EAER/K,KAAKkF,gBAEL,EAAQ6H,oBAAoBN,EAAMzM,KAAKkF,cAAc8H,MACrDP,EAAKQ,cAAcjN,KAAKkF,eACxBlF,KAAKkF,cAAgB,MAGrBlF,KAAKkN,gBAAgBC,YACrBnN,KAAKkN,gBACAE,kBACAjM,MAAKkM,IACN,GAAIA,EAAU,CACV,MAAM,cAAEnB,EAAa,KAAEO,GAASY,EAC5BZ,GACAzM,KAAKiI,WAAWgF,cAAcR,GAE9BP,GACAlM,KAAKsN,aAAapB,EAAc5F,GAExC,KAEClF,OAAMmM,IACPC,QAAQC,MAAM,0CACdD,QAAQC,MAAMF,EAAO,IAQ7BV,EAAQa,SAAQC,IACPA,EAAOC,QACR5N,KAAK6N,eAAeF,EAAQ,IACrB3N,KAAKkG,kBAAkB4H,IAAIH,GAC9BI,UAAU,GAElB,IAEJ/N,KAAKkG,kBAAkB8H,QAGnBtB,GACAD,EAAKG,eAAeF,GAGxB1M,KAAK8E,IAAI9E,KAAKoH,aAAaE,MAAO,MAAO,CAAEwD,KAAM,MACjD9K,KAAK4K,cAAcf,MACvB,CAEA7J,KAAKmC,KAAKR,QAAQsM,UAAYlD,EAC9B/K,KAAK2I,WAAWuF,MAEhBlO,KAAKsF,aAAa1D,KAAKmJ,EAC3B,CAIA,eAAIoD,GACA,OAAOnO,KAAKsF,YAChB,CAKA,YAAI5E,GACA,OAAOV,KAAK4F,UAAUwI,OAC1B,CACA,cAAIpP,GACA,IAAIqP,EACJ,OAAmC,QAA3BA,EAAKrO,KAAKsO,mBAAgC,IAAPD,EAAgBA,EAAK,EAAAnP,cACpE,CACA,cAAIF,CAAW8M,GACX,GAAIA,IAAU9L,KAAKsO,YAAa,CAC5BtO,KAAKsO,YAAcxC,EAEnB,EAAAyC,UAAUvP,WAAa8M,EACvB,MAAM7M,EAAQ6M,EAAM3M,KAAK,cACzBa,KAAKoH,aAAaE,MAAMnF,KAAKoF,aAAa,aAActI,EAAMI,GAAG,SACjEW,KAAK+I,aAAaM,QAAQlH,KAAKoF,aAAa,aAActI,EAAMI,GAAG,iBACnEW,KAAK+I,aAAaM,QAAQmF,YAAYjH,aAAa,aAActI,EAAMI,GAAG,iBAC1EW,KAAKkJ,cAAcG,QAAQlH,KAAKoF,aAAa,aAActI,EAAMI,GAAG,sBACpEW,KAAKkJ,cAAcG,QAAQmF,YAAYjH,aAAa,aAActI,EAAMI,GAAG,qBAC/E,CACJ,CAIA,cAAIoP,GACA,OAAO,EAAAC,QAAQC,SAAS3O,KAAKwG,YACjC,CAIA,YAAA8G,CAAahH,GACT,GAAItG,KAAK+I,aAAa6F,IAAItI,GAEtB,YADAtG,KAAK+I,aAAagF,SAASzH,GAG/B,GAAItG,KAAKkJ,cAAc0F,IAAItI,GAEvB,YADAtG,KAAKkJ,cAAc6E,SAASzH,GAGhC,MAAMuI,EAAW7O,KAAK2I,WAAW4B,OAAOuE,OAAOC,WAAU3P,GAASA,EAAM4P,MAAM1I,KAAOA,IACrF,GAAIuI,GAAY,EAEZ,YADA7O,KAAK2I,WAAWsG,aAAeJ,GAGnC,MAAMpC,EAAOzM,KAAKiI,WACZ0F,GAAS,IAAAuB,MAAKzC,EAAKI,WAAWf,GAASA,EAAMxF,KAAOA,IACtDqH,GACAlB,EAAKG,eAAee,EAE5B,CAIA,eAAAwB,GACI,MAAMC,EAAUpP,KAAKqP,iBACrB,IAAKD,EACD,OAEJ,MAAME,EAAKF,EAAQH,aACnB,IAAY,IAARK,EAAJ,CAGA,GAAIA,EAAKF,EAAQN,OAAOjM,OAAS,EAK7B,OAJAuM,EAAQH,cAAgB,OACpBG,EAAQhD,cACRgD,EAAQhD,aAAa4C,MAAMjB,YAInC,GAAIuB,IAAOF,EAAQN,OAAOjM,OAAS,EAAG,CAClC,MAAM0M,EAAUvP,KAAKwP,aAAa,QAC9BD,IACAA,EAAQN,aAAe,EACnBM,EAAQnD,cACRmD,EAAQnD,aAAa4C,MAAMjB,WAGvC,CAhBA,CAiBJ,CAIA,mBAAA0B,GACI,MAAML,EAAUpP,KAAKqP,iBACrB,IAAKD,EACD,OAEJ,MAAME,EAAKF,EAAQH,aACnB,IAAY,IAARK,EAAJ,CAGA,GAAIA,EAAK,EAKL,OAJAF,EAAQH,cAAgB,OACpBG,EAAQhD,cACRgD,EAAQhD,aAAa4C,MAAMjB,YAInC,GAAW,IAAPuB,EAAU,CACV,MAAMI,EAAU1P,KAAKwP,aAAa,YAClC,GAAIE,EAAS,CACT,MAAMC,EAAMD,EAAQZ,OAAOjM,OAC3B6M,EAAQT,aAAeU,EAAM,EACzBD,EAAQtD,cACRsD,EAAQtD,aAAa4C,MAAMjB,UAEnC,CACJ,CAjBA,CAkBJ,CAIA,kBAAA6B,GACI,MAAML,EAAUvP,KAAKwP,aAAa,QAC9BD,GACIA,EAAQnD,cACRmD,EAAQnD,aAAa4C,MAAMjB,UAGvC,CAIA,sBAAA8B,GACI,MAAMN,EAAUvP,KAAKwP,aAAa,YAC9BD,GACIA,EAAQnD,cACRmD,EAAQnD,aAAa4C,MAAMjB,UAGvC,CAQA,GAAAjJ,CAAI6I,EAAQmC,EAAO,OAAQhQ,GACvB,IAAIuO,EACJ,IAAKrO,KAAKwG,YAEN,YADAxG,KAAKoG,eAAe2J,KAAK,CAAEpC,SAAQmC,OAAMhQ,YAG7C,IAAIkQ,EAsBJ,QArBKlQ,aAAyC,EAASA,EAAQ4E,OAAS1E,KAAKwG,YAAYxG,KAAK+K,MAAMjL,EAAQ4E,OACxGsL,EAAehQ,KAAKwG,YAAYxG,KAAK+K,MAAMjL,EAAQ4E,MACnD1E,KAAKgG,WAAWiK,IAAItC,EAAOrH,GAAIxG,EAAQ4E,OAGvCsL,EAAehQ,KAAKwG,YAAYxG,KAAK+K,MAAM4C,EAAOrH,KAElDxG,aAAyC,EAASA,EAAQ4E,QAC1D1E,KAAKgG,WAAWiK,IAAItC,EAAOrH,GAAIxG,EAAQ4E,MACvCiJ,EAAOuC,SAASlG,SAAQ,KACpBhK,KAAKgG,WAAWmK,OAAOxC,EAAOrH,GAAG,KAGzCwJ,EAAgG,QAAxFzB,EAAK2B,aAAmD,EAASA,EAAaF,YAAyB,IAAPzB,EAAgBA,EAAKyB,EAC7HhQ,EACIA,IAAYkQ,aAAmD,EAASA,EAAalQ,SAC/E,IACKA,KACAkQ,aAAmD,EAASA,EAAalQ,cAE9E6F,EACFmK,GAAQ,QACZ,IAAK,SACD,OAAO9P,KAAKoQ,iBAAiBzC,EAAQ7N,GACzC,IAAK,OACD,OAAOE,KAAKqQ,eAAe1C,EAAQ7N,GACvC,IAAK,SACD,OAAOE,KAAKsQ,iBAAiB3C,EAAQ7N,GACzC,IAAK,OACD,OAAOE,KAAKuQ,eAAe5C,EAAQ7N,GACvC,IAAK,OACD,OAAOE,KAAK6N,eAAeF,EAAQ7N,GACvC,IAAK,OACD,OAAOE,KAAKwQ,eAAe7C,EAAQ7N,GACvC,IAAK,QACD,OAAOE,KAAKyQ,gBAAgB9C,EAAQ7N,GACxC,IAAK,MACD,OAAOE,KAAK0Q,cAAc/C,EAAQ7N,GACtC,QACI,MAAM,IAAI6Q,MAAM,iBAAiBb,KAE7C,CAeA,IAAAc,CAAKjD,EAAQmC,EAAM/E,GACf,IAAIsD,EACJ,MAAM3J,EAAiD,QAAzC2J,EAAKrO,KAAKgG,WAAW8H,IAAIH,EAAOrH,WAAwB,IAAP+H,EAAgBA,EAAKV,EAAOrH,GAC3F,IAAK,MAAMuK,IAAK,CAAC,kBAAmB,qBAAqBC,QAAOC,IAAMhG,GAAQgG,IAAMhG,IAChF/K,KAAKwG,YAAYqK,GAAGnM,GAAQ,IACrB1E,KAAKwG,YAAYqK,GAAGnM,GACvBoL,QAIR,OADA9P,KAAK8E,IAAI6I,EAAQmC,GACV9P,KAAKwG,WAChB,CAIA,YAAAwK,GACIhR,KAAK+I,aAAakI,WAClBjR,KAAKqK,mBACT,CAIA,aAAA6G,GACIlR,KAAKkJ,cAAc+H,WACnBjR,KAAKqK,mBACT,CAIA,OAAA8G,GACQnR,KAAKoR,aAGTpR,KAAKyF,iBAAiB0L,UACtBpR,MAAMoR,UACV,CAQA,UAAAE,GACIrR,KAAK+I,aAAauI,SAClBtR,KAAKqK,mBACT,CAQA,WAAAkH,GACIvR,KAAKkJ,cAAcoI,SACnBtR,KAAKqK,mBACT,CAIA,QAAAmH,GAIInL,MAAMyG,KAAK9M,KAAKiI,WAAW4E,WAAWa,SAAQC,GAAUA,EAAO5K,UAC/D/C,KAAK2I,WAAWW,aAAauD,QAAQa,SAAQC,GAAUA,EAAO5K,SAClE,CAOA,mBAAA0O,CAAoBC,GAChB,OAAQA,GACJ,IAAK,OACD,OAAO1R,KAAK+I,aAAa4I,UAC7B,IAAK,QACD,OAAO3R,KAAKkJ,cAAcyI,UAEtC,CAMA,wBAAAC,GACI,OAAQ5R,KAAK+F,uBACjB,CAIA,OAAA8L,CAAQ/B,GACJ,OAAQA,GACJ,IAAK,SACD,OAA4C,IAArC9P,KAAK2H,aAAakF,QAAQhK,OACrC,IAAK,OACD,OAAuD,IAAhD7C,KAAK2I,WAAWW,aAAauD,QAAQhK,OAChD,IAAK,SACD,OAA4C,IAArC7C,KAAKiH,aAAa4F,QAAQhK,OACrC,IAAK,OACD,OAAyD,IAAlD7C,KAAK+I,aAAaO,aAAauD,QAAQhK,OAClD,IAAK,OACD,OAAO7C,KAAKiI,WAAW4J,QAC3B,IAAK,OACD,OAAkD,IAA3C7R,KAAKoH,aAAaE,MAAMuF,QAAQhK,OAC3C,IAAK,QACD,OAA0D,IAAnD7C,KAAKkJ,cAAcI,aAAauD,QAAQhK,OACnD,IAAK,MACD,OAAiD,IAA1C7C,KAAKyH,YAAYH,MAAMuF,QAAQhK,OAC1C,QACI,OAAO,EAEnB,CAOA,mBAAMoK,CAAclC,EAAM+G,EAAgBC,EAAgB,CAAC,GACvD,IAAI1D,EAAI2D,EAAIC,EAAIC,EAEhBlS,KAAKwG,YAAc,CACf,kBAA+D,QAA3C6H,EAAK0D,EAAc,0BAAuC,IAAP1D,EAAgBA,EAAK,CAAC,EAC7F,oBAAmE,QAA7C2D,EAAKD,EAAc,4BAAyC,IAAPC,EAAgBA,EAAK,CAAC,GAErGhS,KAAKoG,eAAesH,SAAQ,EAAGC,SAAQmC,OAAMhQ,cACzCE,KAAK8E,IAAI6I,EAAQmC,EAAMhQ,EAAQ,IAEnCE,KAAKoG,eAAevD,OAAS,EAC7B7C,KAAKkN,gBAAkB4E,EAEvB,MAAMhI,QAAegI,EAAeK,SAE9B,SAAE9E,EAAQ,SAAE+E,EAAQ,SAAEC,EAAQ,UAAEC,EAAS,QAAEC,EAAO,cAAEC,GAAkB1I,EAE5E,GAAIuD,EAAU,CACV,MAAM,cAAEnB,EAAa,KAAEO,GAASY,EAC5BZ,GAAiB,sBAAT1B,GACR/K,KAAKiI,WAAWgF,cAAcR,GAE9B1B,IACA/K,KAAK+K,KAAOA,GAEZmB,GACAlM,KAAKsN,aAAapB,EAAc5F,GAExC,MAGQyE,IACA/K,KAAK+K,KAAOA,GAUpB,QAPqFpF,KAAhF4M,aAAyC,EAASA,EAAQE,oBAC3DzS,KAAK+F,yBAA2BwM,EAAQE,iBACtB,oBAAdzS,KAAK+K,MACL/K,KAAKyH,YAAYH,MAAMoL,UAAU1S,KAAK+F,0BAI1CqM,EAAU,CACV,MAAM,cAAElG,EAAa,QAAEW,EAAO,KAAE8F,GAASP,EACnCQ,EAA0G,QAA7FX,EAAKpF,aAAyC,EAASA,EAAQgG,KAAIlF,GAAUA,EAAOrH,YAAwB,IAAP2L,EAAgBA,EAAK,GAE7IjS,KAAK2I,WAAW4B,OAAOuE,OAClBgC,QAAO1R,IAAUwT,EAAUE,SAAS1T,EAAM4P,MAAM1I,MAChDuM,KAAIzT,GAASA,EAAM4P,MAAMjM,UAE9B,MAAMgQ,EAAW/S,KAAK2I,WAAW4B,OAAOuE,OAAO+D,KAAIzT,GAASA,EAAM4P,MAAM1I,KAGxE,IAFAuG,SAAkDA,EAAQiE,QAAOnD,IAAWoF,EAASD,SAASnF,EAAOrH,MAAKuM,KAAIlF,GAAU3N,KAAK2I,WAAW5B,UAAU4G,MAE1I,EAAAqF,SAASC,aAAaL,EAAW5S,KAAK2I,WAAW4B,OAAOuE,OAAO+D,KAAIzT,GAASA,EAAM4P,MAAM1I,OAC5FtG,KAAK2I,WAAW4B,OAAOuE,OAAOpB,SAAQ,CAACtO,EAAO8T,KAC1C,MAAMC,EAAWP,EAAU7D,WAAUzI,GAAMlH,EAAM4P,MAAM1I,IAAMA,IACzD6M,GAAY,GAAKA,GAAYD,GAC7BlT,KAAK2I,WAAW4B,OAAO6I,UAAUD,EAAU/T,EAC/C,IAGR,GAAI8M,EAAe,CACf,MAAMgH,EAAQlT,KAAK2I,WAAWW,aAAauD,QAAQkC,WAAUpB,GAAUA,EAAOrH,KAAO4F,EAAc5F,KAC/F4M,IACAlT,KAAK2I,WAAWsG,aAAeiE,EACU,QAAxChB,EAAKlS,KAAK2I,WAAWuD,qBAAkC,IAAPgG,GAAyBA,EAAGnE,WAErF,CACI4E,GAAQA,EAAO,EACf3S,KAAK8H,aAAa8B,iBAAiB,CAAC,EAAM+I,EAAMA,KAIhD3S,KAAK2I,WAAWW,aAAauD,QAAQa,SAAQC,GAAUA,EAAO5K,UAC9D/C,KAAK2I,WAAWkB,OAExB,CAEIwI,EACArS,KAAK+I,aAAasK,UAAUhB,GAGf,oBAATtH,GACA/K,KAAKgR,eAITsB,EACAtS,KAAKkJ,cAAcmK,UAAUf,GAGhB,oBAATvH,GACA/K,KAAKkR,gBAITsB,GACAxS,KAAKyI,aAAamB,iBAAiB4I,GAElCxS,KAAKuF,cAIN,EAAA+C,YAAYgL,QACZtT,KAAK4F,UAAUhF,QAAQkJ,GAE/B,CAIA,UAAA6C,GAoBI,MAjBe,CACXU,SAAU,CACNnB,cAAelM,KAAK6E,SAASqH,cAC7BO,KAAoB,oBAAdzM,KAAK+K,MACL/K,KAAKkF,eACLlF,KAAKiI,WAAW0E,cAE1ByF,SAAU,CACNlG,cAAelM,KAAK2I,WAAWuD,cAC/BW,QAASxG,MAAMyG,KAAK9M,KAAK2I,WAAWW,aAAauD,SACjD8F,KAAM3S,KAAK8H,aAAa0K,gBAAgB,IAE5CH,SAAUrS,KAAK+I,aAAawK,YAC5BjB,UAAWtS,KAAKkJ,cAAcqK,YAC9BhB,QAAS,CAAEE,kBAAmBzS,KAAK+F,yBACnCyM,cAAexS,KAAKyI,aAAa+J,gBAGzC,CAMA,+BAAAgB,GACsB,oBAAdxT,KAAK+K,OACD/K,KAAKyH,YAAYH,MAAMqK,WACvB3R,KAAK+F,yBAA0B,EAC/B/F,KAAKyH,YAAYH,MAAMuC,SAGvB7J,KAAK+F,yBAA0B,EAC/B/F,KAAKyH,YAAYH,MAAMV,OACvB5G,KAAKuL,0BAETvL,KAAKqK,oBAEb,CAMA,0BAAAoJ,CAA2B/B,GACV,UAATA,EACI1R,KAAKkJ,cAAcyI,UACnB3R,KAAKkJ,cAAcW,OAGnB7J,KAAKkJ,cAActC,OAInB5G,KAAK+I,aAAa4I,UAClB3R,KAAK+I,aAAac,OAGlB7J,KAAK+I,aAAanC,MAG9B,CAMA,YAAA8M,CAAaC,GACT,GAAIA,EAAOxL,WACP,OAAQwL,EAAOxL,YACX,IAAK,UACDnI,KAAKiI,WAAWE,WAAa,EAAA7D,OAAO8D,WAAWC,QAC/C,MACJ,IAAK,QACDrI,KAAKiI,WAAWE,WAAa,EAAA7D,OAAO8D,WAAWwL,MAC/C,MACJ,IAAK,oBACD5T,KAAKiI,WAAWE,WAAa,EAAA7D,OAAO8D,WAAWyL,kBAI/D,CAIA,OAAAhH,CAAQiD,GACJ,OAAQA,QAAmCA,EAAO,QAC9C,IAAK,OACD,OAAO9P,KAAKiI,WAAW4E,UAC3B,IAAK,OACD,OAAO,IAAAgG,KAAI7S,KAAK+I,aAAaM,QAAQyF,QAAQgF,GAAKA,EAAE9E,QACxD,IAAK,QACD,OAAO,IAAA6D,KAAI7S,KAAKkJ,cAAcG,QAAQyF,QAAQgF,GAAKA,EAAE9E,QACzD,IAAK,SACD,OAAOhP,KAAKiH,aAAa8M,WAC7B,IAAK,MACD,OAAO/T,KAAKyH,YAAYH,MAAMyM,WAClC,IAAK,OACD,OAAO/T,KAAKoH,aAAaE,MAAMyM,WACnC,IAAK,SACD,OAAO/T,KAAK2H,aAAaoM,WAC7B,QACI,MAAM,IAAIpD,MAAM,iBAAiBb,KAE7C,CAIA,aAAAkE,CAAcvP,GACVzE,KAAKmC,KAAKR,QAAQsM,UAAYjO,KAAK+K,IACvC,CAIA,sBAAAQ,GACI,IAAI6D,EAAUpP,KAAKkM,cACnB,MAAM+H,EAAejU,KAAK4K,cAAcqJ,aACxCA,EAAanI,MAAQsD,EAAUA,EAAQhQ,MAAM8U,MAAQ,GACrDD,EAAa7U,MAAQgQ,EAAUA,EAAQhQ,MAAM+U,QAAU,EAC3D,CAIA,kBAAAxI,GACI,IAAIyD,EAAUpP,KAAKkM,cACff,EAAW,GACXiE,GAAWA,aAAmB,EAAA5D,iBAC9BL,EAAWiE,EAAQ3D,QAAQtI,MAE/BnD,KAAKqF,oBAAoBzD,KAAK,CAC1BuJ,SAAUA,EACVC,SAAUpL,KAAKoF,eAEnBpF,KAAKoF,aAAe+F,CACxB,CAOA,cAAAoF,CAAe5C,EAAQ7N,GACnB,IAAK6N,EAAOrH,GAER,YADAkH,QAAQC,MAAM,4DAGlB3N,EAAUA,GAAWE,KAAKmG,kBAAkB2H,IAAIH,IAAW,CAAC,EAC5D3N,KAAKmG,kBAAkB8J,IAAItC,EAAQ7N,GACnC,MAAMgL,EAAO,SAAUhL,EAAUA,EAAQgL,KAAO5G,EAChDlE,KAAK+I,aAAahC,UAAU4G,EAAQ7C,GACpC9K,KAAKqK,mBACT,CAYA,cAAAwD,CAAeF,EAAQ7N,GACnB,IAAK6N,EAAOrH,GAER,YADAkH,QAAQC,MAAM,4DAGlB3N,EAAUA,GAAW,CAAC,EACtB,MAAM2M,EAAOzM,KAAKiI,WACZ8C,EAAOjL,EAAQiL,MAAQ,YAC7B,IAAIqJ,EAAMpU,KAAKkM,cACXpM,EAAQsU,MACRA,GAAM,IAAAlF,MAAKzC,EAAKI,WAAWf,GAASA,EAAMxF,KAAOxG,EAAQsU,OAAQ,MAErE,MAAM,MAAEhV,GAAUuO,EAGlBvO,EAAMuC,QAAU,IAAKvC,EAAMuC,QAAS2E,GAAIqH,EAAOrH,IAC3ClH,EAAMiV,gBAAgB,EAAAC,QAEtBlV,EAAMiV,KAAOjV,EAAMiV,KAAKE,UAAU,CAC9BC,WAAY,gBAGW,iBAAfpV,EAAMiV,MAAsBjV,EAAMiV,OAE9CjV,EAAMqV,WAAY,IAAAC,SAAQtV,EAAMqV,UAAW,YAE/ChI,EAAK1F,UAAU4G,EAAQ,CAAE5C,OAAMqJ,QAKb,oBAAd3H,EAAK1B,MACL/K,KAAKkG,kBAAkB+J,IAAItC,EAAQ7N,IAEd,IAArBA,EAAQiO,UACRtB,EAAKG,eAAee,EAE5B,CAOA,eAAA8C,CAAgB9C,EAAQ7N,GACpB,IAAK6N,EAAOrH,GAER,YADAkH,QAAQC,MAAM,4DAIlB,MAAM3C,EAAO,SADbhL,EAAUA,GAAWE,KAAKmG,kBAAkB2H,IAAIH,IAAW,CAAC,GAC3B7N,EAAQgL,KAAO5G,EAChDlE,KAAKmG,kBAAkB8J,IAAItC,EAAQ7N,GACnCE,KAAKkJ,cAAcnC,UAAU4G,EAAQ7C,GACrC9K,KAAKqK,mBACT,CAOA,aAAAqG,CAAc/C,EAAQ7N,GAClB,IAAIuO,EACJ,IAAKV,EAAOrH,GAER,YADAkH,QAAQC,MAAM,4DAIlB,MAAM3C,EAA+B,QAAvBuD,GADdvO,EAAUA,GAAW,CAAC,GACKgL,YAAyB,IAAPuD,EAAgBA,EAAKnK,EAClElE,KAAKyH,YAAYV,UAAU4G,EAAQ7C,GACnC9K,KAAKqK,oBACDrK,KAAKyH,YAAYH,MAAMqN,UACvB3U,KAAKyH,YAAYH,MAAMV,MAE/B,CAOA,cAAA4J,CAAe7C,EAAQ7N,GACnB,IAAIuO,EACJ,IAAKV,EAAOrH,GAER,YADAkH,QAAQC,MAAM,4DAIlB,MAAM3C,EAA+B,QAAvBuD,GADdvO,EAAUA,GAAW,CAAC,GACKgL,YAAyB,IAAPuD,EAAgBA,EAAKnK,EAClElE,KAAKoH,aAAaL,UAAU4G,EAAQ7C,GACpC9K,KAAKqK,oBACDrK,KAAKoH,aAAaE,MAAMqN,UACxB3U,KAAKoH,aAAaE,MAAMV,MAEhC,CAOA,gBAAA0J,CAAiB3C,EAAQ7N,GAChB6N,EAAOrH,IAKZtG,KAAKiH,aAAaF,UAAU4G,GAC5B3N,KAAKqK,oBACDrK,KAAKiH,aAAa0N,UAClB3U,KAAKiH,aAAaL,QAPlB4G,QAAQC,MAAM,2DAStB,CAOA,gBAAA2C,CAAiBzC,EAAQ7N,GAChB6N,EAAOrH,IAKZtG,KAAK2H,aAAaZ,UAAU4G,GAC5B3N,KAAKqK,oBACDrK,KAAK2H,aAAagN,UAClB3U,KAAK2H,aAAaf,QAPlB4G,QAAQC,MAAM,2DAStB,CACA,cAAA4C,CAAe1C,EAAQ7N,GACnB,IAAK6N,EAAOrH,GAER,YADAkH,QAAQC,MAAM,4DAGlB3N,EAAUA,GAAW,CAAC,EACtB,MAAM,MAAEV,GAAUuO,EAGlBvO,EAAMuC,QAAU,IAAKvC,EAAMuC,QAAS2E,GAAIqH,EAAOrH,IAC3ClH,EAAMiV,gBAAgB,EAAAC,QAEtBlV,EAAMiV,KAAOjV,EAAMiV,KAAKE,UAAU,CAC9BC,WAAY,gBAGW,iBAAfpV,EAAMiV,MAAsBjV,EAAMiV,OAE9CjV,EAAMqV,WAAY,IAAAC,SAAQtV,EAAMqV,UAAW,YAE/CzU,KAAK2I,WAAW5B,UAAU4G,GAC1B3N,KAAKqK,oBACDrK,KAAK2I,WAAWgM,UAChB3U,KAAK2I,WAAW/B,MAExB,CAIA,YAAA4I,CAAahG,GACT,MAAM4F,EAAUpP,KAAKqP,iBACrB,IAAKD,EACD,OAAO,KAEX,MAAMwF,EAAOvO,MAAMyG,KAAK9M,KAAKiI,WAAW4M,WAClClF,EAAMiF,EAAK/R,OACXqQ,EAAQ0B,EAAKE,QAAQ1F,GAC3B,MAAkB,aAAd5F,EACO0J,EAAQ,EAAI0B,EAAK1B,EAAQ,GAAe,IAAVA,EAAc0B,EAAKjF,EAAM,GAAK,KAGhEuD,EAAQvD,EAAM,EACfiF,EAAK1B,EAAQ,GACbA,IAAUvD,EAAM,EACZiF,EAAK,GACL,IACd,CAIA,cAAAvF,GACI,MAAMD,EAAUpP,KAAK6E,SAASqH,cAC9B,IAAKkD,EACD,OAAO,KAEX,MAAMhQ,EAAQgQ,EAAQhQ,MAChBwV,EAAO5U,KAAKiI,WAAW4M,UAC7B,OAAO,IAAA3F,MAAK0F,GAAMG,GAAOA,EAAIjG,OAAOgG,QAAQ1V,IAAU,KAAM,IAChE,CAIA,gBAAA+K,CAAiBc,EAAQC,GACjBA,EAAKC,WACLD,EAAKC,SAAS/L,MAAM4V,WAAa,IAAI/Q,KAErCiH,EAAKE,WACLF,EAAKE,SAAShM,MAAM4V,UAAY9J,EAAKE,SAAShM,MAAM4V,UAAUC,QAAQhR,EAAc,KAExFjE,KAAKiF,eAAerD,KAAKsJ,EAC7B,CAIA,iBAAAjB,CAAkBgB,EAAQC,GAClBA,EAAKC,WACLD,EAAKC,SAAS/L,MAAM4V,WAAa,IAAIhR,KAErCkH,EAAKE,WACLF,EAAKE,SAAShM,MAAM4V,UAAY9J,EAAKE,SAAShM,MAAM4V,UAAUC,QAAQjR,EAAe,KAEzFhE,KAAKmF,gBAAgBvD,KAAKsJ,GAC1BlL,KAAKqK,mBACT,CAIA,kBAAAI,GACwD,IAAhDzK,KAAK2I,WAAWW,aAAauD,QAAQhK,QACrC7C,KAAK2I,WAAWkB,OAEpB7J,KAAKqK,mBACT,CAIA,iBAAAA,GACSrK,KAAKyF,iBAAiByP,QAC/B,EAEJ,IAAI,GACJ,SAAWzV,GAOPA,EAAQ0V,QAHR,SAAiBC,EAAOC,GACpB,OAAOD,EAAMtK,KAAOuK,EAAOvK,IAC/B,EAiBArL,EAAQsN,oBAZR,SAASA,EAAoBa,EAAQkC,GAC5BA,IAGa,aAAdA,EAAKpL,KAIToL,EAAKiE,SAASrG,SAAQ/I,IAClBoI,EAAoBa,EAAQjJ,EAAM,IAJlCmL,EAAKjD,QAAUiD,EAAKjD,QAAQiE,QAAOnD,IAAWA,EAAOyD,YAAczD,EAAOC,SAAWA,IAM7F,EA0DAnO,EAAQ4H,aArDR,MACI,WAAAxH,GAIIG,KAAKsV,gBAAkB,CAAC9Q,EAASC,KAC7B,OAAQA,EAAIC,MACR,IAAK,cACD,CACI,MAAMiJ,EAASlJ,EAAIE,MAEnB,GAAI3E,KAAKuV,OAAOrG,MAAKsG,GAAKA,EAAE7H,SAAWA,IACnC,MAGJ,MAAM7C,EAAO9K,KAAKuV,OAAOvV,KAAKuV,OAAO1S,OAAS,GAAGiI,KACjD9K,KAAKuV,OAAOxF,KAAK,CAAEpC,SAAQ7C,QAC/B,CACA,MACJ,IAAK,gBACD,CACI,MAAM6C,EAASlJ,EAAIE,MACnB,EAAAqO,SAASyC,iBAAiBzV,KAAKuV,QAAQC,GAAKA,EAAE7H,SAAWA,GAC7D,EAKR,OAAO,CAAI,EAEf3N,KAAKuV,OAAS,IAAIlP,MAClBrG,KAAK0V,OAAS,IAAI,EAAA5O,MAClB,EAAAwB,YAAYC,mBAAmBvI,KAAK0V,OAAQ1V,KAAKsV,gBACrD,CAIA,SAAIhO,GACA,OAAOtH,KAAK0V,MAChB,CAMA,SAAA3O,CAAU4G,EAAQ7C,GACd6C,EAAOC,OAAS,KAChB,MAAM+H,EAAO,CAAEhI,SAAQ7C,QACjBoI,EAAQ,EAAAF,SAAS4C,WAAW5V,KAAKuV,OAAQI,EAAMlW,EAAQ0V,SAC7D,EAAAnC,SAAS6C,OAAO7V,KAAKuV,OAAQrC,EAAOyC,GACpC3V,KAAK0V,OAAO1K,aAAakI,EAAOvF,EACpC,GA4OJlO,EAAQuJ,eAtOR,MAII,WAAAnJ,GACIG,KAAK8V,iBAAkB,EACvB9V,KAAKuV,OAAS,IAAIlP,MAClBrG,KAAK+V,SAAW,IAAI,EAAA7V,OAAOF,MAC3BA,KAAKgW,SAAW,IAAI,EAAAC,OAAO,CACvBC,eAAgB,OAChBC,eAAgB,OAChBC,eAAe,EACf3M,YAAa,aAEjBzJ,KAAKqW,cAAgB,IAAI,EAAAC,aACzBtW,KAAKgW,SAASnM,OACd7J,KAAKqW,cAAcxM,OACnB7J,KAAKuW,aAAe,KACpBvW,KAAKgW,SAASjM,eAAeC,QAAQhK,KAAKiK,kBAAmBjK,MAC7DA,KAAKgW,SAASQ,qBAAqBxM,QAAQhK,KAAKyW,wBAAyBzW,MACzEA,KAAKqW,cAAc3L,cAAcV,QAAQhK,KAAK0W,iBAAkB1W,KACpE,CAIA,aAAI2R,GACA,OAAO3R,KAAKgW,SAASrE,SACzB,CAIA,WAAItI,GACA,OAAOrJ,KAAKgW,QAChB,CAIA,gBAAI1M,GACA,OAAOtJ,KAAKqW,aAChB,CAIA,WAAI/L,GACA,OAAOtK,KAAK+V,QAChB,CAQA,MAAAzE,GACI,MAAMqF,EAAW3W,KAAKuW,cAAiBvW,KAAKuV,OAAO1S,OAAS,GAAK7C,KAAKuV,OAAO,GAAG5H,OAC5EgJ,GACA3W,KAAK+N,SAAS4I,EAASrQ,GAE/B,CAMA,QAAAyH,CAASzH,GACL,MAAMqH,EAAS3N,KAAK4W,gBAAgBtQ,GAChCqH,IACA3N,KAAKgW,SAAS5J,aAAeuB,EAAOvO,MACpCuO,EAAOI,WAEf,CAIA,GAAAa,CAAItI,GACA,OAAoC,OAA7BtG,KAAK4W,gBAAgBtQ,EAChC,CAIA,QAAA2K,GACIjR,KAAKgW,SAAS5J,aAAe,IACjC,CAMA,SAAArF,CAAU4G,EAAQ7C,GACd6C,EAAOC,OAAS,KAChBD,EAAO9D,OACP,MAAM8L,EAAO,CAAEhI,SAAQ7C,QACjBoI,EAAQlT,KAAK6W,iBAAiBlB,GACpC,EAAA3C,SAAS6C,OAAO7V,KAAKuV,OAAQrC,EAAOyC,GACpC3V,KAAKqW,cAAcrL,aAAakI,EAAOvF,GACvC,MAAMvO,EAAQY,KAAKgW,SAAS5C,UAAUF,EAAOvF,EAAOvO,OAGpDA,EAAMuC,QAAU,CAAE2E,GAAIqH,EAAOrH,IACzBlH,EAAMiV,gBAAgB,EAAAC,QAEtBlV,EAAMiV,KAAOjV,EAAMiV,KAAKE,UAAU,CAC9BC,WAAY,YAGW,iBAAfpV,EAAMiV,MAAmC,IAAdjV,EAAMiV,KAE7CjV,EAAMqV,WAAY,IAAAC,SAAQtV,EAAMqV,UAAW,UAAW,cAEhDrV,EAAMiV,MAASjV,EAAM8U,QAE3B9U,EAAMiV,KAAO,EAAAyC,QAAQvC,UAAU,CAC3BC,WAAY,aAGpBxU,KAAK+W,oBACT,CAIA,SAAAxD,GACI,MAAMyD,EAA2C,OAA/BhX,KAAKgW,SAAS5J,aAC1BS,EAAUxG,MAAMyG,KAAK9M,KAAKqW,cAAcxJ,SAE9C,MAAO,CACHmK,YACA9K,cAHkBW,EAAQ7M,KAAKgW,SAAS/G,cAIxCgI,SAAUjX,KAAK8V,gBACfjJ,UAER,CAIA,SAAAwG,CAAU6D,GACFA,EAAKhL,eACLlM,KAAK+N,SAASmJ,EAAKhL,cAAc5F,IAEjC4Q,EAAKF,WACLhX,KAAKiR,WAEJiG,EAAKD,SACNjX,KAAK6J,MAEb,CAIA,IAAAA,GACI7J,KAAK8V,iBAAkB,EACvB9V,KAAK+W,oBACT,CAIA,IAAAnQ,GACI5G,KAAK8V,iBAAkB,EACvB9V,KAAK+W,oBACT,CAIA,gBAAAF,CAAiBlB,GACb,OAAO,EAAA3C,SAAS4C,WAAW5V,KAAKuV,OAAQI,EAAMlW,EAAQ0V,QAC1D,CAIA,gBAAAgC,CAAiBxJ,GACb,OAAO,EAAAqF,SAASoE,eAAepX,KAAKuV,QAAQ8B,GAAKA,EAAE1J,SAAWA,GAClE,CAIA,kBAAA2J,CAAmBlY,GACf,MAAMuW,GAAO,IAAAzG,MAAKlP,KAAKuV,QAAQzJ,GAASA,EAAM6B,OAAOvO,QAAUA,IAC/D,OAAOuW,EAAOA,EAAKhI,OAAS,IAChC,CAIA,eAAAiJ,CAAgBtQ,GACZ,MAAMqP,GAAO,IAAAzG,MAAKlP,KAAKuV,QAAQzJ,GAASA,EAAM6B,OAAOrH,KAAOA,IAC5D,OAAOqP,EAAOA,EAAKhI,OAAS,IAChC,CAIA,kBAAAoJ,GACI/W,KAAKqW,cAAc3D,UAAyC,OAA/B1S,KAAKgW,SAAS5J,cAC3CpM,KAAKgW,SAAStD,UAAU1S,KAAK8V,iBAAmD,IAAhC9V,KAAKgW,SAASlH,OAAOjM,QACrE7C,KAAK+V,SAASnU,MAClB,CAIA,iBAAAqI,CAAkBgB,EAAQC,GACtB,MAAMqM,EAAYrM,EAAKsM,cACjBxX,KAAKsX,mBAAmBpM,EAAKsM,eAC7B,KACAC,EAAYvM,EAAKkB,aACjBpM,KAAKsX,mBAAmBpM,EAAKkB,cAC7B,KACFmL,GACAA,EAAU1N,OAEV4N,GACAA,EAAU7Q,OAEd5G,KAAKuW,aAAekB,GAAaF,EACjCvX,KAAK+W,oBACT,CAIA,uBAAAN,CAAwBxL,EAAQC,GAC5BA,EAAK9L,MAAM4P,MAAMjB,UACrB,CAIA,gBAAA2I,CAAiBzL,EAAQ0C,GACjBA,IAAW3N,KAAKuW,eAChBvW,KAAKuW,aAAe,MAExB,EAAAvD,SAAS0E,SAAS1X,KAAKuV,OAAQvV,KAAKmX,iBAAiBxJ,IACrD3N,KAAKgW,SAAS2B,UAAUhK,EAAOvO,OAC/BY,KAAK+W,oBACT,GAGJ,MAAMpQ,UAAuB,EAAArC,OAIzB,WAAAzE,CAAY+X,GACR7X,QACAC,KAAK4E,SAAS,eACd5E,KAAKsG,GAAK,cACVtG,KAAK6X,OAASD,EACd5X,KAAK8X,gBAAgB,wBACzB,CACA,WAAAC,CAAYxV,GAEC,UADDA,EAAMmC,MAEN1E,KAAKgY,mBAGjB,CAIA,aAAAhE,CAAcvP,GACV1E,MAAMiU,cAAcvP,GACpBzE,KAAKmC,KAAK8V,iBAAiB,QAASjY,KACxC,CAKA,cAAAkY,CAAezT,GACXzE,KAAKmC,KAAKgW,oBAAoB,QAASnY,MACvCD,MAAMmY,eAAezT,EACzB,CACA,iBAAAuT,GACIhY,KAAK6X,OAAOxG,YAChB,CACA,eAAAyG,CAAgBM,GACZ,MAAMC,EAAW5W,SAAS6W,cAAc,KACxCD,EAASE,KAAO,IAChBF,EAASxJ,SAAW,EACpBwJ,EAASG,KAAOJ,EAChBC,EAASrD,UAAY,YACrBhV,KAAKmC,KAAKsW,YAAYJ,EAC1B,EAEJ5Y,EAAQkH,eAAiBA,EACzB,MAAMkE,UAAqB,EAAAvG,OAIvB,WAAAzE,CAAY+X,GACR7X,QACAC,KAAK0Y,WAAY,EACjB,MAAMzE,EAAexS,SAAS6W,cAAc,SAC5CrE,EAAavP,KAAO,OACpB1E,KAAKmC,KAAKsW,YAAYxE,GACtBjU,KAAK6X,OAASD,EACd5X,KAAKsG,GAAK,sBACd,CAIA,aAAA0N,CAAcvP,GACV1E,MAAMiU,cAAcvP,GACpBzE,KAAKiU,aAAagE,iBAAiB,QAASjY,MAC5CA,KAAKiU,aAAagE,iBAAiB,QAASjY,MAC5CA,KAAKiU,aAAagE,iBAAiB,OAAQjY,KAC/C,CAIA,cAAAkY,CAAezT,GACX1E,MAAMmY,eAAezT,GACrBzE,KAAKiU,aAAakE,oBAAoB,QAASnY,MAC/CA,KAAKiU,aAAakE,oBAAoB,QAASnY,MAC/CA,KAAKiU,aAAakE,oBAAoB,OAAQnY,KAClD,CACA,WAAA+X,CAAYxV,GACR,OAAQA,EAAMmC,MACV,IAAK,QACI1E,KAAK2Y,UAAUpW,GACpB,MACJ,IAAK,QACDvC,KAAK4Y,UAAUrW,GACf,MACJ,IAAK,OACDvC,KAAK0Y,WAAY,EAG7B,CAIA,eAAMC,CAAUpW,GACZ,GAAiB,SAAbA,EAAMsW,IAAgB,CACtB,MAAMlL,EAAS3N,KAAK6X,OAAO3L,cAC3B,GAAc,MAAVyB,EACA,OAEJ,MAAMmL,EAAUnL,EAAOvO,MAAM8U,MACvBD,EAAejU,KAAKiU,aACpB8E,EAAU9E,EAAanI,MAC7BmI,EAAa+E,OACTD,IAAYD,EACZnL,EAAOvO,MAAM8U,MAAQ6E,EAGrB9E,EAAanI,MAAQgN,CAE7B,CACJ,CAIA,SAAAF,CAAUrW,GAEN,GAAqB,IAAjBA,EAAM0W,QAAgBjZ,KAAK0Y,UAC3B,OAEJ,MAAMzE,EAAejU,KAAKiU,aAC1B1R,EAAMS,iBACNT,EAAMU,kBACNjD,KAAK0Y,WAAY,EACjB,MAAMQ,EAAYjF,EAAanI,MAAMgJ,QAAQ,MAC1B,IAAfoE,EACAjF,EAAakF,SAGblF,EAAamF,kBAAkB,EAAGF,EAE1C,CAIA,gBAAIjF,GACA,OAAOjU,KAAKmC,KAAK4R,SAAS,EAC9B,EAEJtU,EAAQoL,aAAeA,EACvB,MAAM9C,UAA6B,EAAA2B,WAC/B,WAAA7J,CAAYC,EAAU,CAAC,GACnBC,MAAMD,GACNE,KAAKsK,QAAU,IAAI,EAAApK,OAAOF,KAC9B,CAIA,eAAAqZ,CAAgB5U,GACZ1E,MAAMsZ,gBAAgB5U,GACtBzE,KAAKsK,QAAQ1I,MACjB,EAEJnC,EAAQsI,qBAAuBA,CAClC,CApdD,CAodG,IAAY,EAAU,CAAC,I,eCrqDnB,MAAMuR,EAIT,WAAAzZ,CAAY0Z,GACRvZ,KAAKwZ,WAAa,EAClBxZ,KAAKyZ,YAAc,EACnBzZ,KAAK0Z,YAAc,IAAI,EAAAxZ,OAAOqZ,GAC9BvZ,KAAK2Z,aAAe,IAAI,EAAAzZ,OAAOqZ,EACnC,CAIA,cAAIK,GACA,OAAO5Z,KAAK0Z,WAChB,CAIA,eAAIG,GACA,OAAO7Z,KAAK2Z,YAChB,CAIA,UAAIG,GACA,OAAO9Z,KAAKwZ,WAAa,CAC7B,CAIA,WAAIO,GACA,OAAO/Z,KAAKyZ,YAAc,CAC9B,CAMA,QAAAO,GACI,MAAMC,EAAWja,KAAK+Z,QAKtB,OAJA/Z,KAAKyZ,cACDzZ,KAAK+Z,UAAYE,GACjBja,KAAK2Z,aAAa/X,KAAK5B,KAAK+Z,SAEzB,IAAI,EAAAG,oBAAmB,KAC1B,MAAMD,EAAWja,KAAK+Z,QACtB/Z,KAAKyZ,YAAcU,KAAKC,IAAI,EAAGpa,KAAKyZ,YAAc,GAC9CzZ,KAAK+Z,UAAYE,GACjBja,KAAK2Z,aAAa/X,KAAK5B,KAAK+Z,QAChC,GAER,CAMA,OAAAM,GACI,MAAMC,EAAUta,KAAK8Z,OAKrB,OAJA9Z,KAAKwZ,aACDxZ,KAAK8Z,SAAWQ,GAChBta,KAAK0Z,YAAY9X,KAAK5B,KAAK8Z,QAExB,IAAI,EAAAI,oBAAmB,KAC1B,MAAMI,EAAUta,KAAK8Z,OACrB9Z,KAAKwZ,aACDxZ,KAAK8Z,SAAWQ,GAChBta,KAAK0Z,YAAY9X,KAAK5B,KAAK8Z,OAC/B,GAER,ECjEG,MAAMS,UAAmB5a,EAI5B,WAAAE,CAAYC,EAAU,CAAE8X,MAAO,IAAIvT,IAC/BtE,MAAM,IACCD,EACH8X,MAAO9X,EAAQ8X,OAAS,IAAIvT,EAC5BhD,eAAgBvB,EAAQuB,gBACpB,IAAI,EAAAC,eAAe,CACfkZ,QAAS,KACGxa,KAAKya,MAAMC,aAAe,kBAOlD1a,KAAK2a,KAAO,EAAAC,WAAWC,UAAU,YAAc,aAI/C7a,KAAK8a,UAAY,EAAAF,WAAWC,UAAU,iBAAmB7a,KAAK2a,KAI9D3a,KAAK+a,qBAAuB,GAI5B/a,KAAKgb,OAAS,IAAI1B,EAAUtZ,MAI5BA,KAAKib,QAAU,EAAAL,WAAWC,UAAU,eAAiB,UACrD7a,KAAKya,MAAQF,EAAWW,YACxBlb,KAAKU,SAAWV,KAAK4X,MAAMlX,SACtBS,MAAK,KAAe,IACpBC,OAAM,KAAe,IAE1B,MAAM+Z,EAAOC,OAAOC,KAAKd,EAAWW,aAAaI,QAAO,CAACC,EAAKC,KACtDA,KAAO1b,IACPyb,EAAIC,GAAOC,KAAKC,MAAMD,KAAKE,UAAU7b,EAAQ0b,MAE1CD,IACR,CAAC,GAEJvb,KAAKya,MAAQ,IAAKF,EAAWW,eAAgBC,GAE7C,MAAMS,EAAcrB,EAAWsB,aAAatY,KACtCuY,EAAcvB,EAAWsB,aAAaE,YACtCC,EAAclc,EAAQsD,OAAStD,EAAQsD,MAAMG,MAAS,CAAC,EACvD0Y,EAAcnc,EAAQsD,OAAStD,EAAQsD,MAAM2Y,aAAgB,CAAC,EA4BpE,GA3BA/b,KAAKkc,OAAS,CACV3Y,KAAM6X,OAAOC,KAAKO,GAAaN,QAAO,CAACC,EAAK1C,KACxC,GAAIA,KAAOmD,EAAY,CACnB,MAAMlQ,EAAQkQ,EAAWnD,GACzB0C,EAAI1C,GAAO/M,CACf,MAEIyP,EAAI1C,GAAO+C,EAAY/C,GAE3B,OAAO0C,CAAG,GACX,CAAC,GACJQ,YAAaX,OAAOC,KAAKd,EAAWsB,aAAaE,aAAaT,QAAO,CAACC,EAAK1C,KACvE,GAAIA,KAAOoD,EAAY,CACnB,MAAMnQ,EAAQmQ,EAAWpD,GACzB0C,EAAI1C,GAAO/M,CACf,MAEIyP,EAAI1C,GAAOiD,EAAYjD,GAE3B,OAAO0C,CAAG,GACX,CAAC,IAEJvb,KAAKya,MAAM0B,SACXnc,KAAK4X,MAAMhT,SAAS,kBAGxB5E,KAAKgB,YAAYob,gBAAgB,IAAI,EAAAC,oBACjCvc,EAAQwc,eACR,IAAK,MAAMC,KAAU,QAAwBzc,EAAQwc,gBACjDtc,KAAKwc,eAAeD,EAGhC,CAIA,QAAIpB,GACA,OAAOnb,KAAKya,KAChB,CAIA,SAAIrX,GACA,OAAOpD,KAAKkc,MAChB,CAMA,oBAAAO,CAAqBC,GACjB,IAAIxF,EAAOwF,EAAIC,QAEVD,EAAIE,eAAe,gBACpB1F,EAAOwF,GAENrW,MAAMwW,QAAQ3F,KACfA,EAAO,CAACA,IAEZA,EAAKxJ,SAAQiI,IACT,IACI3V,KAAKwc,eAAe7G,EACxB,CACA,MAAOlI,GACHzN,KAAK+a,qBAAqBhL,KAAKtC,EACnC,IAER,CAMA,qBAAAqP,CAAsBC,GAClBA,EAAKrP,SAAQgP,IACT1c,KAAKyc,qBAAqBC,EAAI,GAEtC,GAKJ,SAAWnC,GAIPA,EAAWyC,MAAQ,IAAI,EAAArZ,MAAM,gCAAiC,8HAI9D4W,EAAWW,YAAc,CACrBiB,QAA2D,SAAlD,EAAAvB,WAAWC,UAAU,WAAWoC,cACzCC,SAAU,CAAEC,SAAU,GAAIC,QAAS,IACnCC,SAAU,CAAEF,SAAU,GAAIC,QAAS,IACnCd,eAAgB,GAChBgB,YAAkE,SAArD,EAAA1C,WAAWC,UAAU,cAAcoC,cAChDvC,aAAa,GAKjBH,EAAWsB,aAAe,CACtBtY,KAAM,CACFga,KAAM,EAAA3C,WAAWC,UAAU,WAC3B2C,SAAU,EAAA5C,WAAWC,UAAU,eAC/BtB,IAAK,EAAAqB,WAAWC,UAAU,UAC1BrX,IAAK,EAAAoX,WAAWC,UAAU,UAC1B4C,OAAQ,EAAA7C,WAAWC,UAAU,aAC7B6C,SAAU,EAAA9C,WAAWC,UAAU,eAC/B8C,OAAQ,EAAA/C,WAAWC,UAAU,aAC7B+C,aAAc,EAAAhD,WAAWC,UAAU,sBACnCgD,QAAS,EAAAjD,WAAWC,UAAU,iBAAclV,EAC5CmY,UAAW,EAAAlD,WAAWC,UAAU,mBAAgBlV,EAChDoY,QAAS,EAAAnD,WAAWC,UAAU,iBAAclV,EAC5CqY,cAAe,EAAApD,WAAWC,UAAU,uBAAoBlV,GAE5DoW,YAAa,CACTkC,YAAa,EAAArD,WAAWC,UAAU,kBAClCqD,QAAS,EAAAtD,WAAWC,UAAU,cAC9B4C,OAAQ,EAAA7C,WAAWC,UAAU,aAC7BsD,UAAW,EAAAvD,WAAWC,UAAU,gBAChC8C,OAAQ,EAAA/C,WAAWC,UAAU,aAC7BuD,aAAc,EAAAxD,WAAWC,UAAU,mBACnCwD,WAAY,EAAAzD,WAAWC,UAAU,cACjCyD,WAAY,EAAA1D,WAAWC,UAAU,kBAG5C,CA7CD,CA6CGN,IAAeA,EAAa,CAAC,I,eCtLzB,MAAMgE,EAIT,WAAA1e,CAAYC,GAKRE,KAAKwe,KAAO,IAAI,EAAA7a,MAAM,uCACtB3D,KAAKye,QAAU,IAAI,EAAAve,OAAOF,MAC1BA,KAAK0e,OAAS,IAAIzY,IAClBjG,KAAKud,KAAOzd,EAAQyd,KACpBvd,KAAKK,SAAWP,EAAQO,QAC5B,CAIA,WAAI+O,GACA,IAAIf,EAAI2D,EACR,MAAM,KAAEuL,GAASvd,KACX2e,EAAS,EAAAC,OAAOlD,MAAMmD,OAAOC,SAASvG,OACtC,OAAEwG,EAAM,KAAEC,GAASL,EACnBxb,EAAoG,QAA5F6O,EAAgC,QAA1B3D,EAAKsQ,EAAOM,gBAA6B,IAAP5Q,OAAgB,EAASA,EAAG4G,QAAQsI,EAAM,YAAyB,IAAPvL,EAAgBA,EAAK,GAEvI,MAAO,CAAEgN,OAAM7b,OAAM+b,QADL/b,EAAO4b,EAASC,EACFD,SAClC,CAIA,UAAII,GACA,OAAOnf,KAAKye,OAChB,CAQA,QAAAW,CAASjc,EAAMrD,EAAU,CAAC,GACtB,MAAM,KAAEyd,GAASvd,MACX,QAAEqf,GAAYR,QACd,KAAES,GAASxf,EACXyf,EAAM9d,SAASqd,SAASvG,KACxBiH,EAAMrc,GAA+B,IAAvBA,EAAK2R,QAAQyI,GAAcpa,EAAO,EAAAyb,OAAOa,KAAKlC,EAAMpa,GACxE,OAAIqc,IAAQD,EACDD,EAAOtf,KAAK0f,cAAW/Z,GAElC0Z,EAAQM,UAAU,CAAC,EAAG,GAAIH,GACtBF,EACOtf,KAAK0f,cAEX5f,EAAQ8f,aAGT/e,uBAAsB,KACbb,KAAK6f,OAAO,KAG7B,CAQA,QAAAC,CAAShgB,GACL,IAAIuO,EACJ,MAAM,QAAEvL,EAAO,QAAEid,GAAYjgB,EACvBgL,EAA+B,QAAvBuD,EAAKvO,EAAQgL,YAAyB,IAAPuD,EAAgBA,EAAK,IAC5D2R,EAAQhgB,KAAK0e,OAEnB,OADAsB,EAAM/P,IAAI8P,EAAS,CAAEjd,UAASgI,SACvB,IAAI,EAAAoP,oBAAmB,KAC1B8F,EAAM7P,OAAO4P,EAAQ,GAE7B,CAIA,MAAAL,GACIb,OAAOC,SAASY,QACpB,CAQA,KAAAG,GACI,MAAM,SAAExf,EAAQ,QAAE+O,EAAO,KAAEoP,GAASxe,MAC9B,QAAEkf,GAAY9P,EACd+P,EAASnf,KAAKye,QACduB,EAAQhgB,KAAK0e,OACbtB,EAAU,GAEhB4C,EAAMtS,SAAQ,CAACuS,EAAMF,MACbb,aAAyC,EAASA,EAAQzb,MAAMsc,KAChE3C,EAAQrN,KAAKkQ,EACjB,IAGJ,MAAMC,EAAQ9C,EAAQ+C,MAAK,CAACC,EAAGC,IAAMA,EAAEvV,KAAOsV,EAAEtV,OAC1CwV,EAAO,IAAI,EAAAza,gBAGX0a,EAAO1hB,UACT,IAAKqhB,EAAMrd,OAGP,OAFAsc,EAAOvd,KAAKwN,QACZkR,EAAK1f,aAAQ+E,GAGjB,MAAM,QAAE7C,GAAYod,EAAMM,MAC1B,IACI,MAAMtB,EAAUlf,KAAKoP,QAAQ8P,cACR7e,EAASogB,QAAQ3d,EAASsM,KAChCoP,IACX0B,EAAMrd,OAAS,EACf2K,QAAQkT,MAAM,WAAWxB,4BAAkCpc,KAEnE,CACA,MAAOyK,GACHC,QAAQmT,KAAK,WAAWzB,QAAcpc,WAAkByK,EAC5D,CACKgT,GAAM,EAGf,OADKA,IACED,EAAKlS,OAChB,ECtIG,MAAMwS,EAAkB,IAAI,EAAAjd,MAAM,0CAA2C,iNAMvEkd,EAAa,IAAI,EAAAld,MAAM,qCAAsC,2PAM7Dmd,EAAU,IAAI,EAAAnd,MAAM,kCAAmC,kKCXvDod,EAAmB,IAAI,EAAApd,MAAM,2CAA4C,sCCM/E,SAASqd,EAAsBzH,EAAK0H,EAAkBC,EAAejiB,GACxE,MAAM,SAAEoB,EAAQ,MAAEuX,GAAU2B,EACtB4H,EAAc9a,MAAMwW,QAAQoE,GAC5BA,EACA,CAACA,GACP,MAAO,CACH/M,MAAOkN,EAAiB,SACxBjN,QAASiN,EAAiB,WAC1BC,UAAW,KACP,IAAIhT,EACJ,MAAMgT,EAAYC,EAAgB,aAClC,OAASD,EAAUxe,OAAS,IACvBwe,EAAUE,MAAKC,IAAuB,IAAZA,KACS,QAAlCnT,EAAK6S,EAAcG,iBAA8B,IAAPhT,GAAgBA,CAAY,EAEhFoT,UAAW,KACP,IAAIpT,EAEJ,OADkBiT,EAAgB,aAChBC,MAAKC,IAAuB,IAAZA,KACM,QAAlCnT,EAAK6S,EAAcO,iBAA8B,IAAPpT,GAAgBA,CAAY,EAEhFsD,UAAW,KACP,IAAItD,EACJ,MAAMsD,EAAY2P,EAAgB,aAClC,OAAS3P,EAAU9O,OAAS,IACvB8O,EAAU4P,MAAKtK,IAAuB,IAAZA,KACS,QAAlC5I,EAAK6S,EAAcvP,iBAA8B,IAAPtD,GAAgBA,CAAW,EAE/EoS,QAAS5hB,UACL,MAAM8O,EAASiK,EAAM1L,cAEfwV,EADaP,EAAYtO,KAAI8O,GAAkB,OAAXhU,EAAkBgU,EAAIC,mBAAmBjU,GAAU,OAChEmD,QAAO+Q,GAA2B,OAAdA,GAAsBxhB,EAASghB,UAAUQ,KAC1F,IAAIC,EAAS,KACb,GAAIJ,EAAU7e,OAAS,GACnB,IAAK,MAAMgf,KAAaH,EAEpB,GADAI,QAAezhB,EAASogB,QAAQoB,GACV,kBAAXC,IAAmC,IAAXA,EAG/B,WAIHZ,EAAcT,UACnBqB,QAAezhB,EAASogB,QAAQS,EAAcT,UAElD,OAAOqB,CAAM,GAGrB,SAASR,EAAgBS,GACrB,MAAMpU,EAASiK,EAAM1L,cAKrB,OAJmBiV,EAAYtO,KAAI8O,GAAkB,OAAXhU,EAAkBgU,EAAIC,mBAAmBjU,GAAU,OAExFmD,QAAO+Q,GAA2B,OAAdA,IACpBhP,KAAIgP,GAAaxhB,EAAS0hB,GAAWF,IAE9C,CACA,SAAST,EAAiBW,GACtB,MAAO,KACH,IAAI1T,EACJ,MAAM2T,EAAQV,EAAgBS,GAAWlP,KAAI,CAAC2F,EAAMyJ,IAA2B,WAAbF,GAA0BE,EAAY,EAClGzJ,EAAK0J,oBACL1J,IACN,OAAQwJ,EAAMnf,QACV,KAAK,EACD,OAA2C,QAAnCwL,EAAK6S,EAAca,UAA+B,IAAP1T,EAAgBA,EAAK,GAC5E,KAAK,EACD,OAAO2T,EAAM,GACjB,QAAS,CACL,MAAMG,EAAcH,EAAMT,MAAKa,GAAK,KAAKC,KAAKD,KACxCpV,EAAOgV,EACRM,WAAM3c,GAAY,GAClBkN,KAAIuP,GAAKA,EAAEnN,QAAQ,KAAM,MACzBwK,KAAK,MACJ8C,EAAMP,EAAMM,OAAO,GAAG,GAAGrN,QAAQ,KAAM,KAAOkN,EAAc,IAAM,IACxE,OAAOljB,EAAMI,GAAG,YAAa2N,EAAMuV,EACvC,EACJ,CAER,CACJ,C","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/connectionlost.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/frontend.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/lab.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/treepathupdater.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/utils.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A default connection lost handler, which brings up an error dialog.\n */\nexport const ConnectionLost = async function (manager, err, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const title = trans.__('Server Connection Error');\n    const networkMsg = trans.__('A connection to the Jupyter server could not be established.\\n' +\n        'JupyterLab will continue trying to reconnect.\\n' +\n        'Check your network connection or Jupyter server configuration.\\n');\n    return showErrorMessage(title, { message: networkMsg });\n};\n//# sourceMappingURL=connectionlost.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandLinker } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { ContextMenuSvg } from '@jupyterlab/ui-components';\nimport { Application } from '@lumino/application';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The base Jupyter front-end application class.\n *\n * @typeparam `T` - The `shell` type. Defaults to `JupyterFrontEnd.IShell`.\n *\n * @typeparam `U` - The type for supported format names. Defaults to `string`.\n *\n * #### Notes\n * This type is useful as a generic application against which front-end plugins\n * can be authored. It inherits from the Lumino `Application`.\n */\nexport class JupyterFrontEnd extends Application {\n    /**\n     * Construct a new JupyterFrontEnd object.\n     */\n    constructor(options) {\n        super(options);\n        this._formatChanged = new Signal(this);\n        // render context menu/submenus with inline svg icon tweaks\n        this.contextMenu = new ContextMenuSvg({\n            commands: this.commands,\n            renderer: options.contextMenuRenderer,\n            groupByTarget: false,\n            sortBySelector: false\n        });\n        // The default restored promise if one does not exist in the options.\n        const restored = new Promise(resolve => {\n            requestAnimationFrame(() => {\n                resolve();\n            });\n        });\n        this.commandLinker =\n            options.commandLinker || new CommandLinker({ commands: this.commands });\n        this.docRegistry = options.docRegistry || new DocumentRegistry();\n        this.restored =\n            options.restored ||\n                this.started.then(() => restored).catch(() => restored);\n        this.serviceManager = options.serviceManager || new ServiceManager();\n    }\n    /**\n     * The application form factor, e.g., `desktop` or `mobile`.\n     */\n    get format() {\n        return this._format;\n    }\n    set format(format) {\n        if (this._format !== format) {\n            this._format = format;\n            document.body.dataset['format'] = format;\n            this._formatChanged.emit(format);\n        }\n    }\n    /**\n     * A signal that emits when the application form factor changes.\n     */\n    get formatChanged() {\n        return this._formatChanged;\n    }\n    /**\n     * Walks up the DOM hierarchy of the target of the active `contextmenu`\n     * event, testing each HTMLElement ancestor for a user-supplied function. This can\n     * be used to find an HTMLElement on which to operate, given a context menu click.\n     *\n     * @param fn - a function that takes an `HTMLElement` and returns a\n     *   boolean for whether it is the element the requester is seeking.\n     *\n     * @returns an HTMLElement or undefined, if none is found.\n     */\n    contextMenuHitTest(fn) {\n        if (!this._contextMenuEvent ||\n            !(this._contextMenuEvent.target instanceof Node)) {\n            return undefined;\n        }\n        let node = this._contextMenuEvent.target;\n        do {\n            if (node instanceof HTMLElement && fn(node)) {\n                return node;\n            }\n            node = node.parentNode;\n        } while (node && node.parentNode && node !== node.parentNode);\n        return undefined;\n        // TODO: we should be able to use .composedPath() to simplify this function\n        // down to something like the below, but it seems like composedPath is\n        // sometimes returning an empty list.\n        /*\n        if (this._contextMenuEvent) {\n          this._contextMenuEvent\n            .composedPath()\n            .filter(x => x instanceof HTMLElement)\n            .find(test);\n        }\n        return undefined;\n        */\n    }\n    /**\n     * A method invoked on a document `'contextmenu'` event.\n     */\n    evtContextMenu(event) {\n        this._contextMenuEvent = event;\n        if (event.shiftKey ||\n            Private.suppressContextMenu(event.target)) {\n            return;\n        }\n        const opened = this.contextMenu.open(event);\n        if (opened) {\n            const items = this.contextMenu.menu.items;\n            // If only the context menu information will be shown,\n            // with no real commands, close the context menu and\n            // allow the native one to open.\n            if (items.length === 1 &&\n                items[0].command === JupyterFrontEndContextMenu.contextMenu) {\n                this.contextMenu.menu.close();\n                return;\n            }\n            // Stop propagation and allow the application context menu to show.\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n/**\n * The namespace for `JupyterFrontEnd` class statics.\n */\n(function (JupyterFrontEnd) {\n    /**\n     * Is JupyterLab in document mode?\n     *\n     * @param path - Full URL of JupyterLab\n     * @param paths - The current IPaths object hydrated from PageConfig.\n     */\n    function inDocMode(path, paths) {\n        const docPattern = new RegExp(`^${paths.urls.doc}`);\n        const match = path.match(docPattern);\n        if (match) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    JupyterFrontEnd.inDocMode = inDocMode;\n    /**\n     * The application paths dictionary token.\n     */\n    JupyterFrontEnd.IPaths = new Token('@jupyterlab/application:IPaths', `A service providing information about various\n  URLs and server paths for the current application. Use this service if you want to\n  assemble URLs to use the JupyterLab REST API.`);\n    /**\n     * The application tree resolver token.\n     *\n     * #### Notes\n     * Not all Jupyter front-end applications will have a tree resolver\n     * implemented on the client-side. This token should not be required as a\n     * dependency if it is possible to make it an optional dependency.\n     */\n    JupyterFrontEnd.ITreeResolver = new Token('@jupyterlab/application:ITreeResolver', 'A service to resolve the tree path.');\n})(JupyterFrontEnd || (JupyterFrontEnd = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns whether the element is itself, or a child of, an element with the `jp-suppress-context-menu` data attribute.\n     */\n    function suppressContextMenu(element) {\n        return element.closest('[data-jp-suppress-context-menu]') !== null;\n    }\n    Private.suppressContextMenu = suppressContextMenu;\n})(Private || (Private = {}));\n/**\n * A namespace for the context menu override.\n */\nexport var JupyterFrontEndContextMenu;\n(function (JupyterFrontEndContextMenu) {\n    /**\n     * An id for a private context-menu-info ersatz command.\n     */\n    JupyterFrontEndContextMenu.contextMenu = '__internal:context-menu-info';\n})(JupyterFrontEndContextMenu || (JupyterFrontEndContextMenu = {}));\n//# sourceMappingURL=frontend.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, DockPanelSvg, LabIcon, TabBarSvg, tabIcon, TabPanelSvg } from '@jupyterlab/ui-components';\nimport { ArrayExt, find, map } from '@lumino/algorithm';\nimport { JSONExt, PromiseDelegate, Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, BoxPanel, FocusTracker, Panel, SplitPanel, StackedPanel, TabBar, Widget } from '@lumino/widgets';\n/**\n * The class name added to AppShell instances.\n */\nconst APPLICATION_SHELL_CLASS = 'jp-LabShell';\n/**\n * The class name added to side bar instances.\n */\nconst SIDEBAR_CLASS = 'jp-SideBar';\n/**\n * The class name added to the current widget's title.\n */\nconst CURRENT_CLASS = 'jp-mod-current';\n/**\n * The class name added to the active widget's title.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The default rank of items added to a sidebar.\n */\nconst DEFAULT_RANK = 900;\nconst ACTIVITY_CLASS = 'jp-Activity';\n/**\n * The JupyterLab application shell token.\n */\nexport const ILabShell = new Token('@jupyterlab/application:ILabShell', 'A service for interacting with the JupyterLab shell. The top-level ``application`` object also has a reference to the shell, but it has a restricted interface in order to be agnostic to different shell implementations on the application. Use this to get more detailed information about currently active widgets and layout state.');\n/**\n * The application shell for JupyterLab.\n */\nexport class LabShell extends Widget {\n    /**\n     * Construct a new application shell.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A message hook for child add/remove messages on the main area dock panel.\n         */\n        this._dockChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-added':\n                    msg.child.addClass(ACTIVITY_CLASS);\n                    this._tracker.add(msg.child);\n                    break;\n                case 'child-removed':\n                    msg.child.removeClass(ACTIVITY_CLASS);\n                    this._tracker.remove(msg.child);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._activeChanged = new Signal(this);\n        this._cachedLayout = null;\n        this._currentChanged = new Signal(this);\n        this._currentPath = '';\n        this._currentPathChanged = new Signal(this);\n        this._modeChanged = new Signal(this);\n        this._isRestored = false;\n        this._layoutModified = new Signal(this);\n        this._layoutDebouncer = new Debouncer(() => {\n            this._layoutModified.emit(undefined);\n        }, 0);\n        this._restored = new PromiseDelegate();\n        this._tracker = new FocusTracker();\n        this._topHandlerHiddenByUser = false;\n        this._idTypeMap = new Map();\n        this._mainOptionsCache = new Map();\n        this._sideOptionsCache = new Map();\n        this._delayedWidget = new Array();\n        this.addClass(APPLICATION_SHELL_CLASS);\n        this.id = 'main';\n        if ((options === null || options === void 0 ? void 0 : options.waitForRestore) === false) {\n            this._userLayout = { 'multiple-document': {}, 'single-document': {} };\n        }\n        // Skip Links\n        const skipLinkWidget = (this._skipLinkWidget = new Private.SkipLinkWidget(this));\n        this._skipLinkWidget.show();\n        //  Wrap the skip widget to customize its position and size\n        const skipLinkWrapper = new Panel();\n        skipLinkWrapper.addClass('jp-skiplink-wrapper');\n        skipLinkWrapper.addWidget(skipLinkWidget);\n        const headerPanel = (this._headerPanel = new BoxPanel());\n        const menuHandler = (this._menuHandler = new Private.PanelHandler());\n        menuHandler.panel.node.setAttribute('role', 'navigation');\n        const topHandler = (this._topHandler = new Private.PanelHandler());\n        topHandler.panel.node.setAttribute('role', 'banner');\n        const bottomPanel = (this._bottomPanel = new BoxPanel());\n        bottomPanel.node.setAttribute('role', 'contentinfo');\n        const hboxPanel = new BoxPanel();\n        const vsplitPanel = (this._vsplitPanel =\n            new Private.RestorableSplitPanel());\n        const dockPanel = (this._dockPanel = new DockPanelSvg({\n            hiddenMode: Widget.HiddenMode.Display\n        }));\n        MessageLoop.installMessageHook(dockPanel, this._dockChildHook);\n        const hsplitPanel = (this._hsplitPanel =\n            new Private.RestorableSplitPanel());\n        const downPanel = (this._downPanel = new TabPanelSvg({\n            tabsMovable: true\n        }));\n        const leftHandler = (this._leftHandler = new Private.SideBarHandler());\n        const rightHandler = (this._rightHandler = new Private.SideBarHandler());\n        const rootLayout = new BoxLayout();\n        headerPanel.id = 'jp-header-panel';\n        menuHandler.panel.id = 'jp-menu-panel';\n        topHandler.panel.id = 'jp-top-panel';\n        bottomPanel.id = 'jp-bottom-panel';\n        hboxPanel.id = 'jp-main-content-panel';\n        vsplitPanel.id = 'jp-main-vsplit-panel';\n        dockPanel.id = 'jp-main-dock-panel';\n        hsplitPanel.id = 'jp-main-split-panel';\n        downPanel.id = 'jp-down-stack';\n        leftHandler.sideBar.addClass(SIDEBAR_CLASS);\n        leftHandler.sideBar.addClass('jp-mod-left');\n        leftHandler.sideBar.node.setAttribute('role', 'complementary');\n        leftHandler.stackedPanel.id = 'jp-left-stack';\n        rightHandler.sideBar.addClass(SIDEBAR_CLASS);\n        rightHandler.sideBar.addClass('jp-mod-right');\n        rightHandler.sideBar.node.setAttribute('role', 'complementary');\n        rightHandler.stackedPanel.id = 'jp-right-stack';\n        dockPanel.node.setAttribute('role', 'main');\n        hboxPanel.spacing = 0;\n        vsplitPanel.spacing = 1;\n        dockPanel.spacing = 5;\n        hsplitPanel.spacing = 1;\n        headerPanel.direction = 'top-to-bottom';\n        vsplitPanel.orientation = 'vertical';\n        hboxPanel.direction = 'left-to-right';\n        hsplitPanel.orientation = 'horizontal';\n        bottomPanel.direction = 'bottom-to-top';\n        SplitPanel.setStretch(leftHandler.stackedPanel, 0);\n        SplitPanel.setStretch(downPanel, 0);\n        SplitPanel.setStretch(dockPanel, 1);\n        SplitPanel.setStretch(rightHandler.stackedPanel, 0);\n        BoxPanel.setStretch(leftHandler.sideBar, 0);\n        BoxPanel.setStretch(hsplitPanel, 1);\n        BoxPanel.setStretch(rightHandler.sideBar, 0);\n        SplitPanel.setStretch(vsplitPanel, 1);\n        hsplitPanel.addWidget(leftHandler.stackedPanel);\n        hsplitPanel.addWidget(dockPanel);\n        hsplitPanel.addWidget(rightHandler.stackedPanel);\n        vsplitPanel.addWidget(hsplitPanel);\n        vsplitPanel.addWidget(downPanel);\n        hboxPanel.addWidget(leftHandler.sideBar);\n        hboxPanel.addWidget(vsplitPanel);\n        hboxPanel.addWidget(rightHandler.sideBar);\n        rootLayout.direction = 'top-to-bottom';\n        rootLayout.spacing = 0; // TODO make this configurable?\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel. The default sizes will be overwritten during layout restoration.\n        vsplitPanel.setRelativeSizes([3, 1]);\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        BoxLayout.setStretch(headerPanel, 0);\n        BoxLayout.setStretch(menuHandler.panel, 0);\n        BoxLayout.setStretch(topHandler.panel, 0);\n        BoxLayout.setStretch(hboxPanel, 1);\n        BoxLayout.setStretch(bottomPanel, 0);\n        rootLayout.addWidget(skipLinkWrapper);\n        rootLayout.addWidget(headerPanel);\n        rootLayout.addWidget(topHandler.panel);\n        rootLayout.addWidget(hboxPanel);\n        rootLayout.addWidget(bottomPanel);\n        // initially hiding header and bottom panel when no elements inside,\n        this._headerPanel.hide();\n        this._bottomPanel.hide();\n        this._downPanel.hide();\n        this.layout = rootLayout;\n        // Connect change listeners.\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n        this._tracker.activeChanged.connect(this._onActiveChanged, this);\n        // Connect main layout change listener.\n        this._dockPanel.layoutModified.connect(this._onLayoutModified, this);\n        // Connect vsplit layout change listener\n        this._vsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Connect down panel change listeners\n        this._downPanel.currentChanged.connect(this._onLayoutModified, this);\n        this._downPanel.tabBar.tabMoved.connect(this._onTabPanelChanged, this);\n        this._downPanel.stackedPanel.widgetRemoved.connect(this._onTabPanelChanged, this);\n        // Catch current changed events on the side handlers.\n        this._leftHandler.updated.connect(this._onLayoutModified, this);\n        this._rightHandler.updated.connect(this._onLayoutModified, this);\n        // Catch update events on the horizontal split panel\n        this._hsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Setup single-document-mode title bar\n        const titleHandler = (this._titleHandler = new Private.TitleHandler(this));\n        this.add(titleHandler, 'top', { rank: 100 });\n        if (this._dockPanel.mode === 'multiple-document') {\n            this._topHandler.addWidget(this._menuHandler.panel, 100);\n            titleHandler.hide();\n        }\n        else {\n            rootLayout.insertWidget(3, this._menuHandler.panel);\n        }\n        this.translator = nullTranslator;\n        // Wire up signals to update the title panel of the simple interface mode to\n        // follow the title of this.currentWidget\n        this.currentChanged.connect((sender, args) => {\n            let newValue = args.newValue;\n            let oldValue = args.oldValue;\n            // Stop watching the title of the previously current widget\n            if (oldValue) {\n                oldValue.title.changed.disconnect(this._updateTitlePanelTitle, this);\n                if (oldValue instanceof DocumentWidget) {\n                    oldValue.context.pathChanged.disconnect(this._updateCurrentPath, this);\n                }\n            }\n            // Start watching the title of the new current widget\n            if (newValue) {\n                newValue.title.changed.connect(this._updateTitlePanelTitle, this);\n                this._updateTitlePanelTitle();\n                if (newValue instanceof DocumentWidget) {\n                    newValue.context.pathChanged.connect(this._updateCurrentPath, this);\n                }\n            }\n            this._updateCurrentPath();\n        });\n    }\n    /**\n     * A signal emitted when main area's active focus changes.\n     */\n    get activeChanged() {\n        return this._activeChanged;\n    }\n    /**\n     * The active widget in the shell's main area.\n     */\n    get activeWidget() {\n        return this._tracker.activeWidget;\n    }\n    /**\n     * Whether the add buttons for each main area tab bar are enabled.\n     */\n    get addButtonEnabled() {\n        return this._dockPanel.addButtonEnabled;\n    }\n    set addButtonEnabled(value) {\n        this._dockPanel.addButtonEnabled = value;\n    }\n    /**\n     * A signal emitted when the add button on a main area tab bar is clicked.\n     */\n    get addRequested() {\n        return this._dockPanel.addRequested;\n    }\n    /**\n     * A signal emitted when main area's current focus changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * Current document path.\n     */\n    // FIXME deprecation `undefined` is to ensure backward compatibility in 4.x\n    get currentPath() {\n        return this._currentPath;\n    }\n    /**\n     * A signal emitted when the path of the current document changes.\n     *\n     * This also fires when the current document itself changes.\n     */\n    get currentPathChanged() {\n        return this._currentPathChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * A signal emitted when the main area's layout is modified.\n     */\n    get layoutModified() {\n        return this._layoutModified;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get leftCollapsed() {\n        return !this._leftHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get rightCollapsed() {\n        return !this._rightHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether JupyterLab is in presentation mode with the\n     * `jp-mod-presentationMode` CSS class.\n     */\n    get presentationMode() {\n        return this.hasClass('jp-mod-presentationMode');\n    }\n    set presentationMode(value) {\n        this.toggleClass('jp-mod-presentationMode', value);\n    }\n    /**\n     * The main dock area's user interface mode.\n     */\n    get mode() {\n        return this._dockPanel.mode;\n    }\n    set mode(mode) {\n        const dock = this._dockPanel;\n        if (mode === dock.mode) {\n            return;\n        }\n        const applicationCurrentWidget = this.currentWidget;\n        if (mode === 'single-document') {\n            // Cache the current multi-document layout before changing the mode.\n            this._cachedLayout = dock.saveLayout();\n            dock.mode = mode;\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (this.currentWidget) {\n                dock.activateWidget(this.currentWidget);\n            }\n            // Adjust menu and title\n            this.layout.insertWidget(3, this._menuHandler.panel);\n            this._titleHandler.show();\n            this._updateTitlePanelTitle();\n            if (this._topHandlerHiddenByUser) {\n                this._topHandler.panel.hide();\n            }\n        }\n        else {\n            // Cache a reference to every widget currently in the dock panel before\n            // changing its mode.\n            const widgets = Array.from(dock.widgets());\n            dock.mode = mode;\n            // Restore cached layout if possible.\n            if (this._cachedLayout) {\n                // Remove any disposed widgets in the cached layout and restore.\n                Private.normalizeAreaConfig(dock, this._cachedLayout.main);\n                dock.restoreLayout(this._cachedLayout);\n                this._cachedLayout = null;\n            }\n            // If layout restoration has been deferred, restore layout now.\n            if (this._layoutRestorer.isDeferred) {\n                this._layoutRestorer\n                    .restoreDeferred()\n                    .then(mainArea => {\n                    if (mainArea) {\n                        const { currentWidget, dock } = mainArea;\n                        if (dock) {\n                            this._dockPanel.restoreLayout(dock);\n                        }\n                        if (currentWidget) {\n                            this.activateById(currentWidget.id);\n                        }\n                    }\n                })\n                    .catch(reason => {\n                    console.error('Failed to restore the deferred layout.');\n                    console.error(reason);\n                });\n            }\n            // Add any widgets created during single document mode, which have\n            // subsequently been removed from the dock panel after the multiple document\n            // layout has been restored. If the widget has add options cached for\n            // the widget (i.e., if it has been placed with respect to another widget),\n            // then take that into account.\n            widgets.forEach(widget => {\n                if (!widget.parent) {\n                    this._addToMainArea(widget, {\n                        ...this._mainOptionsCache.get(widget),\n                        activate: false\n                    });\n                }\n            });\n            this._mainOptionsCache.clear();\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (applicationCurrentWidget) {\n                dock.activateWidget(applicationCurrentWidget);\n            }\n            // Adjust menu and title\n            this.add(this._menuHandler.panel, 'top', { rank: 100 });\n            this._titleHandler.hide();\n        }\n        // Set the mode data attribute on the applications shell node.\n        this.node.dataset.shellMode = mode;\n        this._downPanel.fit();\n        // Emit the mode changed signal\n        this._modeChanged.emit(mode);\n    }\n    /**\n     * A signal emitted when the shell/dock panel change modes (single/multiple document).\n     */\n    get modeChanged() {\n        return this._modeChanged;\n    }\n    /**\n     * Promise that resolves when state is first restored, returning layout\n     * description.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    get translator() {\n        var _a;\n        return (_a = this._translator) !== null && _a !== void 0 ? _a : nullTranslator;\n    }\n    set translator(value) {\n        if (value !== this._translator) {\n            this._translator = value;\n            // Set translator for tab bars\n            TabBarSvg.translator = value;\n            const trans = value.load('jupyterlab');\n            this._menuHandler.panel.node.setAttribute('aria-label', trans.__('main'));\n            this._leftHandler.sideBar.node.setAttribute('aria-label', trans.__('main sidebar'));\n            this._leftHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('main sidebar'));\n            this._rightHandler.sideBar.node.setAttribute('aria-label', trans.__('alternate sidebar'));\n            this._rightHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('alternate sidebar'));\n        }\n    }\n    /**\n     * User customized shell layout.\n     */\n    get userLayout() {\n        return JSONExt.deepCopy(this._userLayout);\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        if (this._leftHandler.has(id)) {\n            this._leftHandler.activate(id);\n            return;\n        }\n        if (this._rightHandler.has(id)) {\n            this._rightHandler.activate(id);\n            return;\n        }\n        const tabIndex = this._downPanel.tabBar.titles.findIndex(title => title.owner.id === id);\n        if (tabIndex >= 0) {\n            this._downPanel.currentIndex = tabIndex;\n            return;\n        }\n        const dock = this._dockPanel;\n        const widget = find(dock.widgets(), value => value.id === id);\n        if (widget) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Activate the next Tab in the active TabBar.\n     */\n    activateNextTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci < current.titles.length - 1) {\n            current.currentIndex += 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === current.titles.length - 1) {\n            const nextBar = this._adjacentBar('next');\n            if (nextBar) {\n                nextBar.currentIndex = 0;\n                if (nextBar.currentTitle) {\n                    nextBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /**\n     * Activate the previous Tab in the active TabBar.\n     */\n    activatePreviousTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci > 0) {\n            current.currentIndex -= 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === 0) {\n            const prevBar = this._adjacentBar('previous');\n            if (prevBar) {\n                const len = prevBar.titles.length;\n                prevBar.currentIndex = len - 1;\n                if (prevBar.currentTitle) {\n                    prevBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /**\n     * Activate the next TabBar.\n     */\n    activateNextTabBar() {\n        const nextBar = this._adjacentBar('next');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /**\n     * Activate the next TabBar.\n     */\n    activatePreviousTabBar() {\n        const nextBar = this._adjacentBar('previous');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /**\n     * Add a widget to the JupyterLab shell\n     *\n     * @param widget Widget\n     * @param area Area\n     * @param options Options\n     */\n    add(widget, area = 'main', options) {\n        var _a;\n        if (!this._userLayout) {\n            this._delayedWidget.push({ widget, area, options });\n            return;\n        }\n        let userPosition;\n        if ((options === null || options === void 0 ? void 0 : options.type) && this._userLayout[this.mode][options.type]) {\n            userPosition = this._userLayout[this.mode][options.type];\n            this._idTypeMap.set(widget.id, options.type);\n        }\n        else {\n            userPosition = this._userLayout[this.mode][widget.id];\n        }\n        if (options === null || options === void 0 ? void 0 : options.type) {\n            this._idTypeMap.set(widget.id, options.type);\n            widget.disposed.connect(() => {\n                this._idTypeMap.delete(widget.id);\n            });\n        }\n        area = (_a = userPosition === null || userPosition === void 0 ? void 0 : userPosition.area) !== null && _a !== void 0 ? _a : area;\n        options =\n            options || (userPosition === null || userPosition === void 0 ? void 0 : userPosition.options)\n                ? {\n                    ...options,\n                    ...userPosition === null || userPosition === void 0 ? void 0 : userPosition.options\n                }\n                : undefined;\n        switch (area || 'main') {\n            case 'bottom':\n                return this._addToBottomArea(widget, options);\n            case 'down':\n                return this._addToDownArea(widget, options);\n            case 'header':\n                return this._addToHeaderArea(widget, options);\n            case 'left':\n                return this._addToLeftArea(widget, options);\n            case 'main':\n                return this._addToMainArea(widget, options);\n            case 'menu':\n                return this._addToMenuArea(widget, options);\n            case 'right':\n                return this._addToRightArea(widget, options);\n            case 'top':\n                return this._addToTopArea(widget, options);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Move a widget type to a new area.\n     *\n     * The type is determined from the `widget.id` and fallback to `widget.id`.\n     *\n     * #### Notes\n     * If `mode` is undefined, both mode are updated.\n     * The new layout is now persisted.\n     *\n     * @param widget Widget to move\n     * @param area New area\n     * @param mode Mode to change\n     * @returns The new user layout\n     */\n    move(widget, area, mode) {\n        var _a;\n        const type = (_a = this._idTypeMap.get(widget.id)) !== null && _a !== void 0 ? _a : widget.id;\n        for (const m of ['single-document', 'multiple-document'].filter(c => !mode || c === mode)) {\n            this._userLayout[m][type] = {\n                ...this._userLayout[m][type],\n                area\n            };\n        }\n        this.add(widget, area);\n        return this._userLayout;\n    }\n    /**\n     * Collapse the left area.\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Collapse the right area.\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Dispose the shell.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._layoutDebouncer.dispose();\n        super.dispose();\n    }\n    /**\n     * Expand the left area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandLeft() {\n        this._leftHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Expand the right area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandRight() {\n        this._rightHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Close all widgets in the main and down area.\n     */\n    closeAll() {\n        // Make a copy of all the widget in the dock panel (using `Array.from()`)\n        // before removing them because removing them while iterating through them\n        // modifies the underlying data of the iterator.\n        Array.from(this._dockPanel.widgets()).forEach(widget => widget.close());\n        this._downPanel.stackedPanel.widgets.forEach(widget => widget.close());\n    }\n    /**\n     * Whether an side tab bar is visible or not.\n     *\n     * @param side Sidebar of interest\n     * @returns Side tab bar visibility\n     */\n    isSideTabBarVisible(side) {\n        switch (side) {\n            case 'left':\n                return this._leftHandler.isVisible;\n            case 'right':\n                return this._rightHandler.isVisible;\n        }\n    }\n    /**\n     * Whether the top bar in simple mode is visible or not.\n     *\n     * @returns Top bar visibility\n     */\n    isTopInSimpleModeVisible() {\n        return !this._topHandlerHiddenByUser;\n    }\n    /**\n     * True if the given area is empty.\n     */\n    isEmpty(area) {\n        switch (area) {\n            case 'bottom':\n                return this._bottomPanel.widgets.length === 0;\n            case 'down':\n                return this._downPanel.stackedPanel.widgets.length === 0;\n            case 'header':\n                return this._headerPanel.widgets.length === 0;\n            case 'left':\n                return this._leftHandler.stackedPanel.widgets.length === 0;\n            case 'main':\n                return this._dockPanel.isEmpty;\n            case 'menu':\n                return this._menuHandler.panel.widgets.length === 0;\n            case 'right':\n                return this._rightHandler.stackedPanel.widgets.length === 0;\n            case 'top':\n                return this._topHandler.panel.widgets.length === 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Restore the layout state and configuration for the application shell.\n     *\n     * #### Notes\n     * This should only be called once.\n     */\n    async restoreLayout(mode, layoutRestorer, configuration = {}) {\n        var _a, _b, _c, _d;\n        // Set the configuration and add widgets added before the shell was ready.\n        this._userLayout = {\n            'single-document': (_a = configuration['single-document']) !== null && _a !== void 0 ? _a : {},\n            'multiple-document': (_b = configuration['multiple-document']) !== null && _b !== void 0 ? _b : {}\n        };\n        this._delayedWidget.forEach(({ widget, area, options }) => {\n            this.add(widget, area, options);\n        });\n        this._delayedWidget.length = 0;\n        this._layoutRestorer = layoutRestorer;\n        // Get the layout from the restorer\n        const layout = await layoutRestorer.fetch();\n        // Reset the layout\n        const { mainArea, downArea, leftArea, rightArea, topArea, relativeSizes } = layout;\n        // Rehydrate the main area.\n        if (mainArea) {\n            const { currentWidget, dock } = mainArea;\n            if (dock && mode === 'multiple-document') {\n                this._dockPanel.restoreLayout(dock);\n            }\n            if (mode) {\n                this.mode = mode;\n            }\n            if (currentWidget) {\n                this.activateById(currentWidget.id);\n            }\n        }\n        else {\n            // This is needed when loading in an empty workspace in single doc mode\n            if (mode) {\n                this.mode = mode;\n            }\n        }\n        if ((topArea === null || topArea === void 0 ? void 0 : topArea.simpleVisibility) !== undefined) {\n            this._topHandlerHiddenByUser = !topArea.simpleVisibility;\n            if (this.mode === 'single-document') {\n                this._topHandler.panel.setHidden(this._topHandlerHiddenByUser);\n            }\n        }\n        // Rehydrate the down area\n        if (downArea) {\n            const { currentWidget, widgets, size } = downArea;\n            const widgetIds = (_c = widgets === null || widgets === void 0 ? void 0 : widgets.map(widget => widget.id)) !== null && _c !== void 0 ? _c : [];\n            // Remove absent widgets\n            this._downPanel.tabBar.titles\n                .filter(title => !widgetIds.includes(title.owner.id))\n                .map(title => title.owner.close());\n            // Add new widgets\n            const titleIds = this._downPanel.tabBar.titles.map(title => title.owner.id);\n            widgets === null || widgets === void 0 ? void 0 : widgets.filter(widget => !titleIds.includes(widget.id)).map(widget => this._downPanel.addWidget(widget));\n            // Reorder tabs\n            while (!ArrayExt.shallowEqual(widgetIds, this._downPanel.tabBar.titles.map(title => title.owner.id))) {\n                this._downPanel.tabBar.titles.forEach((title, index) => {\n                    const position = widgetIds.findIndex(id => title.owner.id == id);\n                    if (position >= 0 && position != index) {\n                        this._downPanel.tabBar.insertTab(position, title);\n                    }\n                });\n            }\n            if (currentWidget) {\n                const index = this._downPanel.stackedPanel.widgets.findIndex(widget => widget.id === currentWidget.id);\n                if (index) {\n                    this._downPanel.currentIndex = index;\n                    (_d = this._downPanel.currentWidget) === null || _d === void 0 ? void 0 : _d.activate();\n                }\n            }\n            if (size && size > 0.0) {\n                this._vsplitPanel.setRelativeSizes([1.0 - size, size]);\n            }\n            else {\n                // Close all tabs and hide the panel\n                this._downPanel.stackedPanel.widgets.forEach(widget => widget.close());\n                this._downPanel.hide();\n            }\n        }\n        // Rehydrate the left area.\n        if (leftArea) {\n            this._leftHandler.rehydrate(leftArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseLeft();\n            }\n        }\n        // Rehydrate the right area.\n        if (rightArea) {\n            this._rightHandler.rehydrate(rightArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseRight();\n            }\n        }\n        // Restore the relative sizes.\n        if (relativeSizes) {\n            this._hsplitPanel.setRelativeSizes(relativeSizes);\n        }\n        if (!this._isRestored) {\n            // Make sure all messages in the queue are finished before notifying\n            // any extensions that are waiting for the promise that guarantees the\n            // application state has been restored.\n            MessageLoop.flush();\n            this._restored.resolve(layout);\n        }\n    }\n    /**\n     * Save the dehydrated state of the application shell.\n     */\n    saveLayout() {\n        // If the application is in single document mode, use the cached layout if\n        // available. Otherwise, default to querying the dock panel for layout.\n        const layout = {\n            mainArea: {\n                currentWidget: this._tracker.currentWidget,\n                dock: this.mode === 'single-document'\n                    ? this._cachedLayout || this._dockPanel.saveLayout()\n                    : this._dockPanel.saveLayout()\n            },\n            downArea: {\n                currentWidget: this._downPanel.currentWidget,\n                widgets: Array.from(this._downPanel.stackedPanel.widgets),\n                size: this._vsplitPanel.relativeSizes()[1]\n            },\n            leftArea: this._leftHandler.dehydrate(),\n            rightArea: this._rightHandler.dehydrate(),\n            topArea: { simpleVisibility: !this._topHandlerHiddenByUser },\n            relativeSizes: this._hsplitPanel.relativeSizes()\n        };\n        return layout;\n    }\n    /**\n     * Toggle top header visibility in simple mode\n     *\n     * Note: Does nothing in multi-document mode\n     */\n    toggleTopInSimpleModeVisibility() {\n        if (this.mode === 'single-document') {\n            if (this._topHandler.panel.isVisible) {\n                this._topHandlerHiddenByUser = true;\n                this._topHandler.panel.hide();\n            }\n            else {\n                this._topHandlerHiddenByUser = false;\n                this._topHandler.panel.show();\n                this._updateTitlePanelTitle();\n            }\n            this._onLayoutModified();\n        }\n    }\n    /**\n     * Toggle side tab bar visibility\n     *\n     * @param side Sidebar of interest\n     */\n    toggleSideTabBarVisibility(side) {\n        if (side === 'right') {\n            if (this._rightHandler.isVisible) {\n                this._rightHandler.hide();\n            }\n            else {\n                this._rightHandler.show();\n            }\n        }\n        else {\n            if (this._leftHandler.isVisible) {\n                this._leftHandler.hide();\n            }\n            else {\n                this._leftHandler.show();\n            }\n        }\n    }\n    /**\n     * Update the shell configuration.\n     *\n     * @param config Shell configuration\n     */\n    updateConfig(config) {\n        if (config.hiddenMode) {\n            switch (config.hiddenMode) {\n                case 'display':\n                    this._dockPanel.hiddenMode = Widget.HiddenMode.Display;\n                    break;\n                case 'scale':\n                    this._dockPanel.hiddenMode = Widget.HiddenMode.Scale;\n                    break;\n                case 'contentVisibility':\n                    this._dockPanel.hiddenMode = Widget.HiddenMode.ContentVisibility;\n                    break;\n            }\n        }\n    }\n    /**\n     * Returns the widgets for an application area.\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return this._dockPanel.widgets();\n            case 'left':\n                return map(this._leftHandler.sideBar.titles, t => t.owner);\n            case 'right':\n                return map(this._rightHandler.sideBar.titles, t => t.owner);\n            case 'header':\n                return this._headerPanel.children();\n            case 'top':\n                return this._topHandler.panel.children();\n            case 'menu':\n                return this._menuHandler.panel.children();\n            case 'bottom':\n                return this._bottomPanel.children();\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the application shell.\n     */\n    onAfterAttach(msg) {\n        this.node.dataset.shellMode = this.mode;\n    }\n    /**\n     * Update the title panel title based on the title of the current widget.\n     */\n    _updateTitlePanelTitle() {\n        let current = this.currentWidget;\n        const inputElement = this._titleHandler.inputElement;\n        inputElement.value = current ? current.title.label : '';\n        inputElement.title = current ? current.title.caption : '';\n    }\n    /**\n     * The path of the current widget changed, fire the _currentPathChanged signal.\n     */\n    _updateCurrentPath() {\n        let current = this.currentWidget;\n        let newValue = '';\n        if (current && current instanceof DocumentWidget) {\n            newValue = current.context.path;\n        }\n        this._currentPathChanged.emit({\n            newValue: newValue,\n            oldValue: this._currentPath\n        });\n        this._currentPath = newValue;\n    }\n    /**\n     * Add a widget to the left content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToLeftArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        this._sideOptionsCache.set(widget, options);\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._leftHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     * All widgets added to the main area should be disposed after removal\n     * (disposal before removal will remove the widget automatically).\n     *\n     * In the options, `ref` defaults to `null`, `mode` defaults to `'tab-after'`,\n     * and `activate` defaults to `true`.\n     */\n    _addToMainArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const dock = this._dockPanel;\n        const mode = options.mode || 'tab-after';\n        let ref = this.currentWidget;\n        if (options.ref) {\n            ref = find(dock.widgets(), value => value.id === options.ref) || null;\n        }\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = { ...title.dataset, id: widget.id };\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        dock.addWidget(widget, { mode, ref });\n        // The dock panel doesn't account for placement information while\n        // in single document mode, so upon rehydrating any widgets that were\n        // added will not be in the correct place. Cache the placement information\n        // here so that we can later rehydrate correctly.\n        if (dock.mode === 'single-document') {\n            this._mainOptionsCache.set(widget, options);\n        }\n        if (options.activate !== false) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Add a widget to the right content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToRightArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._sideOptionsCache.set(widget, options);\n        this._rightHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the top content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToTopArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._topHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._topHandler.panel.isHidden) {\n            this._topHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the title content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToMenuArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._menuHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._menuHandler.panel.isHidden) {\n            this._menuHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the header content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToHeaderArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._headerPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._headerPanel.isHidden) {\n            this._headerPanel.show();\n        }\n    }\n    /**\n     * Add a widget to the bottom content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToBottomArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._bottomPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._bottomPanel.isHidden) {\n            this._bottomPanel.show();\n        }\n    }\n    _addToDownArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = { ...title.dataset, id: widget.id };\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        this._downPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._downPanel.isHidden) {\n            this._downPanel.show();\n        }\n    }\n    /*\n     * Return the tab bar adjacent to the current TabBar or `null`.\n     */\n    _adjacentBar(direction) {\n        const current = this._currentTabBar();\n        if (!current) {\n            return null;\n        }\n        const bars = Array.from(this._dockPanel.tabBars());\n        const len = bars.length;\n        const index = bars.indexOf(current);\n        if (direction === 'previous') {\n            return index > 0 ? bars[index - 1] : index === 0 ? bars[len - 1] : null;\n        }\n        // Otherwise, direction is 'next'.\n        return index < len - 1\n            ? bars[index + 1]\n            : index === len - 1\n                ? bars[0]\n                : null;\n    }\n    /*\n     * Return the TabBar that has the currently active Widget or null.\n     */\n    _currentTabBar() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            return null;\n        }\n        const title = current.title;\n        const bars = this._dockPanel.tabBars();\n        return find(bars, bar => bar.titles.indexOf(title) > -1) || null;\n    }\n    /**\n     * Handle a change to the dock area active widget.\n     */\n    _onActiveChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${ACTIVE_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(ACTIVE_CLASS, '');\n        }\n        this._activeChanged.emit(args);\n    }\n    /**\n     * Handle a change to the dock area current widget.\n     */\n    _onCurrentChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${CURRENT_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(CURRENT_CLASS, '');\n        }\n        this._currentChanged.emit(args);\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change on the down panel widgets\n     */\n    _onTabPanelChanged() {\n        if (this._downPanel.stackedPanel.widgets.length === 0) {\n            this._downPanel.hide();\n        }\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change to the layout.\n     */\n    _onLayoutModified() {\n        void this._layoutDebouncer.invoke();\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Removes widgets that have been disposed from an area config, mutates area.\n     */\n    function normalizeAreaConfig(parent, area) {\n        if (!area) {\n            return;\n        }\n        if (area.type === 'tab-area') {\n            area.widgets = area.widgets.filter(widget => !widget.isDisposed && widget.parent === parent);\n            return;\n        }\n        area.children.forEach(child => {\n            normalizeAreaConfig(parent, child);\n        });\n    }\n    Private.normalizeAreaConfig = normalizeAreaConfig;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n    /**\n     * A class which manages a side bar and related stacked panel.\n     */\n    class SideBarHandler {\n        /**\n         * Construct a new side bar handler.\n         */\n        constructor() {\n            this._isHiddenByUser = false;\n            this._items = new Array();\n            this._updated = new Signal(this);\n            this._sideBar = new TabBar({\n                insertBehavior: 'none',\n                removeBehavior: 'none',\n                allowDeselect: true,\n                orientation: 'vertical'\n            });\n            this._stackedPanel = new StackedPanel();\n            this._sideBar.hide();\n            this._stackedPanel.hide();\n            this._lastCurrent = null;\n            this._sideBar.currentChanged.connect(this._onCurrentChanged, this);\n            this._sideBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n            this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        }\n        /**\n         * Whether the side bar is visible\n         */\n        get isVisible() {\n            return this._sideBar.isVisible;\n        }\n        /**\n         * Get the tab bar managed by the handler.\n         */\n        get sideBar() {\n            return this._sideBar;\n        }\n        /**\n         * Get the stacked panel managed by the handler\n         */\n        get stackedPanel() {\n            return this._stackedPanel;\n        }\n        /**\n         * Signal fires when the stack panel or the sidebar changes\n         */\n        get updated() {\n            return this._updated;\n        }\n        /**\n         * Expand the sidebar.\n         *\n         * #### Notes\n         * This will open the most recently used tab, or the first tab\n         * if there is no most recently used.\n         */\n        expand() {\n            const previous = this._lastCurrent || (this._items.length > 0 && this._items[0].widget);\n            if (previous) {\n                this.activate(previous.id);\n            }\n        }\n        /**\n         * Activate a widget residing in the side bar by ID.\n         *\n         * @param id - The widget's unique ID.\n         */\n        activate(id) {\n            const widget = this._findWidgetByID(id);\n            if (widget) {\n                this._sideBar.currentTitle = widget.title;\n                widget.activate();\n            }\n        }\n        /**\n         * Test whether the sidebar has the given widget by id.\n         */\n        has(id) {\n            return this._findWidgetByID(id) !== null;\n        }\n        /**\n         * Collapse the sidebar so no items are expanded.\n         */\n        collapse() {\n            this._sideBar.currentTitle = null;\n        }\n        /**\n         * Add a widget and its title to the stacked panel and side bar.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            widget.hide();\n            const item = { widget, rank };\n            const index = this._findInsertIndex(item);\n            ArrayExt.insert(this._items, index, item);\n            this._stackedPanel.insertWidget(index, widget);\n            const title = this._sideBar.insertTab(index, widget.title);\n            // Store the parent id in the title dataset\n            // in order to dispatch click events to the right widget.\n            title.dataset = { id: widget.id };\n            if (title.icon instanceof LabIcon) {\n                // bind an appropriate style to the icon\n                title.icon = title.icon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            else if (typeof title.icon === 'string' && title.icon != '') {\n                // add some classes to help with displaying css background imgs\n                title.iconClass = classes(title.iconClass, 'jp-Icon', 'jp-Icon-20');\n            }\n            else if (!title.icon && !title.label) {\n                // add a fallback icon if there is no title label nor icon\n                title.icon = tabIcon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            this._refreshVisibility();\n        }\n        /**\n         * Dehydrate the side bar data.\n         */\n        dehydrate() {\n            const collapsed = this._sideBar.currentTitle === null;\n            const widgets = Array.from(this._stackedPanel.widgets);\n            const currentWidget = widgets[this._sideBar.currentIndex];\n            return {\n                collapsed,\n                currentWidget,\n                visible: !this._isHiddenByUser,\n                widgets\n            };\n        }\n        /**\n         * Rehydrate the side bar.\n         */\n        rehydrate(data) {\n            if (data.currentWidget) {\n                this.activate(data.currentWidget.id);\n            }\n            if (data.collapsed) {\n                this.collapse();\n            }\n            if (!data.visible) {\n                this.hide();\n            }\n        }\n        /**\n         * Hide the side bar even if it contains widgets\n         */\n        hide() {\n            this._isHiddenByUser = true;\n            this._refreshVisibility();\n        }\n        /**\n         * Show the side bar if it contains widgets\n         */\n        show() {\n            this._isHiddenByUser = false;\n            this._refreshVisibility();\n        }\n        /**\n         * Find the insertion index for a rank item.\n         */\n        _findInsertIndex(item) {\n            return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        }\n        /**\n         * Find the index of the item with the given widget, or `-1`.\n         */\n        _findWidgetIndex(widget) {\n            return ArrayExt.findFirstIndex(this._items, i => i.widget === widget);\n        }\n        /**\n         * Find the widget which owns the given title, or `null`.\n         */\n        _findWidgetByTitle(title) {\n            const item = find(this._items, value => value.widget.title === title);\n            return item ? item.widget : null;\n        }\n        /**\n         * Find the widget with the given id, or `null`.\n         */\n        _findWidgetByID(id) {\n            const item = find(this._items, value => value.widget.id === id);\n            return item ? item.widget : null;\n        }\n        /**\n         * Refresh the visibility of the side bar and stacked panel.\n         */\n        _refreshVisibility() {\n            this._stackedPanel.setHidden(this._sideBar.currentTitle === null);\n            this._sideBar.setHidden(this._isHiddenByUser || this._sideBar.titles.length === 0);\n            this._updated.emit();\n        }\n        /**\n         * Handle the `currentChanged` signal from the sidebar.\n         */\n        _onCurrentChanged(sender, args) {\n            const oldWidget = args.previousTitle\n                ? this._findWidgetByTitle(args.previousTitle)\n                : null;\n            const newWidget = args.currentTitle\n                ? this._findWidgetByTitle(args.currentTitle)\n                : null;\n            if (oldWidget) {\n                oldWidget.hide();\n            }\n            if (newWidget) {\n                newWidget.show();\n            }\n            this._lastCurrent = newWidget || oldWidget;\n            this._refreshVisibility();\n        }\n        /**\n         * Handle a `tabActivateRequest` signal from the sidebar.\n         */\n        _onTabActivateRequested(sender, args) {\n            args.title.owner.activate();\n        }\n        /*\n         * Handle the `widgetRemoved` signal from the stacked panel.\n         */\n        _onWidgetRemoved(sender, widget) {\n            if (widget === this._lastCurrent) {\n                this._lastCurrent = null;\n            }\n            ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n            this._sideBar.removeTab(widget.title);\n            this._refreshVisibility();\n        }\n    }\n    Private.SideBarHandler = SideBarHandler;\n    class SkipLinkWidget extends Widget {\n        /**\n         * Construct a new skipLink widget.\n         */\n        constructor(shell) {\n            super();\n            this.addClass('jp-skiplink');\n            this.id = 'jp-skiplink';\n            this._shell = shell;\n            this._createSkipLink('Skip to left side bar');\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'click':\n                    this._focusLeftSideBar();\n                    break;\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('click', this);\n        }\n        /**\n         * A message handler invoked on a `'before-detach'`\n         * message\n         */\n        onBeforeDetach(msg) {\n            this.node.removeEventListener('click', this);\n            super.onBeforeDetach(msg);\n        }\n        _focusLeftSideBar() {\n            this._shell.expandLeft();\n        }\n        _createSkipLink(skipLinkText) {\n            const skipLink = document.createElement('a');\n            skipLink.href = '#';\n            skipLink.tabIndex = 1;\n            skipLink.text = skipLinkText;\n            skipLink.className = 'skip-link';\n            this.node.appendChild(skipLink);\n        }\n    }\n    Private.SkipLinkWidget = SkipLinkWidget;\n    class TitleHandler extends Widget {\n        /**\n         * Construct a new title handler.\n         */\n        constructor(shell) {\n            super();\n            this._selected = false;\n            const inputElement = document.createElement('input');\n            inputElement.type = 'text';\n            this.node.appendChild(inputElement);\n            this._shell = shell;\n            this.id = 'jp-title-panel-title';\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.inputElement.addEventListener('keyup', this);\n            this.inputElement.addEventListener('click', this);\n            this.inputElement.addEventListener('blur', this);\n        }\n        /**\n         * Handle `before-detach` messages for the widget.\n         */\n        onBeforeDetach(msg) {\n            super.onBeforeDetach(msg);\n            this.inputElement.removeEventListener('keyup', this);\n            this.inputElement.removeEventListener('click', this);\n            this.inputElement.removeEventListener('blur', this);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'keyup':\n                    void this._evtKeyUp(event);\n                    break;\n                case 'click':\n                    this._evtClick(event);\n                    break;\n                case 'blur':\n                    this._selected = false;\n                    break;\n            }\n        }\n        /**\n         * Handle `keyup` events on the handler.\n         */\n        async _evtKeyUp(event) {\n            if (event.key == 'Enter') {\n                const widget = this._shell.currentWidget;\n                if (widget == null) {\n                    return;\n                }\n                const oldName = widget.title.label;\n                const inputElement = this.inputElement;\n                const newName = inputElement.value;\n                inputElement.blur();\n                if (newName !== oldName) {\n                    widget.title.label = newName;\n                }\n                else {\n                    inputElement.value = oldName;\n                }\n            }\n        }\n        /**\n         * Handle `click` events on the handler.\n         */\n        _evtClick(event) {\n            // only handle primary button clicks\n            if (event.button !== 0 || this._selected) {\n                return;\n            }\n            const inputElement = this.inputElement;\n            event.preventDefault();\n            event.stopPropagation();\n            this._selected = true;\n            const selectEnd = inputElement.value.indexOf('.');\n            if (selectEnd === -1) {\n                inputElement.select();\n            }\n            else {\n                inputElement.setSelectionRange(0, selectEnd);\n            }\n        }\n        /**\n         * The input element containing the parent widget's title.\n         */\n        get inputElement() {\n            return this.node.children[0];\n        }\n    }\n    Private.TitleHandler = TitleHandler;\n    class RestorableSplitPanel extends SplitPanel {\n        constructor(options = {}) {\n            super(options);\n            this.updated = new Signal(this);\n        }\n        /**\n         * Emit 'updated' signal on 'update' requests.\n         */\n        onUpdateRequest(msg) {\n            super.onUpdateRequest(msg);\n            this.updated.emit();\n        }\n    }\n    Private.RestorableSplitPanel = RestorableSplitPanel;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * The application status signals and flags class.\n */\nexport class LabStatus {\n    /**\n     * Construct a new  status object.\n     */\n    constructor(app) {\n        this._busyCount = 0;\n        this._dirtyCount = 0;\n        this._busySignal = new Signal(app);\n        this._dirtySignal = new Signal(app);\n    }\n    /**\n     * Returns a signal for when application changes its busy status.\n     */\n    get busySignal() {\n        return this._busySignal;\n    }\n    /**\n     * Returns a signal for when application changes its dirty status.\n     */\n    get dirtySignal() {\n        return this._dirtySignal;\n    }\n    /**\n     * Whether the application is busy.\n     */\n    get isBusy() {\n        return this._busyCount > 0;\n    }\n    /**\n     * Whether the application is dirty.\n     */\n    get isDirty() {\n        return this._dirtyCount > 0;\n    }\n    /**\n     * Set the application state to dirty.\n     *\n     * @returns A disposable used to clear the dirty state for the caller.\n     */\n    setDirty() {\n        const oldDirty = this.isDirty;\n        this._dirtyCount++;\n        if (this.isDirty !== oldDirty) {\n            this._dirtySignal.emit(this.isDirty);\n        }\n        return new DisposableDelegate(() => {\n            const oldDirty = this.isDirty;\n            this._dirtyCount = Math.max(0, this._dirtyCount - 1);\n            if (this.isDirty !== oldDirty) {\n                this._dirtySignal.emit(this.isDirty);\n            }\n        });\n    }\n    /**\n     * Set the application state to busy.\n     *\n     * @returns A disposable used to clear the busy state for the caller.\n     */\n    setBusy() {\n        const oldBusy = this.isBusy;\n        this._busyCount++;\n        if (this.isBusy !== oldBusy) {\n            this._busySignal.emit(this.isBusy);\n        }\n        return new DisposableDelegate(() => {\n            const oldBusy = this.isBusy;\n            this._busyCount--;\n            if (this.isBusy !== oldBusy) {\n                this._busySignal.emit(this.isBusy);\n            }\n        });\n    }\n}\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { Token } from '@lumino/coreutils';\nimport { JupyterFrontEnd } from './frontend';\nimport { createRendermimePlugins } from './mimerenderers';\nimport { LabShell } from './shell';\nimport { LabStatus } from './status';\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLab extends JupyterFrontEnd {\n    /**\n     * Construct a new JupyterLab object.\n     */\n    constructor(options = { shell: new LabShell() }) {\n        super({\n            ...options,\n            shell: options.shell || new LabShell(),\n            serviceManager: options.serviceManager ||\n                new ServiceManager({\n                    standby: () => {\n                        return !this._info.isConnected || 'when-hidden';\n                    }\n                })\n        });\n        /**\n         * The name of the JupyterLab application.\n         */\n        this.name = PageConfig.getOption('appName') || 'JupyterLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = PageConfig.getOption('appNamespace') || this.name;\n        /**\n         * A list of all errors encountered when registering plugins.\n         */\n        this.registerPluginErrors = [];\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the JupyterLab application.\n         */\n        this.version = PageConfig.getOption('appVersion') || 'unknown';\n        this._info = JupyterLab.defaultInfo;\n        this.restored = this.shell.restored\n            .then(() => undefined)\n            .catch(() => undefined);\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = { ...JupyterLab.defaultInfo, ...info };\n        // Populate application paths override the defaults if necessary.\n        const defaultURLs = JupyterLab.defaultPaths.urls;\n        const defaultDirs = JupyterLab.defaultPaths.directories;\n        const optionURLs = (options.paths && options.paths.urls) || {};\n        const optionDirs = (options.paths && options.paths.directories) || {};\n        this._paths = {\n            urls: Object.keys(defaultURLs).reduce((acc, key) => {\n                if (key in optionURLs) {\n                    const value = optionURLs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultURLs[key];\n                }\n                return acc;\n            }, {}),\n            directories: Object.keys(JupyterLab.defaultPaths.directories).reduce((acc, key) => {\n                if (key in optionDirs) {\n                    const value = optionDirs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultDirs[key];\n                }\n                return acc;\n            }, {})\n        };\n        if (this._info.devMode) {\n            this.shell.addClass('jp-mod-devMode');\n        }\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return this._paths;\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                this.registerPluginErrors.push(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * The namespace for `JupyterLab` class statics.\n */\n(function (JupyterLab) {\n    /**\n     * The layout restorer token.\n     */\n    JupyterLab.IInfo = new Token('@jupyterlab/application:IInfo', 'A service providing metadata about the current application, including disabled extensions and whether dev mode is enabled.');\n    /**\n     * The default JupyterLab application info.\n     */\n    JupyterLab.defaultInfo = {\n        devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n        deferred: { patterns: [], matches: [] },\n        disabled: { patterns: [], matches: [] },\n        mimeExtensions: [],\n        filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true',\n        isConnected: true\n    };\n    /**\n     * The default JupyterLab application paths.\n     */\n    JupyterLab.defaultPaths = {\n        urls: {\n            base: PageConfig.getOption('baseUrl'),\n            notFound: PageConfig.getOption('notFoundUrl'),\n            app: PageConfig.getOption('appUrl'),\n            doc: PageConfig.getOption('docUrl'),\n            static: PageConfig.getOption('staticUrl'),\n            settings: PageConfig.getOption('settingsUrl'),\n            themes: PageConfig.getOption('themesUrl'),\n            translations: PageConfig.getOption('translationsApiUrl'),\n            hubHost: PageConfig.getOption('hubHost') || undefined,\n            hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n            hubUser: PageConfig.getOption('hubUser') || undefined,\n            hubServerName: PageConfig.getOption('hubServerName') || undefined\n        },\n        directories: {\n            appSettings: PageConfig.getOption('appSettingsDir'),\n            schemas: PageConfig.getOption('schemasDir'),\n            static: PageConfig.getOption('staticDir'),\n            templates: PageConfig.getOption('templatesDir'),\n            themes: PageConfig.getOption('themesDir'),\n            userSettings: PageConfig.getOption('userSettingsDir'),\n            serverRoot: PageConfig.getOption('serverRoot'),\n            workspaces: PageConfig.getOption('workspacesDir')\n        }\n    };\n})(JupyterLab || (JupyterLab = {}));\n//# sourceMappingURL=lab.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * A static class that routes URLs within the application.\n */\nexport class Router {\n    /**\n     * Create a URL router.\n     */\n    constructor(options) {\n        /**\n         * If a matching rule's command resolves with the `stop` token during routing,\n         * no further matches will execute.\n         */\n        this.stop = new Token('@jupyterlab/application:Router#stop');\n        this._routed = new Signal(this);\n        this._rules = new Map();\n        this.base = options.base;\n        this.commands = options.commands;\n    }\n    /**\n     * Returns the parsed current URL of the application.\n     */\n    get current() {\n        var _a, _b;\n        const { base } = this;\n        const parsed = URLExt.parse(window.location.href);\n        const { search, hash } = parsed;\n        const path = (_b = (_a = parsed.pathname) === null || _a === void 0 ? void 0 : _a.replace(base, '/')) !== null && _b !== void 0 ? _b : '';\n        const request = path + search + hash;\n        return { hash, path, request, search };\n    }\n    /**\n     * A signal emitted when the router routes a route.\n     */\n    get routed() {\n        return this._routed;\n    }\n    /**\n     * Navigate to a new path within the application.\n     *\n     * @param path - The new path or empty string if redirecting to root.\n     *\n     * @param options - The navigation options.\n     */\n    navigate(path, options = {}) {\n        const { base } = this;\n        const { history } = window;\n        const { hard } = options;\n        const old = document.location.href;\n        const url = path && path.indexOf(base) === 0 ? path : URLExt.join(base, path);\n        if (url === old) {\n            return hard ? this.reload() : undefined;\n        }\n        history.pushState({}, '', url);\n        if (hard) {\n            return this.reload();\n        }\n        if (!options.skipRouting) {\n            // Because a `route()` call may still be in the stack after having received\n            // a `stop` token, wait for the next stack frame before calling `route()`.\n            requestAnimationFrame(() => {\n                void this.route();\n            });\n        }\n    }\n    /**\n     * Register to route a path pattern to a command.\n     *\n     * @param options - The route registration options.\n     *\n     * @returns A disposable that removes the registered rule from the router.\n     */\n    register(options) {\n        var _a;\n        const { command, pattern } = options;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        const rules = this._rules;\n        rules.set(pattern, { command, rank });\n        return new DisposableDelegate(() => {\n            rules.delete(pattern);\n        });\n    }\n    /**\n     * Cause a hard reload of the document.\n     */\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Route a specific path to an action.\n     *\n     * #### Notes\n     * If a pattern is matched, its command will be invoked with arguments that\n     * match the `IRouter.ILocation` interface.\n     */\n    route() {\n        const { commands, current, stop } = this;\n        const { request } = current;\n        const routed = this._routed;\n        const rules = this._rules;\n        const matches = [];\n        // Collect all rules that match the URL.\n        rules.forEach((rule, pattern) => {\n            if (request === null || request === void 0 ? void 0 : request.match(pattern)) {\n                matches.push(rule);\n            }\n        });\n        // Order the matching rules by rank and enqueue them.\n        const queue = matches.sort((a, b) => b.rank - a.rank);\n        const done = new PromiseDelegate();\n        // Process each enqueued command sequentially and short-circuit if a promise\n        // resolves with the `stop` token.\n        const next = async () => {\n            if (!queue.length) {\n                routed.emit(current);\n                done.resolve(undefined);\n                return;\n            }\n            const { command } = queue.pop();\n            try {\n                const request = this.current.request;\n                const result = await commands.execute(command, current);\n                if (result === stop) {\n                    queue.length = 0;\n                    console.debug(`Routing ${request} was short-circuited by ${command}`);\n                }\n            }\n            catch (reason) {\n                console.warn(`Routing ${request} to ${command} failed`, reason);\n            }\n            void next();\n        };\n        void next();\n        return done.promise;\n    }\n}\n//# sourceMappingURL=router.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for which a plugin can provide to respond to connection failures\n * to the application server.\n */\nexport const IConnectionLost = new Token('@jupyterlab/application:IConnectionLost', `A service for invoking the dialog shown\n  when JupyterLab has lost its connection to the server. Use this if, for some reason,\n  you want to bring up the \"connection lost\" dialog under new circumstances.`);\n/**\n * The application status token.\n */\nexport const ILabStatus = new Token('@jupyterlab/application:ILabStatus', `A service for interacting with the application busy/dirty\n  status. Use this if you want to set the application \"busy\" favicon, or to set\n  the application \"dirty\" status, which asks the user for confirmation before leaving the application page.`);\n/**\n * The URL Router token.\n */\nexport const IRouter = new Token('@jupyterlab/application:IRouter', 'The URL router used by the application. Use this to add custom URL-routing for your extension (e.g., to invoke a command if the user navigates to a sub-path).');\n//# sourceMappingURL=tokens.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The tree path updater token.\n */\nexport const ITreePathUpdater = new Token('@jupyterlab/application:ITreePathUpdater', 'A service to update the tree path.');\n//# sourceMappingURL=treepathupdater.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n/**\n * Create the command options from the given semantic commands list\n * and the given default values.\n *\n * @param app Jupyter Application\n * @param semanticCommands Single semantic command  or a list of commands\n * @param defaultValues Default values\n * @param trans Translation bundle\n * @returns Command options\n */\nexport function createSemanticCommand(app, semanticCommands, defaultValues, trans) {\n    const { commands, shell } = app;\n    const commandList = Array.isArray(semanticCommands)\n        ? semanticCommands\n        : [semanticCommands];\n    return {\n        label: concatenateTexts('label'),\n        caption: concatenateTexts('caption'),\n        isEnabled: () => {\n            var _a;\n            const isEnabled = reduceAttribute('isEnabled');\n            return ((isEnabled.length > 0 &&\n                !isEnabled.some(enabled => enabled === false)) ||\n                ((_a = defaultValues.isEnabled) !== null && _a !== void 0 ? _a : false));\n        },\n        isToggled: () => {\n            var _a;\n            const isToggled = reduceAttribute('isToggled');\n            return (isToggled.some(enabled => enabled === true) ||\n                ((_a = defaultValues.isToggled) !== null && _a !== void 0 ? _a : false));\n        },\n        isVisible: () => {\n            var _a;\n            const isVisible = reduceAttribute('isVisible');\n            return ((isVisible.length > 0 &&\n                !isVisible.some(visible => visible === false)) ||\n                ((_a = defaultValues.isVisible) !== null && _a !== void 0 ? _a : true));\n        },\n        execute: async () => {\n            const widget = shell.currentWidget;\n            const commandIds = commandList.map(cmd => widget !== null ? cmd.getActiveCommandId(widget) : null);\n            const toExecute = commandIds.filter(commandId => commandId !== null && commands.isEnabled(commandId));\n            let result = null;\n            if (toExecute.length > 0) {\n                for (const commandId of toExecute) {\n                    result = await commands.execute(commandId);\n                    if (typeof result === 'boolean' && result === false) {\n                        // If a command returns a boolean, assume it is the execution success status\n                        // So break if it is false.\n                        break;\n                    }\n                }\n            }\n            else if (defaultValues.execute) {\n                result = await commands.execute(defaultValues.execute);\n            }\n            return result;\n        }\n    };\n    function reduceAttribute(attribute) {\n        const widget = shell.currentWidget;\n        const commandIds = commandList.map(cmd => widget !== null ? cmd.getActiveCommandId(widget) : null);\n        const attributes = commandIds\n            .filter(commandId => commandId !== null)\n            .map(commandId => commands[attribute](commandId));\n        return attributes;\n    }\n    function concatenateTexts(attribute) {\n        return () => {\n            var _a;\n            const texts = reduceAttribute(attribute).map((text, textIndex) => attribute == 'caption' && textIndex > 0\n                ? text.toLocaleLowerCase()\n                : text);\n            switch (texts.length) {\n                case 0:\n                    return (_a = defaultValues[attribute]) !== null && _a !== void 0 ? _a : '';\n                case 1:\n                    return texts[0];\n                default: {\n                    const hasEllipsis = texts.some(l => /…$/.test(l));\n                    const main = texts\n                        .slice(undefined, -1)\n                        .map(l => l.replace(/…$/, ''))\n                        .join(', ');\n                    const end = texts.slice(-1)[0].replace(/…$/, '') + (hasEllipsis ? '…' : '');\n                    return trans.__('%1 and %2', main, end);\n                }\n            }\n        };\n    }\n}\n//# sourceMappingURL=utils.js.map"],"names":["ConnectionLost","async","manager","err","translator","trans","nullTranslator","load","title","__","networkMsg","showErrorMessage","message","Private","JupyterFrontEndContextMenu","JupyterFrontEnd","Application","constructor","options","super","this","_formatChanged","Signal","contextMenu","ContextMenuSvg","commands","renderer","contextMenuRenderer","groupByTarget","sortBySelector","restored","Promise","resolve","requestAnimationFrame","commandLinker","CommandLinker","docRegistry","DocumentRegistry","started","then","catch","serviceManager","ServiceManager","format","_format","document","body","dataset","emit","formatChanged","contextMenuHitTest","fn","_contextMenuEvent","target","Node","node","HTMLElement","parentNode","evtContextMenu","event","shiftKey","suppressContextMenu","open","items","menu","length","command","close","preventDefault","stopPropagation","inDocMode","path","paths","docPattern","RegExp","urls","doc","match","IPaths","Token","ITreeResolver","element","closest","SIDEBAR_CLASS","CURRENT_CLASS","ACTIVE_CLASS","DEFAULT_RANK","ACTIVITY_CLASS","ILabShell","LabShell","Widget","_dockChildHook","handler","msg","type","child","addClass","_tracker","add","removeClass","remove","_activeChanged","_cachedLayout","_currentChanged","_currentPath","_currentPathChanged","_modeChanged","_isRestored","_layoutModified","_layoutDebouncer","Debouncer","undefined","_restored","PromiseDelegate","FocusTracker","_topHandlerHiddenByUser","_idTypeMap","Map","_mainOptionsCache","_sideOptionsCache","_delayedWidget","Array","id","waitForRestore","_userLayout","skipLinkWidget","_skipLinkWidget","SkipLinkWidget","show","skipLinkWrapper","Panel","addWidget","headerPanel","_headerPanel","BoxPanel","menuHandler","_menuHandler","PanelHandler","panel","setAttribute","topHandler","_topHandler","bottomPanel","_bottomPanel","hboxPanel","vsplitPanel","_vsplitPanel","RestorableSplitPanel","dockPanel","_dockPanel","DockPanelSvg","hiddenMode","HiddenMode","Display","MessageLoop","installMessageHook","hsplitPanel","_hsplitPanel","downPanel","_downPanel","TabPanelSvg","tabsMovable","leftHandler","_leftHandler","SideBarHandler","rightHandler","_rightHandler","rootLayout","BoxLayout","sideBar","stackedPanel","spacing","direction","orientation","SplitPanel","setStretch","setRelativeSizes","hide","layout","currentChanged","connect","_onCurrentChanged","activeChanged","_onActiveChanged","layoutModified","_onLayoutModified","updated","tabBar","tabMoved","_onTabPanelChanged","widgetRemoved","titleHandler","_titleHandler","TitleHandler","rank","mode","insertWidget","sender","args","newValue","oldValue","changed","disconnect","_updateTitlePanelTitle","DocumentWidget","context","pathChanged","_updateCurrentPath","activeWidget","addButtonEnabled","value","addRequested","currentPath","currentPathChanged","currentWidget","leftCollapsed","currentTitle","rightCollapsed","presentationMode","hasClass","toggleClass","dock","applicationCurrentWidget","saveLayout","activateWidget","widgets","from","normalizeAreaConfig","main","restoreLayout","_layoutRestorer","isDeferred","restoreDeferred","mainArea","activateById","reason","console","error","forEach","widget","parent","_addToMainArea","get","activate","clear","shellMode","fit","modeChanged","promise","_a","_translator","TabBarSvg","contentNode","userLayout","JSONExt","deepCopy","has","tabIndex","titles","findIndex","owner","currentIndex","find","activateNextTab","current","_currentTabBar","ci","nextBar","_adjacentBar","activatePreviousTab","prevBar","len","activateNextTabBar","activatePreviousTabBar","area","push","userPosition","set","disposed","delete","_addToBottomArea","_addToDownArea","_addToHeaderArea","_addToLeftArea","_addToMenuArea","_addToRightArea","_addToTopArea","Error","move","m","filter","c","collapseLeft","collapse","collapseRight","dispose","isDisposed","expandLeft","expand","expandRight","closeAll","isSideTabBarVisible","side","isVisible","isTopInSimpleModeVisible","isEmpty","layoutRestorer","configuration","_b","_c","_d","fetch","downArea","leftArea","rightArea","topArea","relativeSizes","simpleVisibility","setHidden","size","widgetIds","map","includes","titleIds","ArrayExt","shallowEqual","index","position","insertTab","rehydrate","flush","dehydrate","toggleTopInSimpleModeVisibility","toggleSideTabBarVisibility","updateConfig","config","Scale","ContentVisibility","t","children","onAfterAttach","inputElement","label","caption","ref","icon","LabIcon","bindprops","stylesheet","iconClass","classes","isHidden","bars","tabBars","indexOf","bar","className","replace","invoke","itemCmp","first","second","_panelChildHook","_items","v","removeFirstWhere","_panel","item","upperBound","insert","_isHiddenByUser","_updated","_sideBar","TabBar","insertBehavior","removeBehavior","allowDeselect","_stackedPanel","StackedPanel","_lastCurrent","tabActivateRequested","_onTabActivateRequested","_onWidgetRemoved","previous","_findWidgetByID","_findInsertIndex","tabIcon","_refreshVisibility","collapsed","visible","data","_findWidgetIndex","findFirstIndex","i","_findWidgetByTitle","oldWidget","previousTitle","newWidget","removeAt","removeTab","shell","_shell","_createSkipLink","handleEvent","_focusLeftSideBar","addEventListener","onBeforeDetach","removeEventListener","skipLinkText","skipLink","createElement","href","text","appendChild","_selected","_evtKeyUp","_evtClick","key","oldName","newName","blur","button","selectEnd","select","setSelectionRange","onUpdateRequest","LabStatus","app","_busyCount","_dirtyCount","_busySignal","_dirtySignal","busySignal","dirtySignal","isBusy","isDirty","setDirty","oldDirty","DisposableDelegate","Math","max","setBusy","oldBusy","JupyterLab","standby","_info","isConnected","name","PageConfig","getOption","namespace","registerPluginErrors","status","version","defaultInfo","info","Object","keys","reduce","acc","val","JSON","parse","stringify","defaultURLs","defaultPaths","defaultDirs","directories","optionURLs","optionDirs","_paths","devMode","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","registerPlugin","registerPluginModule","mod","default","hasOwnProperty","isArray","registerPluginModules","mods","IInfo","toLowerCase","deferred","patterns","matches","disabled","filesCached","base","notFound","static","settings","themes","translations","hubHost","hubPrefix","hubUser","hubServerName","appSettings","schemas","templates","userSettings","serverRoot","workspaces","Router","stop","_routed","_rules","parsed","URLExt","window","location","search","hash","pathname","request","routed","navigate","history","hard","old","url","join","reload","pushState","skipRouting","route","register","pattern","rules","rule","queue","sort","a","b","done","next","pop","execute","debug","warn","IConnectionLost","ILabStatus","IRouter","ITreePathUpdater","createSemanticCommand","semanticCommands","defaultValues","commandList","concatenateTexts","isEnabled","reduceAttribute","some","enabled","isToggled","toExecute","cmd","getActiveCommandId","commandId","result","attribute","texts","textIndex","toLocaleLowerCase","hasEllipsis","l","test","slice","end"],"sourceRoot":""}